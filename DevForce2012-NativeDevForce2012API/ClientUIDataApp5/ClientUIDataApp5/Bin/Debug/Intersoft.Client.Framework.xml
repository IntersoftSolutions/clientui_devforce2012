<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Intersoft.Client.Framework</name>
    </assembly>
    <members>
        <member name="T:Intersoft.Client.Framework.Encryption.Utils">
            <summary>
            Friend class for shared utility methods used by multiple Encryption classes
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.Encryption.Utils.FromBase64(System.String)">
            <summary>
            converts from a string Base64 representation to an array of bytes
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.Encryption.Utils.FromHex(System.String)">
            <summary>
            converts from a string Hex representation to an array of bytes
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.Encryption.Utils.GetXmlElement(System.String,System.String)">
            <summary>
            retrieve an element from an XML string
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.Encryption.Utils.ToBase64(System.Byte[])">
            <summary>
            converts from an array of bytes to a string Base64 representation
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.Encryption.Utils.ToHex(System.Byte[])">
            <summary>
            converts an array of bytes to a string Hex representation
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.LengthConverter">
            <summary>
            Converts instances of other types to and from instances of a double that
            represent an object measurement such as a height or width.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.LengthConverter.UnitToPixelConversions">
            <summary>
            Conversions from units to pixels.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.LengthConverter.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:System.Windows.LengthConverter" /> class.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.LengthConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines whether conversion is possible from a specified type to a
            <see cref="T:System.Double" /> that represents an object
            measurement.
            </summary>
            <param name="typeDescriptorContext">
            An <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
            that provides a format context.
            </param>
            <param name="sourceType">
            A <see cref="T:System.Type" /> that represents the type you want to
            convert from.
            </param>
            <returns>
            True if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:Intersoft.Client.Framework.LengthConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts from the specified value to values of the
            <see cref="T:System.Double" /> type.
            </summary>
            <param name="typeDescriptorContext">
            An <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
            that provides a format context.
            </param>
            <param name="cultureInfo">
            The <see cref="T:System.Globalization.CultureInfo" /> to use as the
            current culture.
            </param>
            <param name="source">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.LengthConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether the type converter can convert a measurement to the
            specified type.
            </summary>
            <param name="typeDescriptorContext">
            An <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
            that provides a format context.
            </param>
            <param name="destinationType">
            A <see cref="T:System.Type" /> that represents the type you want to
            convert to.
            </param>
            <returns>
            True if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:Intersoft.Client.Framework.LengthConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the specified measurement to the specified type.
            </summary>
            <param name="typeDescriptorContext">
            An object that provides a format context.
            </param>
            <param name="cultureInfo">
            The <see cref="T:System.Globalization.CultureInfo" /> to use as the
            current culture.
            </param>
            <param name="value">The value to convert.</param>
            <param name="destinationType">
            A <see cref="T:System.Type" /> that represents the type you want to
            convert to.
            </param>
            <returns>The converted value.</returns>
        </member>
        <member name="T:Intersoft.Client.Framework.ISItemsControl">
            <summary>
            Serves as the base class for all Intersoft Items Collection controls.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.IFramework">
            <summary>
            Defines data members that belongs to Intersoft Client UI Framework.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.IFramework.Framework">
            <summary>
            Gets the entity framework.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.IControl">
            <summary>
            Defines data members that belongs to Intersoft Client UI Control.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.IControl.AttachEventHandlers">
            <summary>
            Attach built-in event handlers to control templates. Call this method if necessary.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.IControl.DetachedEventHandlers">
            <summary>
            Detach built-in event handlers from control templates. Call this method if necessary.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.IControl.InitializeTemplates">
            <summary>
            Initializes control templates.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.IControl.InitializeStoryboards">
            <summary>
            Initializes storyboards.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.IControl.RefreshClip">
            <summary>
            Perform clipping to the dimension of the control. Call this method if necessary
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.IControl.ResumeLayout">
            <summary>
            Resume the layout.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.IControl.SuspendLayout">
            <summary>
            Suspend the layout.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.IControl.IsInDesignMode">
            <summary>
            Gets a value that indicates whether the control is in design mode (development).
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.IControl.LayoutSuspended">
            <summary>
            Gets a value that indicates whether the layout is being suspended
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.IControl.Platform">
            <summary>
            Gets a value that indicates the current client platform.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.ILicensing">
            <summary>
            Defines data members that belongs to Intersoft Client UI Licensing.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ILicensing.Product">
            <summary>
            Product Info.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ISItemsControl.ItemContainerStyleProperty">
            <summary>
            Identifies the ItemContainerStyle dependency property.
            </summary>
            <value>
            The identifier for the ItemContainerStyle dependency property.
            </value>
        </member>
        <member name="F:Intersoft.Client.Framework.ISItemsControl.ItemContainerStyleSelectorProperty">
            <value>
            The identifier for the ItemContainerStyleSelector dependency property.
            </value>
        </member>
        <member name="F:Intersoft.Client.Framework.ISItemsControl.ItemTemplateSelectorProperty">
            <value>
            The identifier for the ItemTemplateSelector dependency property.
            </value>
        </member>
        <member name="F:Intersoft.Client.Framework.ISItemsControl.CornerRadiusProperty">
            <summary>
            Identifies the CornerRadius dependency property.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ISItemsControl.CollectionMemberPathProperty">
            <summary>
            Identifies the CollectionMemberPath dependency property.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ISItemsControl.ImageMemberPathProperty">
            <summary>
            Identifies the ImageMemberPath dependency property.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISItemsControl.#ctor">
            <summary>
            Initializes a new instance of ISItemsControl class.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISItemsControl.ApplyTemplate(System.Windows.DependencyObject,System.Object)">
            <summary>
            Applies item template for each generated element.
            </summary>
            <param name="element">Container element.</param>
            <param name="item">Item.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISItemsControl.ApplyBinding(System.Windows.DependencyObject,System.Object)">
            <summary>
            Applies item binding for each generated element.
            </summary>
            <param name="element">Container element.</param>
            <param name="item">Item.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISItemsControl.ApplyStyle(System.Windows.DependencyObject,System.Object)">
            <summary>
            Applies style for container element generated for each item.
            </summary>
            <param name="element">Container element.</param>
            <param name="item">Item.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISItemsControl.IsSelectorStyle(System.Windows.Style)">
            <summary>
            Determines whether the specified Style is defined in ItemContainerStyleSelector.
            </summary>
            <param name="style">A style object.</param>
            <returns>True if the specified style is defined in ItemContainerStyleSelector.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.ISItemsControl.IsSelectorTemplate(System.Windows.DataTemplate)">
            <summary>
            Determines whether the specified Template is defined in ItemTemplateSelector.
            </summary>
            <param name="template">A template object.</param>
            <returns>True if the specified template is defined in ItemTemplateSelector.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.ISItemsControl.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
            <summary>
            Prepares the specified element to display the specified item.
            </summary>
            <param name="element">The container element used to display the specified item.</param>
            <param name="item">The item to display.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISItemsControl.RefreshBinding(System.Windows.DependencyProperty,System.String)">
            <summary>
            Refresh property binding.
            </summary>
            <param name="property">Dependency property.</param>
            <param name="propertyPath">Property path.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISItemsControl.RefreshImageBinding">
            <summary>
            Refresh image member path binding.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISItemsControl.RefreshStyleSelector">
            <summary>
            Refresh style selector.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISItemsControl.RefreshTemplateSelector">
            <summary>
            Refresh style selector.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISItemsControl.OnApplyTemplate">
            <summary>
            Builds the visual tree for the ISItemsControl when a new template is applied.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISItemsControl.AttachEventHandlers">
            <summary>
            Attach built-in event handlers to control templates. Call this method if necessary.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISItemsControl.OnUnloaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the element is unloaded.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The event data for the property change.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISItemsControl.DetachedEventHandlers">
            <summary>
            Detach built-in event handlers from control templates. Call this method if necessary.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISItemsControl.InitializeTemplates">
            <summary>
            Initializes control templates.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISItemsControl.InitializeStoryboards">
            <summary>
            Initializes storyboards.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISItemsControl.OnItemBind(System.Windows.DependencyObject,System.Object)">
            <summary>
            Perform on item bind
            </summary>
            <param name="element">Element.</param>
            <param name="item">Item.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISItemsControl.OnItemBound(System.Windows.DependencyObject,System.Object)">
            <summary>
            Perform on item bound
            </summary>
            <param name="element">Element.</param>
            <param name="item">Item.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISItemsControl.OnCornerRadiusChanged(System.Windows.CornerRadius)">
            <summary>
            Called when the value of CornerRadius property changes.
            </summary>
            <param name="newRadius">The new corner radius.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISItemsControl.OnItemsSourceChanged(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Called when the value of ItemsSource property changes.
            </summary>
            <param name="oldValue">The old value of the ItemsSource property.</param>
            <param name="newValue">The new value of the ItemsSource property.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISItemsControl.OnItemsPanelChanged(System.Windows.Controls.ItemsPanelTemplate,System.Windows.Controls.ItemsPanelTemplate)">
            <summary>
            Called when the value of ItemsPanel property changes.
            </summary>
            <param name="oldValue">The old value of the ItemsPanel property.</param>
            <param name="newValue">The new value of the ItemsPanel property.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISItemsControl.OnDependencyPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Invoked when the control properties has changed.
            </summary>
            <param name="sender">The instance for which property is changed.</param>
            <param name="e">The event argument for DependencyPropertyChanged.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISItemsControl.FindPanel">
            <summary>
            Gets the panel object reference.
            </summary>        
            <returns>Panel</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.ISItemsControl.RefreshClip">
            <summary>
            Perform clipping to the dimension of the control. Call this method if necessary
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISItemsControl.ResumeLayout">
            <summary>
            Resume the layout.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISItemsControl.SuspendLayout">
            <summary>
            Suspend the layout.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ISItemsControl.ItemBindEvent">
            <summary>
            Identifies ItemBind routed event.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ISItemsControl.ItemBoundEvent">
            <summary>
            Identifies ItemBoundEvent routed event.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISItemsControl.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISItemsControl.ItemContainerStyle">
            <summary>
            Gets or sets the Style that is applied to the container element generated for each item.
            </summary>
            <value>
            The Style that is applied to the container element generated for each item. The default is null.
            </value>
        </member>
        <member name="P:Intersoft.Client.Framework.ISItemsControl.ItemContainerStyleSelector">
            <summary>
            Gets or sets the Style Selector that is applied to the container element generated for each item.
            </summary>
            <value>
            The Style Selector that is applied to the container element generated for each item. The default is null.
            </value>
        </member>
        <member name="P:Intersoft.Client.Framework.ISItemsControl.ItemTemplateSelector">
            <summary>
            Gets or sets the Template Selector that is applied to the container element generated for each item.
            </summary>
            <value>
            The Template Selector that is applied to the container element generated for each item. The default is null.
            </value>
        </member>
        <member name="P:Intersoft.Client.Framework.ISItemsControl.CornerRadius">
            <summary>
            Represents the radius of a border's corner. The radius can't be negative.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISItemsControl.CollectionMemberPath">
            <summary>
            Gets or sets the collection member path.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISItemsControl.ImageMemberPath">
            <summary>
            Gets or sets the image member path.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISItemsControl.Framework">
            <summary>
            Gets the entity framework.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISItemsControl.IsInDesignMode">
            <summary>
            Gets a value that indicates whether the control is in design mode (development).
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISItemsControl.IsRefreshingStyle">
            <summary>
            Gets a value that indicates whether the control's style is being refreshed or reassigned from style manager.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISItemsControl.IsRefreshingTemplate">
            <summary>
            Gets a value that indicates whether the control's template is being refreshed or reassigned from template manager.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISItemsControl.ItemsControlHelper">
            <summary>
            Gets or sets the items control helper class.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISItemsControl.LayoutSuspended">
            <summary>
            Gets a value that indicates whether the layout is being suspended.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISItemsControl.Platform">
            <summary>
            Gets a value that indicates the current client platform.
            </summary>
        </member>
        <member name="E:Intersoft.Client.Framework.ISItemsControl.ItemBind">
            <summary>
            Occurs when item binding.
            </summary>
        </member>
        <member name="E:Intersoft.Client.Framework.ISItemsControl.ItemBound">
            <summary>
            Occurs when item is bound.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISItemsControl.Product">
            <summary>
            Product Info.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISItemsControl.Intersoft#Client#Framework#ILicensing#Product">
            <summary>
            Product Info.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.DataBoundRoutedEventHandler">
            <summary>
            Represents the method that will handle the DataBound event.
            </summary>
            <param name="sender">The object where the event handler is attached.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="T:Intersoft.Client.Framework.DataBoundRoutedEventArgs">
            <summary>
            Provides data for DataBound event.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.ISRoutedEventArgs">
            <summary>
            Contains state information and event data associated with a routed event. 
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISRoutedEventArgs.Handled">
            <summary>
            Gets or sets a value that indicates the present state of the event handling for a routed event as it travels the route. 
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISRoutedEventArgs.Source">
            <summary>
            Gets or sets a reference to the object that raised the event. 
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.DataBoundRoutedEventArgs.#ctor(Intersoft.Client.Framework.RoutedEvent)">
            <summary>
            Initializes a new instance of the DataBoundRoutedEventArgs class. 
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.DataBoundRoutedEventArgs.Element">
            <summary>
            Element.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.DataBoundRoutedEventArgs.Item">
            <summary>
            Item.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.Regions.ViewMetadata">
            <summary>
            Represents a metadata class that describes a view.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.ViewMetadata.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Intersoft.Client.Framework.Regions.ViewMetadata"/> class.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.ViewMetadata.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Intersoft.Client.Framework.Regions.ViewMetadata"/> class.
            </summary>
            <param name="viewSortHint">A value that represents the hint for view sorting.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.ViewMetadata.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Intersoft.Client.Framework.Regions.ViewMetadata"/> class.
            </summary>
            <param name="viewSortHint">A value that represents the hint for view sorting.</param>
            <param name="isActive">A value that indicates whether the view should be activated.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.ViewMetadata.#ctor(System.String,System.Boolean,System.Object)">
            <summary>
            Initializes a new instance of <see cref="T:Intersoft.Client.Framework.Regions.ViewMetadata"/> class.
            </summary>
            <param name="viewSortHint"></param>
            <param name="isActive"></param>
            <param name="userData">A user-defined custom data.</param>
        </member>
        <member name="E:Intersoft.Client.Framework.Regions.ViewMetadata.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.Regions.ViewMetadata.Name">
            <summary>
            Gets or sets the name to apply to the view.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.Regions.ViewMetadata.ViewSortHint">
            <summary>
            Gets or sets the sorting hint to apply to the view.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.Regions.ViewMetadata.State">
            <summary>
            Gets the current state of the view.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.Regions.ViewMetadata.IsActive">
            <summary>
            Gets or sets a value indicating whether the view is active.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.Regions.ViewMetadata.UserData">
            <summary>
            Gets or sets the user-defined custom data.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.Regions.UriTypeMappingEventArgs">
            <summary>
            Represents the event argument data for mapping an URI to a type.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.Regions.UriTypeMappingEventArgs.ApplicationName">
            <summary>
            Gets or sets the name of the application to map.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.Regions.UriTypeMappingEventArgs.FrameName">
            <summary>
            Gets or sets the name of the UXFrame instance.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.Regions.UriTypeMappingEventArgs.Uri">
            <summary>
            Gets or sets the Uri of the view to be mapped.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.Regions.UriTypeMappingEventArgs.ViewType">
            <summary>
            Gets or sets the view type of which the <see cref="P:Intersoft.Client.Framework.Regions.UriTypeMappingEventArgs.Uri"/> will map to.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.Regions.NavigableViewPartAttribute">
            <summary>
            Represents the attribute to define a navigable view part.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.NavigableViewPartAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Intersoft.Client.Framework.Regions.NavigableViewPartAttribute"/> class.
            </summary>
            <param name="uri">The navigation URI that will map to the type of which this attribute is attached to.</param>
        </member>
        <member name="P:Intersoft.Client.Framework.Regions.NavigableViewPartAttribute.FrameName">
            <summary>
            Gets or sets the target name of the UXFrame instance.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.Regions.NavigableViewPartAttribute.Uri">
            <summary>
            Gets or sets the Uri of the view to be mapped.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.Regions.NavigableViewPartAttribute.ViewType">
            <summary>
            Gets or sets the view type of which the <see cref="P:Intersoft.Client.Framework.Regions.NavigableViewPartAttribute.Uri"/> will map to.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.Regions.IRegionManager">
            <summary>
            Defines an interface to manage a set of <see cref="T:Intersoft.Client.Framework.Regions.IRegion">regions</see> and to attach regions to objects (typically UI controls).
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.Regions.IRegionManager.Regions">
            <summary>
            Gets a collection of <see cref="T:Intersoft.Client.Framework.Regions.IRegion"/> that identify each region by name. You can use this collection to add or remove regions to the current region manager.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.Regions.IRegionManager.Host">
            <summary>
            Gets or sets the element that hosts this <see cref="T:Intersoft.Client.Framework.Regions.IRegionManager"/> instance.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.Regions.IRegionManager.Name">
            <summary>
            Gets the unique name of the region manager which can be used to locate the region manager instance through <see cref="T:Intersoft.Client.Framework.Regions.RegionManagerService"/>.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.BindingSourceEvaluator`1.#ctor(System.Windows.Data.Binding)">
            <summary>
            Initializes a new instance of the BindingSourceEvaluator class.
            </summary>
            <param name="binding">The binding.</param>
        </member>
        <member name="F:Intersoft.Client.Framework.BindingSourceEvaluator`1.ValueProperty">
            <summary>
            Identifies the Value dependency property.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.BindingSourceEvaluator`1.GetDynamicValue(System.Object)">
            <summary>
            Evaluates the specified source.
            </summary>
            <param name="source">The object used as a source for the evaluation.</param>
            <returns>The evaluated binding.</returns>
            <remarks>Only uses Path, Converter, ConverterCulture and ConverterParameter.</remarks>
        </member>
        <member name="P:Intersoft.Client.Framework.BindingSourceEvaluator`1.Value">
            <summary>
            Gets the data item string value.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.BindingSourceEvaluator`1.ValueBinding">
            <summary>
            Gets the value binding that is used as a template for the actual evaluation.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.BindingSourceMode">
            <summary>
            Describes the location of the binding source relative to the position of the binding target.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.BindingSourceMode.Self">
            <summary>
            Refers to the element on which you are setting the binding and allows you to bind 
            one property of that element to another property on the same element.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.BindingSourceMode.FindAncestor">
            <summary>
            Refers to the ancestor in the parent chain of the data-bound element. 
            You can use this to bind to an ancestor of a specific type or its subclasses. 
            This is the mode you use if you want to specify <see cref="!:AncestorType"/> and/or <see cref="!:AncestorLevel"/>.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.BindingSourceMode.FindName">
            <summary>
            Refers to the element whose name matches the given <see cref="!:ElementName"/> in the visual tree.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.BindingDescriptors">
            <summary>
            Describes a collection of <see cref="T:Intersoft.Client.Framework.BindingDescriptor"/> objects attached to a single framework element.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.BindingDescriptors.#ctor">
            <summary>
            Creates a new instance of BindingDescriptors class.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.BindingDescriptors.Bindings">
            <summary>
            Gets or sets the collection of BindingDescriptors.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.BindingDescriptor">
            <summary>
            Describes the members for binding operation in <see cref="T:Intersoft.Client.Framework.BindingFramework"/>.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.BindingDescriptor.#ctor">
            <summary>
            Creates a new instance of BindingDescriptor class.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.BindingDescriptor.SourceProperty">
            <summary>
            Gets or sets the source property for data binding.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.BindingDescriptor.ElementName">
            <summary>
            Gets or sets the element name for the target data binding.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.BindingDescriptor.TargetProperty">
            <summary>
            Gets or sets the target property for data binding.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.BindingDescriptor.Converter">
            <summary>
            Gets or sets the converter to use.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.BindingDescriptor.ConverterParameter">
            <summary>
            Gets or sets the parameter to pass to the Converter.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.BindingDescriptor.Mode">
            <summary>
            Gets or sets a BindingSourceMode value that describes the location 
            of the binding source relative to the position of the binding target.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.BindingDescriptor.AncestorType">
            <summary>
            Gets or sets the type of ancestor to look for.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.BindingDescriptor.AncestorLevel">
            <summary>
            Gets or sets the level of ancestor to look for, in FindAncestor mode. Use 1 to indicate the one nearest to the binding target element.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.BindingDescriptor.MatchBaseType">
            <summary>
            Gets or sets a value that indicates whether binding descriptor will try to match base type.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.PropertyBinding">
            <summary>
            Describes the members for property binding operation in <see cref="T:Intersoft.Client.Framework.BindingFramework"/>.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.PropertyBinding.Type">
            <summary>
            Optional type parameter used to specify the type of an attached
            DependencyProperty as an assembly-qualified name, full name, or
            short name.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.PropertyBinding.Property">
            <summary>
            Property name for the normal/attached DependencyProperty on which
            to set the Binding.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.PropertyBinding.Binding">
            <summary>
            Gets or sets the binding on the specified property.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.PropertyBinding.Values">
            <summary>
            Collection of SetterValueBindingHelper instances to apply to the
            target element.
            </summary>
            <remarks>
            Used when multiple Bindings need to be applied to the same element.
            </remarks>
        </member>
        <member name="P:Intersoft.Client.Framework.PropertyBinding.Value">
            <summary>
            Gets or sets the value to apply to the specified property.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.PropertyBinding.ValueDataContext">
            <summary>
            Gets or sets the value to apply to the data context of the <see cref="P:Intersoft.Client.Framework.PropertyBinding.Value"/> property.
            The <see cref="P:Intersoft.Client.Framework.PropertyBinding.Value"/> should be an instance of FrameworkElement type for this property to work properly.
            </summary> 
        </member>
        <member name="T:Intersoft.Client.Framework.BindingFramework">
            <summary>
            Intersoft binding framework for relative source and property binding capability in Silverlight platform.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.BindingFramework.GetBinding(System.Windows.DependencyObject)">
            <summary>
            Gets the BindingDescriptor object that attached on the dependency object.
            </summary>
            <param name="obj">The dependency object to query.</param>
            <returns>BindingDescriptor object.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.BindingFramework.SetBinding(System.Windows.DependencyObject,Intersoft.Client.Framework.BindingDescriptor)">
            <summary>
            Sets the BindingDescriptor to the specified dependency object.
            </summary>
            <param name="obj">The dependency object to set.</param>
            <param name="value">BindingDescriptor object.</param>
        </member>
        <member name="F:Intersoft.Client.Framework.BindingFramework.BindingProperty">
            <summary>
            Identifies the Binding attached property.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.BindingFramework.GetBindings(System.Windows.DependencyObject)">
            <summary>
            Gets the BindingDescriptors object that attached on the dependency object.
            </summary>
            <param name="obj">The dependency object to query.</param>
            <returns>BindingDescriptors object.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.BindingFramework.SetBindings(System.Windows.DependencyObject,Intersoft.Client.Framework.BindingDescriptors)">
            <summary>
            Sets the BindingDescriptors to the specified dependency object.
            </summary>
            <param name="obj">The dependency object to set.</param>
            <param name="value">BindingDescriptors object.</param>
        </member>
        <member name="F:Intersoft.Client.Framework.BindingFramework.BindingsProperty">
            <summary>
            Identifies the Bindings attached property.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.BindingFramework.GetPropertyBinding(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the PropertyBinding attached property.
            </summary>
            <param name="element">Element for which to get the property.</param>
            <returns>Value of PropertyBinding attached property.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.BindingFramework.SetPropertyBinding(System.Windows.DependencyObject,Intersoft.Client.Framework.PropertyBinding)">
            <summary>
            Sets the value of the PropertyBinding attached property.
            </summary>
            <param name="element">Element on which to set the property.</param>
            <param name="value">Value for PropertyBinding attached property.</param>
        </member>
        <member name="F:Intersoft.Client.Framework.BindingFramework.PropertyBindingProperty">
            <summary>
            Identifies the PropertyBinding attached property.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.BindingFramework.DataContextProxyProperty">
            <summary>
            Identifies the DataContextProxy attached property.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.BindingFramework.MultiBindingsProperty">
            <summary>
            Identifies the MultiBindings attached property.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.BindingFramework.MultiBindingProperty">
            <summary>
            Identifies the MultiBinding attached property.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.BindingFramework.GetDataContextProxy(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the DataContextProxy attached property.
            </summary>
            <param name="element">Element for which to get the property.</param>
            <returns>Value of DataContextProxy attached property.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.BindingFramework.SetDataContextProxy(System.Windows.DependencyObject,System.Object)">
            <summary>
            Sets the value of the DataContextProxy attached property.
            </summary>
            <param name="element">Element on which to set the property.</param>
            <param name="value">Value for DataContextProxy attached property.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.BindingFramework.GetMultiBindings(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the MultiBindings attached property.
            </summary>
            <param name="element">Element for which to get the property.</param>
            <returns>Value of MultiBindings attached property.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.BindingFramework.SetMultiBindings(System.Windows.DependencyObject,Intersoft.Client.Framework.MultiBindings)">
            <summary>
            Sets the value of the MultiBindings attached property.
            </summary>
            <param name="element">Element on which to set the property.</param>
            <param name="value">Value for MultiBindings attached property.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.BindingFramework.GetMultiBinding(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the MultiBinding attached property.
            </summary>
            <param name="element">Element for which to get the property.</param>
            <returns>Value of MultiBinding attached property.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.BindingFramework.SetMultiBinding(System.Windows.DependencyObject,Intersoft.Client.Framework.MultiBinding)">
            <summary>
            Sets the value of the MultiBinding attached property.
            </summary>
            <param name="element">Element on which to set the property.</param>
            <param name="value">Value for MultiBinding attached property.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.BindingFramework.UnregisterBindingDescriptor(System.Windows.FrameworkElement)">
            <summary>
            Unregister the binding descriptor defined in the children of the specified element.
            </summary>
            <param name="element">The element to unregister.</param>
        </member>
        <member name="T:Intersoft.Client.Framework.ISTextBox">
            <summary>
            Serves as the base class for all Intersoft TextBox controls.
            </summary> 
        </member>
        <member name="F:Intersoft.Client.Framework.ISTextBox.CornerRadiusProperty">
            <summary>
            Identifies the CornerRadius dependency property.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ISTextBox.ReadOnlyBackgroundProperty">
            <summary>
            Identifies the ReadOnlyBackground dependency property.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISTextBox.OnApplyTemplate">
            <summary>
            Builds the visual tree when a new template is applied.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISTextBox.AttachEventHandlers">
            <summary>
            Attach built-in event handlers to control templates. Call this method if necessary.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISTextBox.OnUnloaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the element is unloaded.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The event data for the property change.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISTextBox.InitializeTemplates">
            <summary>
            Initializes control templates.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISTextBox.InitializeStoryboards">
            <summary>
            Initializes storyboards.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISTextBox.DetachedEventHandlers">
            <summary>
            Detach built-in event handlers from control templates. Call this method if necessary.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISTextBox.OnCornerRadiusChanged">
            <summary>
            Occurs when corner radius property changes.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISTextBox.RefreshClip">
            <summary>
            Perform clipping to the dimension of the control. Call this method if necessary
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISTextBox.ResumeLayout">
            <summary>
            Resume the layout.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISTextBox.SuspendLayout">
            <summary>
            Suspend the layout.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISTextBox.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ISTextBox.CommitValueEvent">
            <summary>
            Identifies the PreviewCommitValue event.
            </summary>
            <returns>
            The identifier for the CommitValue routed event.
            </returns>
        </member>
        <member name="F:Intersoft.Client.Framework.ISTextBox.PreviewCommitValueEvent">
            <summary>
            Identifies the PreviewCommitValue event.
            </summary>
            <returns>
            The identifier for the PreviewCommitValue routed event.
            </returns>
        </member>
        <member name="P:Intersoft.Client.Framework.ISTextBox.Framework">
            <summary>
            Gets the entity framework.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISTextBox.IsInDesignMode">
            <summary>
            Gets a value that indicates whether the control is in design mode (development).
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISTextBox.LayoutSuspended">
            <summary>
            Gets a value that indicates whether the layout is being suspended.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISTextBox.Platform">
            <summary>
            Gets a value that indicates the current client platform.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISTextBox.CornerRadius">
            <summary>
            Represents the radius of a border's corner. The radius can't be negative.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISTextBox.ReadOnlyBackground">
            <summary>
            Gets or sets a value that determines the background brush when textbox is in read only mode.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISTextBox.Product">
            <summary>
            Product Info.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISTextBox.Intersoft#Client#Framework#ILicensing#Product">
            <summary>
            Product Info.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.ISelectionItem">
            <summary>
            Defines data members that belongs to selection item control.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISelectionItem.Select">
            <summary>
            Select the item.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISelectionItem.Unselect">
            <summary>
            Unselect the item.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISelectionItem.ForceMultipleSelection">
            <summary>
            Gets value that determine whether force multiple selection is enabled or not. Used for internal mechanism.
            </summary>
            <param name="flag"></param>
        </member>
        <member name="P:Intersoft.Client.Framework.ISelectionItem.IsSelected">
            <summary>
            Gets or sets a value that indicates whether the current item is selected.        
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISelectionItem.Owner">
            <summary>
            Gets the owner of the selection item.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISelectionItem.ParentControl">
            <summary>
            Gets the parent control of the selection item.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISelectionItemExtensions.IsMultipleSelection(Intersoft.Client.Framework.ISelectionItem)">
            <summary>
            Gets a value that determine whether the current selection is multiple selection.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Intersoft.Client.Framework.ISHeaderedContentControl">
            <summary>
            Serves as the base class for all Intersoft Headered Content controls.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.ISContentControl">
            <summary>
            Serves as the base class for all Intersoft Content controls.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ISContentControl.CornerRadiusProperty">
            <summary>
            Identifies the CornerRadius dependency property.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISContentControl.GetIsVirtualContent(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the IsVirtualContent property attached to the specified object.
            </summary>
            <param name="obj">The object to query.</param>
            <returns>A boolean value.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.ISContentControl.SetIsVirtualContent(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the value of the IsVirtualContent property attached to the specified object.
            </summary>
            <param name="obj">The object of which property to set.</param>
            <param name="value">A boolean value.</param>
        </member>
        <member name="F:Intersoft.Client.Framework.ISContentControl.IsVirtualContentProperty">
            <summary>
            Identifies the IsVirtualContent dependency property.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISContentControl.#ctor">
            <summary>
            Initializes a new instance of ISContentControl class.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISContentControl.OnApplyTemplate">
            <summary>
            Builds the visual tree when a new template is applied.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISContentControl.AttachEventHandlers">
            <summary>
            Attach built-in event handlers to control templates. Call this method if necessary.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISContentControl.OnUnloaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the element is unloaded.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The event data for the property change.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISContentControl.InitializeTemplates">
            <summary>
            Initializes control templates.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISContentControl.InitializeStoryboards">
            <summary>
            Initializes storyboards.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISContentControl.DetachedEventHandlers">
            <summary>
            Detach built-in event handlers from control templates. Call this method if necessary.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISContentControl.OnContentChanged(System.Object,System.Object)">
            <summary>
            Called when the value of the Content property changes.
            </summary>
            <param name="oldContent">The old value of the Content property.</param>
            <param name="newContent">The new value of the Content property.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISContentControl.OnCornerRadiusChanged">
            <summary>
            Occurs when corner radius property changes.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISContentControl.RefreshClip">
            <summary>
            Perform clipping to the dimension of the control. Call this method if necessary
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISContentControl.ResumeLayout">
            <summary>
            Resume the layout.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISContentControl.SuspendLayout">
            <summary>
            Suspend the layout.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ISContentControl.ContentChangedEvent">
            <summary>
            ContentChanged routed event.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISContentControl.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISContentControl.CornerRadius">
            <summary>
            Represents the radius of a border's corner. The radius can't be negative.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISContentControl.Framework">
            <summary>
            Gets the entity framework.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISContentControl.IsInDesignMode">
            <summary>
            Gets a value that indicates whether the control is in design mode (development).
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISContentControl.LayoutSuspended">
            <summary>
            Gets a value that indicates whether the layout is being suspended.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISContentControl.Platform">
            <summary>
            Gets a value that indicates the current client platform.
            </summary>
        </member>
        <member name="E:Intersoft.Client.Framework.ISContentControl.ContentChanged">
            <summary>
            Occurs when content is changes.
            </summary>      
        </member>
        <member name="P:Intersoft.Client.Framework.ISContentControl.Product">
            <summary>
            Product Info.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISContentControl.Intersoft#Client#Framework#ILicensing#Product">
            <summary>
            Product Info.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ISHeaderedContentControl.HasHeaderProperty">
            <summary>
            Identifies the HasHeader dependency property.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ISHeaderedContentControl.HeaderProperty">
            <summary>
            Identifies the Header dependency property.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ISHeaderedContentControl.HeaderTemplateProperty">
            <summary>
            Identifies the HeaderTemplate dependency property.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedContentControl.OnApplyTemplate">
            <summary>
            Builds the visual tree for the ISHeaderedContentControl when a new template is applied.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedContentControl.AttachEventHandlers">
            <summary>
            Attach built-in event handlers to control templates. Call this method if necessary.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedContentControl.DetachedEventHandlers">
            <summary>
            Detach built-in event handlers from control templates. Call this method if necessary.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedContentControl.ChangeVisualState">
            <summary>
            Change the visual state.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedContentControl.ChangeVisualState(System.Boolean)">
            <summary>
            Change the visual state.
            </summary>
            <param name="useTransitions">Use transitions.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedContentControl.OnHeaderChanged(System.Object,System.Object)">
            <summary>
            Called when the value of the Header property changes.
            </summary>
            <param name="oldHeader">The old value of the Header property.</param>
            <param name="newHeader">The new value of the Header property.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedContentControl.OnHeaderTemplateChanged(System.Windows.DataTemplate,System.Windows.DataTemplate)">
            <summary>
            Called when the value of the HeaderTemplate property changes.
            </summary>
            <param name="oldHeaderTemplate">The old value of the HeaderTemplate property.</param>
            <param name="newHeaderTemplate">The new value of the HeaderTemplate property.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedContentControl.OnIsEnabledChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the value of IsEnabled property changes.
            </summary>
            <param name="e">The event data for the property change.</param>
        </member>
        <member name="P:Intersoft.Client.Framework.ISHeaderedContentControl.HasHeader">
            <summary>
            Determines whether the Header property of the control is set to a specific value.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISHeaderedContentControl.Header">
            <summary>
            Gets or sets the content for the header of the control.
            </summary>
            <value>
            The content for the header of the control. The default value is null.
            </value>
        </member>
        <member name="P:Intersoft.Client.Framework.ISHeaderedContentControl.HeaderTemplate">
            <summary>
            Gets or sets the template that is used to display the content of the control's header.
            </summary>
            <value>
            The template that is used to display the content of the control's header. The default is null.
            </value>
        </member>
        <member name="T:Intersoft.Client.Framework.VisualStateSelector">
            <summary>
            Provides a visual state selector.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.VisualStateSelector.SelectVisualState(System.Object,System.Windows.DependencyObject)">
            <summary>
            Select style.
            </summary>
            <param name="item">Item.</param>
            <param name="container">Container.</param>
            <returns>Visual State</returns>
        </member>
        <member name="T:Intersoft.Client.Framework.Regions.RegionAdapterBase`1">
            <summary>
            Represents the base class to facilitate the creation of <see cref="T:Intersoft.Client.Framework.Regions.IRegionAdapter"/> implementations.
            </summary>
            <typeparam name="T">Type of object to adapt.</typeparam>
        </member>
        <member name="T:Intersoft.Client.Framework.Regions.IRegionAdapter">
            <summary>
            Defines an interfaces to adapt an object and bind it to a new <see cref="T:Intersoft.Client.Framework.Regions.IRegion"/>.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.IRegionAdapter.Adapt(Intersoft.Client.Framework.Regions.IRegion,System.Object)">
            <summary>
            Adapts an object (typically a control) to the specified <see cref="T:Intersoft.Client.Framework.Regions.IRegion"/>.
            </summary>
            <param name="region">The region of which object to adapt.</param>
            <param name="regionTarget">The object to adapt.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.IRegionAdapter.Release(Intersoft.Client.Framework.Regions.IRegion)">
            <summary>
            Releases the adapter from the specified <see cref="T:Intersoft.Client.Framework.Regions.IRegion"/> and frees the resources allocated by the adapter.
            </summary>
            <param name="region">The region to release.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.IRegionAdapter.CanActivate">
            <summary>
            Determines whether the specified <see cref="T:Intersoft.Client.Framework.Regions.IRegion"/> supports activation.
            </summary>
            <returns>A boolean value, true if the region supports deactivation.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.IRegionAdapter.CanDeactivate">
            <summary>
            Determines whether the specified <see cref="T:Intersoft.Client.Framework.Regions.IRegion"/> supports deactivation.
            </summary>
            <returns>A boolean value, true if the region supports deactivation.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.IRegionAdapter.Activate(System.Object)">
            <summary>
            Activates the specified view.
            </summary>
            <param name="view">The view to activate.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.IRegionAdapter.Deactivate(System.Object)">
            <summary>
            Deactivates the specified view.
            </summary>
            <param name="view">The view to deactivate.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.IRegionAdapter.Remove(System.Object)">
            <summary>
            Removes the specified view from the region.
            </summary>
            <param name="view">The view to remove.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.IRegionAdapter.GetViews">
            <summary>
            Returns a list of the views registered in the region.
            </summary>
            <returns>A list of the views registered in the region.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.IRegionAdapter.InvalidateViews">
            <summary>
            Invalidates the views and perform synchronization between the physical and registered views.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.RegionAdapterBase`1.SynchronizeViews">
            <summary>
            Called when the adapter performs view synchronization.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.RegionAdapterBase`1.DiscoverViews">
            <summary>
            Called when the adapter performs view discovery.
            </summary>
            <param name="region"></param>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.RegionAdapterBase`1.InvalidateViews">
            <summary>
            Invalidates the views and perform synchronization between the physical and registered views.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.RegionAdapterBase`1.Adapt(Intersoft.Client.Framework.Regions.IRegion,`0)">
            <summary>
            Adapts an object (typically a control) to the specified <see cref="T:Intersoft.Client.Framework.Regions.IRegion"/>.
            </summary>
            <param name="region">The region of which object to adapt.</param>
            <param name="regionTarget">The object to adapt.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.RegionAdapterBase`1.Release(Intersoft.Client.Framework.Regions.IRegion)">
            <summary>
            Releases the adapter from the specified <see cref="T:Intersoft.Client.Framework.Regions.IRegion"/> and frees the resources allocated by the adapter.
            </summary>
            <param name="region">The region to release.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.RegionAdapterBase`1.CanActivate">
            <summary>
            Determines whether the specified <see cref="T:Intersoft.Client.Framework.Regions.IRegion"/> supports activation.
            </summary>
            <returns>A boolean value, true if the region supports deactivation.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.RegionAdapterBase`1.CanDeactivate">
            <summary>
            Determines whether the specified <see cref="T:Intersoft.Client.Framework.Regions.IRegion"/> supports deactivation.
            </summary>
            <returns>A boolean value, true if the region supports deactivation.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.RegionAdapterBase`1.Activate(System.Object)">
            <summary>
            Activates the specified view.
            </summary>
            <param name="view">The view to activate.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.RegionAdapterBase`1.Deactivate(System.Object)">
            <summary>
            Deactivates the specified view.
            </summary>
            <param name="view">The view to deactivate.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.RegionAdapterBase`1.GetViews">
            <summary>
            Returns a list of the views registered in the region.
            </summary>
            <returns>A list of the views registered in the region.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.RegionAdapterBase`1.Remove(System.Object)">
            <summary>
            Removes the specified view from the region.
            </summary>
            <param name="view">The view to remove.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.RegionAdapterBase`1.Dispose">
            <summary>
            Called when the adapter is disposed.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.Regions.ISupportActivation">
            <summary>
            Defines the members to support view activation when registered within a region.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.Regions.ISupportActivation.IsActive">
            <summary>
            Gets or sets a value that indicates whether the view is active.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.Regions.Adapters.ContentControlRegionAdapter">
            <summary>
            Represents a region adapter for content controls.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.Adapters.ContentControlRegionAdapter.Adapt(Intersoft.Client.Framework.Regions.IRegion,System.Windows.Controls.ContentControl)">
            <summary>
            Adapts an object (typically a control) to the specified <see cref="T:Intersoft.Client.Framework.Regions.IRegion"/>.
            </summary>
            <param name="region">The region of which object to adapt.</param>
            <param name="regionTarget">The object to adapt.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.Adapters.ContentControlRegionAdapter.Remove(System.Object)">
            <summary>
            Removes the specified view from the region.
            </summary>
            <param name="view">The view to remove.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.Adapters.ContentControlRegionAdapter.Release(Intersoft.Client.Framework.Regions.IRegion)">
            <summary>
            Releases the adapter from the specified <see cref="T:Intersoft.Client.Framework.Regions.IRegion"/> and frees the resources allocated by the adapter.
            </summary>
            <param name="region">The region to release.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.Adapters.ContentControlRegionAdapter.Dispose">
            <summary>
            Called when the adapter is disposed.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.ObservableResource`1">
            <summary>
            Represents an observable resource which automatically updates UI elements when the value of its resource has changed.
            </summary>
            <typeparam name="T">The type of the resource to observe.</typeparam>
        </member>
        <member name="T:Intersoft.Client.Framework.IObservableResource">
            <summary>
            Defines the properties and methods to support an observable resource implementation.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.IObservableResource.UpdateBindings">
            <summary>
            Perform update on all elements bound to this object.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.IObservableResource.GetString(System.String)">
            <summary>
            Gets the string of the specified resource key.
            </summary>
            <param name="key">The key to retrieve.</param>
            <returns>The resource string.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.IObservableResource.GetPropertyValue(System.String)">
            <summary>
            Gets the string value of the specified property.
            </summary>
            <param name="property">The property name of which value to retrieve.</param>
            <returns>The property value.</returns>
        </member>
        <member name="P:Intersoft.Client.Framework.IObservableResource.IsDisposed">
            <summary>
            Determines whether an object instance has been disposed.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ObservableResource`1.#ctor(`0)">
            <summary>
            Initializes a new instance of ObservableResource class.
            </summary>
            <param name="resource">The resource instance to observe.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ObservableResource`1.UpdateBindings">
            <summary>
            Update all elements bound to this resource with refreshed localized string.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ObservableResource`1.GetString(System.String)">
            <summary>
            Gets the localized string directly from the resource manager.
            </summary>
            <param name="key">The resource key of which string to retrieve.</param>
            <returns>The localized string.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.ObservableResource`1.TryOverrideResource">
            <summary>
            Attempts to override the existing resource.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ObservableResource`1.GetPropertyValue(System.String)">
            <summary>
            Gets the value of the specified property.
            </summary>
            <param name="property">The property of which value to retrieve.</param>
            <returns>A string value.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.ObservableResource`1.OnPropertyChanged(System.String)">
            <summary>
            Called when the property value has changed.
            </summary>
            <param name="propertyName">The changed property name.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ObservableResource`1.SetOwnerProperty(System.String,System.String)">
            <summary>
            Sets a value of the specified property to the <see cref="T:Intersoft.Client.Framework.IObservableResource"/> object owned by this resource.
            </summary>
            <param name="propertyName">The property name that represents the resource key.</param>
            <param name="value">The value of the resource to set.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ObservableResource`1.Dispose">
            <summary>
            Dispose this object instance.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ObservableResource`1.Resource">
            <summary>
            Gets the resource instance being observed.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ObservableResource`1.IsDisposed">
            <summary>
            Determines whether this object instance has been disposed.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ObservableResource`1.IsOverridden">
            <summary>
            Gets or sets a boolean value that indicates whether this resource should override the existing instance.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ObservableResource`1.ResourcePrefix">
            <summary>
            Gets the prefix key of the observed resource.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ObservableResource`1.Owner">
            <summary>
            Gets or sets a custom object that own this resource.
            </summary>
        </member>
        <member name="E:Intersoft.Client.Framework.ObservableResource`1.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.DecimalTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines whether conversion is possible from a specified type to a TimeSpan object.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type" /> that represents the type you want to convert from.</param>
            <returns>True if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Intersoft.Client.Framework.DecimalTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)" -->
        <member name="M:Intersoft.Client.Framework.DecimalTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether the type converter can convert to decimal type.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type" /> that represents the type you want to convert to.</param>
            <returns>True if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.DecimalTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the specified decimal value to string value.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture.</param>
            <param name="value">The value to convert.</param>
            <param name="destinationType">A <see cref="T:System.Type" /> that represents the type you want to convert to.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="T:Intersoft.Client.Framework.Containers.IocContainer">
            <summary>
            Represents the ClientUI built-in implementation of <see cref="T:Intersoft.Client.Framework.Containers.IDependencyContainer"/>. 
            This class implements the IDependencyRegistrar and
            IDependencyResolver, along with the IContainerFluent and IDisposable interfaces.
            The container is thread safe.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.Containers.IDependencyRegistrar">
            <summary>
            Defines the methods used to manage Registration of functions or instances which will be used to resolve instances of specified types, either without or without a distinguishing name.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.IDependencyRegistrar.Register``1(System.Func{Intersoft.Client.Framework.Containers.IDependencyResolver,``0})">
            <summary>
            Adds the function to resolve an unnamed registration of the specified type to the container. 
            </summary>
            <typeparam name="TType">The type to be registered.</typeparam>
            <param name="func">The delegate which will be called to create an instance of the type TType.</param>
            <returns>An instance of IRegistration that can be used to configure how the get information about the registration, or change the lifetime manager.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.IDependencyRegistrar.Register``1(System.String,System.Func{Intersoft.Client.Framework.Containers.IDependencyResolver,``0})">
            <summary>
            Adds the function to resolve an named registration of the specified type to the container. 
            </summary>
            <typeparam name="TType">The type to be registered.</typeparam>
            <param name="name">The name of the registration for this type, which is used to distinguish between different registrations in the container.</param>
            <param name="func">The delegate which will be called to create an instance of the type TType.</param>
            <returns>An instance of IRegistration that can be used to configure how the get information about the registration, or change the lifetime manager.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.IDependencyRegistrar.Register(System.Type,System.Func{Intersoft.Client.Framework.Containers.IDependencyResolver,System.Object})">
            <summary>
            Adds the function to resolve an unnamed registration of the specified type to the container. 
            </summary>
            <param name="type">The type to be registered.</param>
            <param name="func">The delegate which will be called to create an instance of the type TType.</param>
            <returns>An instance of IRegistration that can be used to configure how the get information about the registration, or change the lifetime manager.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.IDependencyRegistrar.Register(System.String,System.Type,System.Func{Intersoft.Client.Framework.Containers.IDependencyResolver,System.Object})">
            <summary>
            Adds the function to resolve an named registration of the specified type to the container. 
            </summary>
            <param name="name">The name of the registration for this type, which is used to distinguish between different registrations in the container.</param>
            <param name="type">The type to be registered.</param>
            <param name="func">The delegate which will be called to create an instance of the type TType.</param>
            <returns>An instance of IRegistration that can be used to configure how the get information about the registration, or change the lifetime manager.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.IDependencyRegistrar.RegisterInstance``1(``0)">
            <summary>
            Registers an instance that will be returned whenever the IocContainer resolves the specified type. 
            </summary>
            <typeparam name="TType">The type that is being registered for resolution.</typeparam>
            <param name="instance">The instance that will alway be returned when TType is resolved. The instance must be assignable to a variable of type TType.</param>
            <returns>An instance of IRegistration that can be used to configure how the get information about the registration, or change the lifetime manager.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.IDependencyRegistrar.RegisterInstance``1(System.String,``0)">
            <summary>
            Registers an instance that will be returned whenever the IocContainer resolves the specified type and name. 
            </summary>
            <typeparam name="TType">The type that is being registered for resolution.</typeparam>
            <param name="name">The name this registration will be registered under.</param>
            <param name="instance">The instance that will alway be returned when TType is resolved. The instance must be assignable to a variable of type TType.</param>
            <returns>An instance of IRegistration that can be used to configure how the get information about the registration, or change the lifetime manager.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.IDependencyRegistrar.RegisterInstance(System.Type,System.Object)">
            <summary>
            Registers an instance that will be returned whenever the IocContainer resolves the specified type. 
            </summary>
            <param name="type">The type that is being registered for resolution.</param>
            <param name="instance">The instance that will alway be returned when TType is resolved. The instance must be assignable to a variable of type TType.</param>
            <returns>An instance of IRegistration that can be used to configure how the get information about the registration, or change the lifetime manager.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.IDependencyRegistrar.RegisterInstance(System.String,System.Type,System.Object)">
            <summary>
            Registers an instance that will be returned whenever the IocContainer resolves the specified type and name. 
            </summary>
            <param name="name">The name this registration will be registered under.</param>
            <param name="type">The type that is being registered for resolution.</param>
            <param name="instance">The instance that will alway be returned when TType is resolved. The instance must be assignable to a variable of type TType.</param>
            <returns>An instance of IRegistration that can be used to configure how the get information about the registration, or change the lifetime manager.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.IDependencyRegistrar.Register``2">
            <summary>
            Registers a implementation type to be instantiated when the the specified type is resolved.
            </summary>
            <typeparam name="TType">The type to be registered.</typeparam>
            <typeparam name="TImpl">The type that will be instantiated when TType is resolved. The instance is created using the constructor with the most parameters, each parameter is resolved by the container.</typeparam>
            <returns>An instance of IRegistration that can be used to configure how the get information about the registration, or change the lifetime manager.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.IDependencyRegistrar.Register``2(System.String)">
            <summary>
            Registers a implementation type to be instantiated when the the specified type is resolved based on the given name.
            </summary>
            <typeparam name="TType">The type to be registered.</typeparam>
            <typeparam name="TImpl">The type that will be instantiated when TType is resolved. The instance is created using the constructor with the most parameters, each parameter is resolved by the container.</typeparam>
            <param name="name">The name this registration will be registered under.</param>
            <returns>An instance of IRegistration that can be used to configure how the get information about the registration, or change the lifetime manager.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.IDependencyRegistrar.Register(System.Type,System.Type)">
            <summary>
            Registers a implementation type to be instantiated when the the specified type is resolved.
            </summary>
            <param name="tType">The type to be registered.</param>
            <param name="tImpl">The type that will be instantiated when TType is resolved. The instance is created using the constructor with the most parameters, each parameter is resolved by the container.</param>
            <returns>An instance of IRegistration that can be used to configure how the get information about the registration, or change the lifetime manager.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.IDependencyRegistrar.Register(System.String,System.Type,System.Type)">
            <summary>
            Registers a implementation type to be instantiated when the the specified type is resolved based on the given name.
            </summary>
            <param name="name">The name this registration will be registered under.</param>
            <param name="tType">The type to be registered.</param>
            <param name="tImpl">The type that will be instantiated when TType is resolved. The instance is created using the constructor with the most parameters, each parameter is resolved by the container.</param>
            <returns>An instance of IRegistration that can be used to configure how the get information about the registration, or change the lifetime manager.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.IDependencyRegistrar.Remove(Intersoft.Client.Framework.Containers.IRegistration)">
            <summary>
            Removes the registration from the container. 
            </summary>
            <param name="ireg">The <see cref="T:Intersoft.Client.Framework.Containers.IRegistration"/> to be removed from the container.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.IDependencyRegistrar.Remove``1">
            <summary>
            Removes the registration from the container based on the specified type.
            </summary>
            <typeparam name="TType">The type of which registration to remove.</typeparam>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.IDependencyRegistrar.GetRegistration``1">
            <summary>
            Returns the registration of the specified type.
            </summary>
            <typeparam name="TType">The type to get the registration for.</typeparam>
            <returns>A registration instance for the specified type. Throws a KeyNoFoundException if the registration cannot be found.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.IDependencyRegistrar.GetRegistration``1(System.String)">
            <summary>
            Returns a named registration of the specified type.
            </summary>
            <typeparam name="TType">The type to get the registration for.</typeparam>
            <param name="name">The name associated with the named registration to get.</param>
            <returns>A registration instance for the specified type. Throws a KeyNoFoundException if the registration cannot be found.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.IDependencyRegistrar.GetRegistration(System.Type)">
            <summary>
            Returns the registration of the specified type.
            </summary>
            <param name="type">The type to get the registration for.</param>
            <returns>A registration instance for the specified type. Throws a KeyNoFoundException if the registration cannot be found.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.IDependencyRegistrar.GetRegistration(System.String,System.Type)">
            <summary>
            Returns a named registration of the specified type.
            </summary>
            <param name="name">The name associated with the named registration to get.</param>
            <param name="type">The type to get the registration for.</param>
            <returns>A registration instance for the specified type. Throws a KeyNoFoundException if the registration cannot be found.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.IDependencyRegistrar.GetSpecificRegistration``1(System.String)">
            <summary>
            Returns a specific registration based on the specified type and contract name. 
            </summary>
            <typeparam name="TType">The type to get the registration for.</typeparam>
            <param name="name">The contract name can be the name of an abstract class or an interface.</param>
            <returns>A registration instance for the specified type. Throws a KeyNoFoundException if the registration cannot be found.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.IDependencyRegistrar.GetRegistrations``1">
            <summary>
            Returns all registrations for the specified type.
            </summary>
            <typeparam name="TType">The type to get the registration for.</typeparam>
            <returns>A list of the registrations for the specified type</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.IDependencyRegistrar.GetRegistrations(System.Type)">
            <summary>
            Returns all registrations for the specified type.
            </summary>
            <param name="type">The type to get the registration for.</param>
            <returns>A list of the registrations for the specified type</returns>
        </member>
        <member name="P:Intersoft.Client.Framework.Containers.IDependencyRegistrar.DefaultLifetimeManager">
            <summary>
            Gets or sets the LifetimeManger that is used by the IocContainer for new Registrations by default. 
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.Containers.IDependencyContainer">
            <summary>
            Defines the members required to implement a dependency container. 
            This is only a marker interface that represents the interface requirement of <see cref="T:Intersoft.Client.Framework.Containers.IDependencyRegistrar"/> and <see cref="T:Intersoft.Client.Framework.Containers.IDependencyResolver"/>.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.Containers.IDependencyResolver">
            <summary>
            Defines the container members required to resolve instances by specified type and name. 
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.IDependencyResolver.Resolve``1">
            <summary>
            Resolves the unnamed instance of the type TType.
            </summary>
            <typeparam name="TType">The type to be resolved.</typeparam>
            <returns>An instance of the class registered to resolve the type TType.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.IDependencyResolver.Resolve``1(System.String)">
            <summary>
            Resolves the named instance of the type TType.
            </summary>
            <typeparam name="TType">The type to be resolved.</typeparam>
            <param name="name">The name of the registration for type TType.</param>
            <returns>An instance of the class registered to resolve the type TType.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.IDependencyResolver.Resolve(System.Type)">
            <summary>
            Resolves the unnamed instance of the type TType.
            </summary>
            <param name="type">The type to be resolved.</param>
            <returns>An instance of the class registered to resolve the type TType.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.IDependencyResolver.Resolve(System.String,System.Type)">
            <summary>
            Resolves the named instance of the type TType.
            </summary>
            <param name="name">The name of the registration for type TType.</param>
            <param name="type">The type to be resolved.</param>
            <returns>An instance of the class registered to resolve the type TType.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.IDependencyResolver.ResolveAll``1">
            <summary>
            Gets all possible named and unnamed resolutions for the type TType.
            </summary>
            <typeparam name="TType">The type to be resolved.</typeparam>
            <returns>A list of resolved instances.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.IDependencyResolver.ResolveAll(System.Type)">
            <summary>
            Gets all possible named and unnamed resolutions for the type TType.
            </summary>
            <param name="type">The type to be resolved.</param>
            <returns>A list of resolved instances.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.IDependencyResolver.LazyResolve``1">
            <summary>
            Gets a function that resolves an unnamed instance of the type TType. 
            This function delays the creation of types which is useful to improve performance particularly when the specified type allocates expensive resources.
            </summary>
            <typeparam name="TType">The type to be resolved.</typeparam>
            <returns>An instance of the function delegate which is registered to resolve the type TType.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.IDependencyResolver.LazyResolve``1(System.String)">
            <summary>
            Gets a function that resolves a named instance of the type TType. 
            This function delays the creation of types which is useful to improve performance particularly when the specified type allocates expensive resources.
            </summary>
            <typeparam name="TType">The type to be resolved.</typeparam>
            <param name="name">The name of the registration for type TType.</param>
            <returns>An instance of the function delegate which is registered to resolve the type TType.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.IDependencyResolver.LazyResolve(System.Type)">
            <summary>
            Gets a function that resolves an unnamed instance of the type TType. 
            This function delays the creation of types which is useful to improve performance particularly when the specified type allocates expensive resources.
            </summary>
            <param name="type">The type to be resolved.</param>
            <returns>An instance of the function delegate which is registered to resolve the type TType.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.IDependencyResolver.LazyResolve(System.String,System.Type)">
            <summary>
            Gets a function that resolves a named instance of the type TType. 
            This function delays the creation of types which is useful to improve performance particularly when the specified type allocates expensive resources.
            </summary>
            <param name="name">The name of the registration for type TType.</param>
            <param name="type">The type to be resolved.</param>
            <returns>An instance of the function delegate which is registered to resolve the type TType.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.IDependencyResolver.CanResolve``1">
            <summary>
            Determines if the type TType can be resolved.
            </summary>
            <typeparam name="TType">The type to be resolved.</typeparam>
            <returns>True if there is an unnamed Registration for the type TType, false otherwise.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.IDependencyResolver.CanResolve``1(System.String)">
            <summary>
            Determines if the type TType can be resolved.
            </summary>
            <typeparam name="TType">The type to be resolved.</typeparam>
            <param name="name">The name of the registration to check for.</param>
            <returns>True if there is an unnamed Registration for the type TType, false otherwise.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.IDependencyResolver.CanResolve(System.Type)">
            <summary>
            Determines if the type TType can be resolved.
            </summary>
            <param name="type">The type to be resolved.</param>
            <returns>True if there is an unnamed Registration for the type TType, false otherwise.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.IDependencyResolver.CanResolve(System.String,System.Type)">
            <summary>
            Determines if the type TType can be resolved.
            </summary>
            <param name="name">The name of the registration to check for.</param>
            <param name="type">The type to be resolved.</param>
            <returns>True if there is an unnamed Registration for the type TType, false otherwise.</returns>
        </member>
        <member name="T:Intersoft.Client.Framework.Containers.IContainerFluent">
            <summary>
            Defines the fluent interface that can be used to configure the container.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.IContainerFluent.UsesDefaultLifetimeManagerOf(Intersoft.Client.Framework.Containers.ILifetimeManager)">
            <summary>
            Sets the LifetimeManager that will be used on new registrations by default. 
            This can be changed calling WithRegistration on the <see cref="T:Intersoft.Client.Framework.Containers.IRegistration"/> returned from a call to Register. 
            </summary>
            <param name="lifetimeManager">The Lifetime manager to use.</param>
            <returns>The <see cref="T:Intersoft.Client.Framework.Containers.IContainerFluent"/> instance itself so that the method calls can be chained.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.IocContainer.Register``1(System.Func{Intersoft.Client.Framework.Containers.IDependencyResolver,``0})">
            <summary>
            Adds the function to resolve an unnamed registration of the specified type to the container. 
            </summary>
            <typeparam name="TType">The type to be registered.</typeparam>
            <param name="func">The delegate which will be called to create an instance of the type TType.</param>
            <returns>An instance of IRegistration that can be used to configure how the get information about the registration, or change the lifetime manager.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.IocContainer.Register``1(System.String,System.Func{Intersoft.Client.Framework.Containers.IDependencyResolver,``0})">
            <summary>
            Adds the function to resolve an named registration of the specified type to the container. 
            </summary>
            <typeparam name="TType">The type to be registered.</typeparam>
            <param name="name">The name of the registration for this type, which is used to distinguish between different registrations in the container.</param>
            <param name="func">The delegate which will be called to create an instance of the type TType.</param>
            <returns>An instance of IRegistration that can be used to configure how the get information about the registration, or change the lifetime manager.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.IocContainer.Register(System.Type,System.Func{Intersoft.Client.Framework.Containers.IDependencyResolver,System.Object})">
            <summary>
            Adds the function to resolve an unnamed registration of the specified type to the container. 
            </summary>
            <param name="type">The type to be registered.</param>
            <param name="func">The delegate which will be called to create an instance of the type TType.</param>
            <returns>An instance of IRegistration that can be used to configure how the get information about the registration, or change the lifetime manager.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.IocContainer.Register(System.String,System.Type,System.Func{Intersoft.Client.Framework.Containers.IDependencyResolver,System.Object})">
            <summary>
            Adds the function to resolve an named registration of the specified type to the container. 
            </summary>
            <param name="name">The name of the registration for this type, which is used to distinguish between different registrations in the container.</param>
            <param name="type">The type to be registered.</param>
            <param name="func">The delegate which will be called to create an instance of the type TType.</param>
            <returns>An instance of IRegistration that can be used to configure how the get information about the registration, or change the lifetime manager.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.IocContainer.Register``2">
            <summary>
            Registers a implementation type to be instantiated when the the specified type is resolved.
            </summary>
            <typeparam name="TType">The type to be registered.</typeparam>
            <typeparam name="TImpl">The type that will be instantiated when TType is resolved. The instance is created using the constructor with the most parameters, each parameter is resolved by the container.</typeparam>
            <returns>An instance of IRegistration that can be used to configure how the get information about the registration, or change the lifetime manager.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.IocContainer.Register``2(System.String)">
            <summary>
            Registers a implementation type to be instantiated when the the specified type is resolved based on the given name.
            </summary>
            <typeparam name="TType">The type to be registered.</typeparam>
            <typeparam name="TImpl">The type that will be instantiated when TType is resolved. The instance is created using the constructor with the most parameters, each parameter is resolved by the container.</typeparam>
            <param name="name">The name this registration will be registered under.</param>
            <returns>An instance of IRegistration that can be used to configure how the get information about the registration, or change the lifetime manager.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.IocContainer.Register(System.Type,System.Type)">
            <summary>
            Registers a implementation type to be instantiated when the the specified type is resolved.
            </summary>
            <param name="tType">The type to be registered.</param>
            <param name="tImpl">The type that will be instantiated when TType is resolved. The instance is created using the constructor with the most parameters, each parameter is resolved by the container.</param>
            <returns>An instance of IRegistration that can be used to configure how the get information about the registration, or change the lifetime manager.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.IocContainer.Register(System.String,System.Type,System.Type)">
            <summary>
            Registers a implementation type to be instantiated when the the specified type is resolved based on the given name.
            </summary>
            <param name="name">The name this registration will be registered under.</param>
            <param name="tType">The type to be registered.</param>
            <param name="tImpl">The type that will be instantiated when TType is resolved. The instance is created using the constructor with the most parameters, each parameter is resolved by the container.</param>
            <returns>An instance of IRegistration that can be used to configure how the get information about the registration, or change the lifetime manager.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.IocContainer.RegisterInstance``1(``0)">
            <summary>
            Registers an instance that will be returned whenever the IocContainer resolves the specified type. 
            </summary>
            <typeparam name="TType">The type that is being registered for resolution.</typeparam>
            <param name="instance">The instance that will alway be returned when TType is resolved. The instance must be assignable to a variable of type TType.</param>
            <returns>An instance of IRegistration that can be used to configure how the get information about the registration, or change the lifetime manager.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.IocContainer.RegisterInstance``1(System.String,``0)">
            <summary>
            Registers an instance that will be returned whenever the IocContainer resolves the specified type and name. 
            </summary>
            <typeparam name="TType">The type that is being registered for resolution.</typeparam>
            <param name="name">The name this registration will be registered under.</param>
            <param name="instance">The instance that will alway be returned when TType is resolved. The instance must be assignable to a variable of type TType.</param>
            <returns>An instance of IRegistration that can be used to configure how the get information about the registration, or change the lifetime manager.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.IocContainer.RegisterInstance(System.Type,System.Object)">
            <summary>
            Registers an instance that will be returned whenever the IocContainer resolves the specified type. 
            </summary>
            <param name="type">The type that is being registered for resolution.</param>
            <param name="instance">The instance that will alway be returned when TType is resolved. The instance must be assignable to a variable of type TType.</param>
            <returns>An instance of IRegistration that can be used to configure how the get information about the registration, or change the lifetime manager.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.IocContainer.RegisterInstance(System.String,System.Type,System.Object)">
            <summary>
            Registers an instance that will be returned whenever the IocContainer resolves the specified type and name. 
            </summary>
            <param name="name">The name this registration will be registered under.</param>
            <param name="type">The type that is being registered for resolution.</param>
            <param name="instance">The instance that will alway be returned when TType is resolved. The instance must be assignable to a variable of type TType.</param>
            <returns>An instance of IRegistration that can be used to configure how the get information about the registration, or change the lifetime manager.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.IocContainer.Remove(Intersoft.Client.Framework.Containers.IRegistration)">
            <summary>
            Removes the registration from the container. 
            </summary>
            <param name="ireg">The <see cref="T:Intersoft.Client.Framework.Containers.IRegistration"/> to be removed from the container.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.IocContainer.Remove``1">
            <summary>
            Removes the registration from the container based on the specified type.
            </summary>
            <typeparam name="TType">The type of which registration to remove.</typeparam>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.IocContainer.GetRegistration``1">
            <summary>
            Returns the registration of the specified type.
            </summary>
            <typeparam name="TType">The type to get the registration for.</typeparam>
            <returns>A registration instance for the specified type. Throws a KeyNoFoundException if the registration cannot be found.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.IocContainer.GetRegistration``1(System.String)">
            <summary>
            Returns a named registration of the specified type.
            </summary>
            <typeparam name="TType">The type to get the registration for.</typeparam>
            <param name="name">The name associated with the named registration to get.</param>
            <returns>A registration instance for the specified type. Throws a KeyNoFoundException if the registration cannot be found.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.IocContainer.GetRegistration(System.Type)">
            <summary>
            Returns the registration of the specified type.
            </summary>
            <param name="type">The type to get the registration for.</param>
            <returns>A registration instance for the specified type. Throws a KeyNoFoundException if the registration cannot be found.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.IocContainer.GetRegistration(System.String,System.Type)">
            <summary>
            Returns a named registration of the specified type.
            </summary>
            <param name="name">The name associated with the named registration to get.</param>
            <param name="type">The type to get the registration for.</param>
            <returns>A registration instance for the specified type. Throws a KeyNoFoundException if the registration cannot be found.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.IocContainer.GetSpecificRegistration``1(System.String)">
            <summary>
            Returns a specific registration based on the specified type and contract name. 
            </summary>
            <typeparam name="TType">The type to get the registration for.</typeparam>
            <param name="name">The contract name can be the name of an abstract class or an interface.</param>
            <returns>A registration instance for the specified type. Throws a KeyNoFoundException if the registration cannot be found.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.IocContainer.GetRegistrations``1">
            <summary>
            Returns all registrations for the specified type.
            </summary>
            <typeparam name="TType">The type to get the registration for.</typeparam>
            <returns>A list of the registrations for the specified type</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.IocContainer.GetRegistrations(System.Type)">
            <summary>
            Returns all registrations for the specified type.
            </summary>
            <param name="type">The type to get the registration for.</param>
            <returns>A list of the registrations for the specified type</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.IocContainer.UsesDefaultLifetimeManagerOf(Intersoft.Client.Framework.Containers.ILifetimeManager)">
            <summary>
            Sets the default <see cref="T:Intersoft.Client.Framework.Containers.ILifetimeManager"/> to the specified manager instance.
            </summary>
            <param name="lifetimeManager">The new life time manager to be used as default.</param>
            <returns>Returns an instance that implements <see cref="T:Intersoft.Client.Framework.Containers.IContainerFluent"/>.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.IocContainer.#ctor">
            <summary>
            Initializes a new instance of the IocContainer class.
            The types IocContainer, IDependencyRegistrar, and IDependencyResolver are all registered
            to resolve to this instance of the class.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.IocContainer.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <remarks>
            Disposes of all Container scoped (ContainerLifetime) instances cached in the type registry, and
            disposes of the type registry itself.
            </remarks>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.IocContainer.Dispose(System.Boolean)">
            <summary>
            Implements the Disposed(boolean disposing) method of Disposable pattern.
            </summary>
            <param name="disposing">True if disposing.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.IocContainer.Finalize">
            <summary>
            The finalizer just ensures the container is disposed.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.IocContainer.Resolve``1">
            <summary>
            Resolves the unnamed instance of the type TType.
            </summary>
            <typeparam name="TType">The type to be resolved.</typeparam>
            <returns>An instance of the class registered to resolve the type TType.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.IocContainer.Resolve``1(System.String)">
            <summary>
            Resolves the named instance of the type TType.
            </summary>
            <typeparam name="TType">The type to be resolved.</typeparam>
            <param name="name">The name of the registration for type TType.</param>
            <returns>An instance of the class registered to resolve the type TType.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.IocContainer.Resolve(System.Type)">
            <summary>
            Resolves the unnamed instance of the type TType.
            </summary>
            <param name="type">The type to be resolved.</param>
            <returns>An instance of the class registered to resolve the type TType.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.IocContainer.Resolve(System.String,System.Type)">
            <summary>
            Resolves the named instance of the type TType.
            </summary>
            <param name="name">The name of the registration for type TType.</param>
            <param name="type">The type to be resolved.</param>
            <returns>An instance of the class registered to resolve the type TType.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.IocContainer.CanResolve``1">
            <summary>
            Determines if the type TType can be resolved.
            </summary>
            <typeparam name="TType">The type to be resolved.</typeparam>
            <returns>True if there is an unnamed Registration for the type TType, false otherwise.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.IocContainer.CanResolve``1(System.String)">
            <summary>
            Determines if the type TType can be resolved.
            </summary>
            <typeparam name="TType">The type to be resolved.</typeparam>
            <param name="name">The name of the registration to check for.</param>
            <returns>True if there is an unnamed Registration for the type TType, false otherwise.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.IocContainer.CanResolve(System.Type)">
            <summary>
            Determines if the type TType can be resolved.
            </summary>
            <param name="type">The type to be resolved.</param>
            <returns>True if there is an unnamed Registration for the type TType, false otherwise.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.IocContainer.CanResolve(System.String,System.Type)">
            <summary>
            Determines if the type TType can be resolved.
            </summary>
            <param name="name">The name of the registration to check for.</param>
            <param name="type">The type to be resolved.</param>
            <returns>True if there is an unnamed Registration for the type TType, false otherwise.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.IocContainer.ResolveAll``1">
            <summary>
            Gets all possible named and unnamed resolutions for the type TType.
            </summary>
            <typeparam name="TType">The type to be resolved.</typeparam>
            <returns>A list of resolved instances.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.IocContainer.ResolveAll(System.Type)">
            <summary>
            Gets all possible named and unnamed resolutions for the type TType.
            </summary>
            <param name="type">The type to be resolved.</param>
            <returns>A list of resolved instances.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.IocContainer.LazyResolve``1">
            <summary>
            Gets a function that resolves an unnamed instance of the type TType. 
            This function delays the creation of types which is useful to improve performance particularly when the specified type allocates expensive resources.
            </summary>
            <typeparam name="TType">The type to be resolved.</typeparam>
            <returns>An instance of the function delegate which is registered to resolve the type TType.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.IocContainer.LazyResolve``1(System.String)">
            <summary>
            Gets a function that resolves a named instance of the type TType. 
            This function delays the creation of types which is useful to improve performance particularly when the specified type allocates expensive resources.
            </summary>
            <typeparam name="TType">The type to be resolved.</typeparam>
            <param name="name">The name of the registration for type TType.</param>
            <returns>An instance of the function delegate which is registered to resolve the type TType.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.IocContainer.LazyResolve(System.Type)">
            <summary>
            Gets a function that resolves an unnamed instance of the type TType. 
            This function delays the creation of types which is useful to improve performance particularly when the specified type allocates expensive resources.
            </summary>
            <param name="type">The type to be resolved.</param>
            <returns>An instance of the function delegate which is registered to resolve the type TType.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.IocContainer.LazyResolve(System.String,System.Type)">
            <summary>
            Gets a function that resolves a named instance of the type TType. 
            This function delays the creation of types which is useful to improve performance particularly when the specified type allocates expensive resources.
            </summary>
            <param name="name">The name of the registration for type TType.</param>
            <param name="type">The type to be resolved.</param>
            <returns>An instance of the function delegate which is registered to resolve the type TType.</returns>
        </member>
        <member name="P:Intersoft.Client.Framework.Containers.IocContainer.DefaultLifetimeManager">
            <summary>
            Gets or sets the default <see cref="T:Intersoft.Client.Framework.Containers.ILifetimeManager"/> that will be used during registration.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.Containers.IocContainer.Current">
            <summary>
            Gets the current instance of <see cref="T:Intersoft.Client.Framework.Containers.IocContainer"/> which can be accessed statically.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.DataFilterCommands">
            <summary>
            Provides data filter related commands.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.DataFilterCommands.Submit">
            <summary>
            Identifies the Submit routed command.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.DataFilterCommands.Cancel">
            <summary>
            Identifies the Cancel routed command.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.DataViewCommands">
            <summary>
            Provides data view related commands.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.DataViewCommands.BeginEdit">
            <summary>
            Identifies the BeginEdit routed command.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.DataViewCommands.CancelEdit">
            <summary>
            Identifies the CancelEdit routed command.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.DataViewCommands.CommitEdit">
            <summary>
            Identifies the CommitEdit routed command.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.DataViewCommands.Export">
            <summary>
            Identifies the Export routed command.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.DataViewCommands.Refresh">
            <summary>
            Identifies the Refresh routed command.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.DataViewCommands.RejectChanges">
            <summary>
            Identifies the RejectChanges routed command.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.DataViewCommands.SelectFirstItem">
            <summary>
            Identifies the SelectFirstItem routed command.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.DataViewCommands.SelectLastItem">
            <summary>
            Identifies the SelectLastItem routed command.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.DataViewCommands.SelectNextItem">
            <summary>
            Identifies the SelectNextItem routed command.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.DataViewCommands.SelectPreviousItem">
            <summary>
            Identifies the SelectPreviousItem routed command.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.DataViewCommands.SaveChanges">
            <summary>
            Identifies the SaveChanges routed command.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.DataViewCommands.GoToLastPage">
            <summary>
            Identifies the GoToLastPage routed command.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.DataViewCommands.GoToPreviousPage">
            <summary>
            Identifies the GoToPreviousPage routed command.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.DataViewCommands.GoToPage">
            <summary>
            Identifies the GoToPage routed command.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.DataViewCommands.GoToNextPage">
            <summary>
            Identifies the GoToNextPage routed command.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.DataViewCommands.GoToFirstPage">
            <summary>
            Identifies the GoToFirstPage routed command.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.Input.KeyboardFocusChangedEventHandler">
            <summary>
            Represents the method that will handle the KeyboardFocusChanged event.
            </summary>
            <param name="sender">The object where the event handler is attached.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="T:Intersoft.Client.Framework.Input.KeyEventHandler">
            <summary>
            Represents the method that will handle the Key event.
            </summary>
            <param name="sender">The object where the event handler is attached.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="T:Intersoft.Client.Framework.ViewCreationState">
            <summary>
            Defines the value for the view state in the region.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ViewCreationState.Original">
            <summary>
            The view is in original (unmodified) state.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ViewCreationState.Discovered">
            <summary>
            The view is a result of the instantiation during view discovery performed by the region manager service.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ViewCreationState.Injected">
            <summary>
            The view is a result of the view injection performed automatically by the region manager service, or manually by developers.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.ClientPlatform">
            <summary>
            Represents the type of the client platform
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ClientPlatform.Silverlight">
            <summary>
            The application is running on Silverlight platform.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ClientPlatform.WPF">
            <summary>
            The application is running on WPF platform.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.DialogResult">
            <summary>
            Specifies identifiers to indicate the return value of a dialog box.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.DialogResult.None">
            <summary>
            Nothing is returned from the dialog box. This means that the modal dialog continues running.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.DialogResult.OK">
            <summary>
            The dialog box return value is OK (usually sent from a button labeled OK).
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.DialogResult.Cancel">
            <summary>
            The dialog box return value is Cancel (usually sent from a button labeled Cancel).
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.DialogResult.Abort">
            <summary>
            The dialog box return value is Abort (usually sent from a button labeled Abort).
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.DialogResult.Retry">
            <summary>
            The dialog box return value is Retry (usually sent from a button labeled Retry).
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.DialogResult.Ignore">
            <summary>
            The dialog box return value is Ignore (usually sent from a button labeled Ignore).
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.DialogResult.Yes">
            <summary>
            The dialog box return value is Yes (usually sent from a button labeled Yes).
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.DialogResult.No">
            <summary>
            The dialog box return value is No (usually sent from a button labeled No).
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.Dock">
            <summary>
            Specifies values that control the behavior of a control positioned
            inside another control.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.Dock.Left">
            <summary>
            Specifies that the control should be positioned on the left of the
            control.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.Dock.Top">
            <summary>
            Specifies that the control should be positioned on top of the
            control.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.Dock.Right">
            <summary>
            Specifies that the control should be positioned on the right of the
            control.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.Dock.Bottom">
            <summary>
            Specifies that the control should be positioned at the bottom of 
            control.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.ContentType">
            <summary>
            Specifies value for content type.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ContentType.Image">
            <summary>
            Image only.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ContentType.Content">
            <summary>
            Content only.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ContentType.ContentAndImage">
            <summary>
            Content and image.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.NoExecuteBehavior">
            <summary>
            Determines the UIElement state when the associated Command can't be executed.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.NoExecuteBehavior.Default">
            <summary>
            Uses the default behavior based on the ICommandSource built-in implementation, 
            or derive from the NoExecuteBehavior value in HybridRoutedCommand, if defined.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.NoExecuteBehavior.Disabled">
            <summary>
            The UIElement will be disabled when the associated Command can't be executed.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.NoExecuteBehavior.Collapsed">
            <summary>
            The UIElement will be collapsed (hidden) when the associated Command can't be executed.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.LicType">
            <summary>
            Specifies values for licensing.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.LicType.NoLicense">
            <summary>
            No license.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.LicType.Full">
            <summary>
            Full license.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.LicType.RuntimeOnly">
            <summary>
            Run time only license.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.LicType.Trial">
            <summary>
            Trial license.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.LicType.Beta">
            <summary>
            Beta license.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.LicType.Developer">
            <summary>
            Developer license.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.ISControl">
            <summary>
            Serves as the base class for all Intersoft controls.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISControl.#ctor">
            <summary>
            Initializes a new instance of ISControl class.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISControl.OnApplyTemplate">
            <summary>
            Builds the visual tree for the ISItemsControl when a new template is applied.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISControl.AttachEventHandlers">
            <summary>
            Attach built-in event handlers to control templates. Call this method if necessary.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISControl.OnUnloaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the element is unloaded.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The event data for the property change.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISControl.InitializeTemplates">
            <summary>
            Initializes control templates.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISControl.InitializeStoryboards">
            <summary>
            Initializes storyboards.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISControl.DetachedEventHandlers">
            <summary>
            Detach built-in event handlers from control templates. Call this method if necessary.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISControl.RefreshClip">
            <summary>
            Perform clipping to the dimension of the control. Call this method if necessary
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISControl.ResumeLayout">
            <summary>
            Resume the layout.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISControl.SuspendLayout">
            <summary>
            Suspend the layout.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISControl.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISControl.Framework">
            <summary>
            Gets the entity framework.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISControl.IsInDesignMode">
            <summary>
            Gets a value that indicates whether the control is in design mode (development).
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISControl.LayoutSuspended">
            <summary>
            Gets a value that indicates whether the layout is being suspended.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISControl.Platform">
            <summary>
            Gets a value that indicates the current client platform.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISControl.IsInDesignModeStatic">
            <summary>
            Gets a value that indicates whether the control is in design mode (development).
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISControl.Product">
            <summary>
            Product Info.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISControl.Intersoft#Client#Framework#ILicensing#Product">
            <summary>
            Product Info.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.Input.RoutedCommand">
            <summary>
            Defines a command that implements ICommand and is routed through the element tree.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.Input.RoutedCommand.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the RoutedCommand class with the specified name and owner type.
            </summary>
            <param name="name">Declared name for serialization.</param>
            <param name="ownerType">The type which is registering the command.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.Input.RoutedCommand.#ctor(System.String,System.Type,Intersoft.Client.Framework.Input.InputGestureCollection)">
            <summary>
            Initializes a new instance of the RoutedCommand class with the specified name, owner type, and collection of gestures.
            </summary>
            <param name="name">Declared name for serialization.</param>
            <param name="ownerType">The type which is registering the command.</param>
            <param name="inputGestures">Default input gestures associated with this command.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.Input.RoutedCommand.CanExecute(System.Object,System.Windows.UIElement)">
            <summary>
            Determines whether this RoutedCommand can execute in its current state.
            </summary>
            <param name="parameter">A user defined data type.</param>
            <param name="target">The command target.</param>
            <returns></returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Input.RoutedCommand.Execute(System.Object,System.Windows.UIElement)">
            <summary>
            Executes the RoutedCommand on the current command target.
            </summary>
            <param name="parameter">A user defined data type.</param>
            <param name="target">The command target.</param>
        </member>
        <member name="E:Intersoft.Client.Framework.Input.RoutedCommand.CanExecuteChanged">
            <summary>
            Occurs when the CanExecute state of this command is changed.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.Input.RoutedCommand.InputGestures">
            <summary>
            Gets the collection of InputGesture objects that are associated with this command.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.Input.RoutedCommand.Name">
            <summary>
            Gets the name of the command. 
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.Input.RoutedCommand.OwnerType">
            <summary>
            Gets the type that is registered with the command.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.Regions.IRegion">
            <summary>
            Defines the members to support region implementation used to compose views.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.IRegion.Add(System.Object)">
            <overloads>Adds a new view to the region.</overloads>
             <summary>
             Adds a new view to the region.
             </summary>
             <param name="view">The view to add.</param>
             <returns>The <see cref="T:Intersoft.Client.Framework.Regions.IRegionManager"/> that is set on the view if it is a <see cref="T:System.Windows.DependencyObject"/>. It will be the current region manager when using this overload.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.IRegion.Add(System.Object,System.String)">
            <summary>
            Adds a new view to the region.
            </summary>
            <param name="view">The view to add.</param>
            <param name="viewName">The name of the view. This can be used to retrieve it later by calling <see cref="M:Intersoft.Client.Framework.Regions.IRegion.GetView(System.String)"/>.</param>
            <returns>The <see cref="T:Intersoft.Client.Framework.Regions.IRegionManager"/> that is set on the view if it is a <see cref="T:System.Windows.DependencyObject"/>. It will be the current region manager when using this overload.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.IRegion.Remove(System.Object)">
            <summary>
            Removes the specified view from the region.
            </summary>
            <param name="view">The view to remove.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.IRegion.Activate(System.Object)">
            <summary>
            Marks the specified view as active. 
            </summary>
            <param name="view">The view to activate.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.IRegion.Deactivate(System.Object)">
            <summary>
            Marks the specified view as inactive. 
            </summary>
            <param name="view">The view to deactivate.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.IRegion.GetView(System.String)">
            <summary>
            Returns the view instance that was added to the region using a specific name.
            </summary>
            <param name="viewName">The name used when adding the view to the region.</param>
            <returns>Returns the named view or <see langword="null"/> if the view with <paramref name="viewName"/> does not exist in the current region.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.IRegion.GetViewFromMetadata(System.Object)">
            <summary>
            Returns the view instance based on the specified metadata.
            </summary>
            <param name="o">The metadata of the region.</param>
            <returns>Returns the view associated to the specified metadata.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.IRegion.InvalidateViews">
            <summary>
            Invalidates the existing views and synchronize the available elements with the views registered in this <see cref="T:Intersoft.Client.Framework.Regions.IRegion"/> instance.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.Regions.IRegion.Context">
            <summary>
            Gets or sets a context for the region. This value can be used by the user to share context with the views.
            </summary>
            <value>The context value to be shared.</value>
        </member>
        <member name="P:Intersoft.Client.Framework.Regions.IRegion.Name">
            <summary>
            Gets the name of the region that uniquely identifies the region within a <see cref="T:Intersoft.Client.Framework.Regions.IRegionManager"/>.
            </summary>
            <value>The name of the region.</value>
        </member>
        <member name="P:Intersoft.Client.Framework.Regions.IRegion.RegionManager">
            <summary>
            Gets the <see cref="T:Intersoft.Client.Framework.Regions.IRegionManager"/> that owns this <see cref="T:Intersoft.Client.Framework.Regions.IRegion"/> instance.
            </summary>
            <value>The <see cref="T:Intersoft.Client.Framework.Regions.IRegionManager"/> where this <see cref="T:Intersoft.Client.Framework.Regions.IRegion"/> is registered.</value>
        </member>
        <member name="P:Intersoft.Client.Framework.Regions.IRegion.EnableViewSorting">
            <summary>
            Gets or sets a value that indicates whether the views in the region should be sorted.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.Regions.IRegion.Host">
            <summary>
            Gets the element that hosts this <see cref="T:Intersoft.Client.Framework.Regions.IRegion"/> instance.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.Regions.IRegion.Views">
            <summary>
            Gets the collection of the views registered in this <see cref="T:Intersoft.Client.Framework.Regions.IRegion"/> instance.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.Regions.IRegion.ResolvedViews">
            <summary>
            Gets the collection of the views that consisted of the original items and new items added in this <see cref="T:Intersoft.Client.Framework.Regions.IRegion"/> instance.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.Regions.IRegion.DiscoveryProvider">
            <summary>
            Gets or sets the <see cref="T:Intersoft.Client.Framework.Regions.IViewDiscoveryProvider"/> for this <see cref="T:Intersoft.Client.Framework.Regions.IRegion"/> instance.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.Regions.IRegion.SortComparison">
            <summary>
            Gets or sets the comparison used to sort the views.
            </summary>
            <value>The comparison to use.</value>
        </member>
        <member name="P:Intersoft.Client.Framework.Regions.IRegion.Adapter">
            <summary>
            Gets the <see cref="T:Intersoft.Client.Framework.Regions.IRegionAdapter"/> used to adapt the <see cref="P:Intersoft.Client.Framework.Regions.IRegion.Host"/> element to this <see cref="T:Intersoft.Client.Framework.Regions.IRegion"/> instance.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.ISCursor">
            <summary>
            Serves as the base class for all Intersoft Cursor controls.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ISCursor.CursorHorizontalOffsetProperty">
            <summary>
            Identifies the CursorHorizontalOffset dependency property.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ISCursor.CursorVerticalOffsetProperty">
            <summary>
            Identifies the CursorVerticalOffset dependency property.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISCursor.CursorHorizontalOffset">
            <summary>
            Gets or sets cursor horizontal offset.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISCursor.CursorVerticalOffset">
            <summary>
            Gets or sets cursor vertical offset.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.NumericExtensions.IsZero(System.Double)">
            <summary>
            Check if a number is zero.
            </summary>
            <param name="value">The number to check.</param>
            <returns>True if the number is zero, false otherwise.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.NumericExtensions.IsNaN(System.Double)">
            <summary>
            Check if a number isn't really a number.
            </summary>
            <param name="value">The number to check.</param>
            <returns>
            True if the number is not a number, false if it is a number.
            </returns>
        </member>
        <member name="M:Intersoft.Client.Framework.NumericExtensions.IsGreaterThan(System.Double,System.Double)">
            <summary>
            Determine if one number is greater than another.
            </summary>
            <param name="left">First number.</param>
            <param name="right">Second number.</param>
            <returns>
            True if the first number is greater than the second, false
            otherwise.
            </returns>
        </member>
        <member name="M:Intersoft.Client.Framework.NumericExtensions.IsLessThanOrClose(System.Double,System.Double)">
            <summary>
            Determine if one number is less than or close to another.
            </summary>
            <param name="left">First number.</param>
            <param name="right">Second number.</param>
            <returns>
            True if the first number is less than or close to the second, false
            otherwise.
            </returns>
        </member>
        <member name="M:Intersoft.Client.Framework.NumericExtensions.AreClose(System.Double,System.Double)">
            <summary>
            Determine if two numbers are close in value.
            </summary>
            <param name="left">First number.</param>
            <param name="right">Second number.</param>
            <returns>
            True if the first number is close in value to the second, false
            otherwise.
            </returns>
        </member>
        <member name="T:Intersoft.Client.Framework.Input.CommandReference">
            <summary>
            Provides a reference to Command object for Binding purpose.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.Input.CommandReference.#ctor">
            <summary>
            Creates a new CommandReference instance.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.Input.CommandReference.CommandProperty">
            <summary>
            Identifies the Command dependency property.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.Input.CommandReference.CanExecute(System.Object)">
            <summary>
            Although exposed publicly, this method is not intended to be called manually.
            </summary>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Input.CommandReference.Execute(System.Object)">
            <summary>
            Although exposed publicly, this method is not intended to be called manually.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.Input.CommandReference.Command">
            <summary>
            Gets or sets the Command to be referenced.
            </summary>
        </member>
        <member name="E:Intersoft.Client.Framework.Input.CommandReference.CanExecuteChanged">
            <summary>
            Occurs when the CanExecute state is changed.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.VisibilityConverter">
            <summary>
            Represents a two-way value converter for binding a boolean property 
            to a Visibility dependency property.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.VisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the <paramref name="value"/> to Visibility type.
            </summary>
            <param name="value">The value to format.</param>
            <param name="targetType">The target output type.</param>
            <param name="parameter">Optional parameter.</param>
            <param name="culture">The culture to use in the format operation.</param>
            <returns>Visibility type.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.VisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the <paramref name="value"/> back to Boolean type.
            </summary>
            <param name="value">The value to format.</param>
            <param name="targetType">The target output type.</param>
            <param name="parameter">Optional parameter.</param>
            <param name="culture">The culture to use in the format operation.</param>
            <returns>Boolean type.</returns>
        </member>
        <member name="T:Intersoft.Client.Framework.ISHeaderedHierarchicalMultipleSelectionControl">
            <summary>
            Serves as the base class for all Intersoft Headered Hierarchical Multiple Selection controls.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.ISHeaderedHierarchicalSelectionControl">
            <summary>
            Serves as the base class for all Intersoft Headered Hierarchical Selection controls.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.ISHeaderedItemsControl">
            <summary>
            Serves as the base class for all Intersoft Headered Items controls.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.HeaderedItemsControl">
            <summary>
            Represents a control that contains a collection of items and a header.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.HeaderedItemsControl.HeaderProperty">
            <summary>
            Identifies the Header dependency property
            </summary>
            <value>
            The identifier for the Header dependency property.
            </value>
        </member>
        <member name="M:Intersoft.Client.Framework.HeaderedItemsControl.OnHeaderPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            HeaderProperty property changed handler.
            </summary>
            <param name="d">HeaderedItemsControl that changed its Header.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:Intersoft.Client.Framework.HeaderedItemsControl.HeaderTemplateProperty">
            <summary>
            Identifies the HeaderTemplate dependency property.
            </summary>
            <value>
            The identifier for the HeaderTemplate dependency property.
            </value>        
        </member>
        <member name="M:Intersoft.Client.Framework.HeaderedItemsControl.OnHeaderTemplatePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            HeaderTemplateProperty property changed handler.
            </summary>
            <param name="d">HeaderedItemsControl that changed its HeaderTemplate.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:Intersoft.Client.Framework.HeaderedItemsControl.ItemContainerStyleProperty">
            <summary>
            Identifies the ItemContainerStyle dependency property.
            </summary>
            <value>
            The identifier for the ItemContainerStyle dependency property.
            </value>
        </member>
        <member name="M:Intersoft.Client.Framework.HeaderedItemsControl.OnItemContainerStylePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ItemContainerStyleProperty property changed handler.
            </summary>
            <param name="d">HeaderedItemsControl that changed its ItemContainerStyle.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.HeaderedItemsControl.OnApplyTemplate">
            <summary>
            Builds the visual tree for the HeaderedItemsControl when a new template is applied.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.HeaderedItemsControl.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
            <summary>
            Prepares the specified element to display the specified item.
            </summary>
            <param name="element">The container element used to display the specified item.</param>
            <param name="item">The item to display.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.HeaderedItemsControl.OnHeaderChanged(System.Object,System.Object)">
            <summary>
            Called when the value of the Header property changes.
            </summary>
            <param name="oldHeader">The old value of the Header property.</param>
            <param name="newHeader">The new value of the Header property.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.HeaderedItemsControl.OnHeaderTemplateChanged(System.Windows.DataTemplate,System.Windows.DataTemplate)">
            <summary>
            Called when the value of the HeaderTemplate property changes.
            </summary>
            <param name="oldHeaderTemplate">The old value of the HeaderTemplate property.</param>
            <param name="newHeaderTemplate">The new value of the HeaderTemplate property.</param>
        </member>
        <member name="P:Intersoft.Client.Framework.HeaderedItemsControl.Header">
            <summary>
            Gets or sets the item that labels the control.
            </summary>
            <value>
            The item that labels the control. The default value is null.
            </value>
        </member>
        <member name="P:Intersoft.Client.Framework.HeaderedItemsControl.HeaderTemplate">
            <summary>
            Gets or sets a data template that is used to display the contents of the control's header.
            </summary>
            <value>
            Gets or sets a data template that is used to display the contents of the control's header. The default is null.
            </value>
        </member>
        <member name="P:Intersoft.Client.Framework.HeaderedItemsControl.ItemContainerStyle">
            <summary>
            Gets or sets the Style that is applied to the container element generated for each item.
            </summary>
            <value>
            The Style that is applied to the container element generated for each item. The default is null.
            </value>
        </member>
        <member name="P:Intersoft.Client.Framework.HeaderedItemsControl.ItemsControlHelper">
            <summary>
            Gets or sets the Items Controls helper.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedItemsControl.#ctor">
            <summary>
            Initializes a new instance of ISHeaderedItemsControl class.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ISHeaderedItemsControl.ParentObjectProperty">
            <summary>
            Identifies the ParentObject dependency property. 
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedItemsControl.GetParentObject(System.Windows.UIElement)">
            <summary>
            Gets parent object from specified element.
            </summary>
            <param name="element">Target element.</param>
            <returns>Parent object.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedItemsControl.SetParentObject(System.Windows.UIElement,System.Windows.FrameworkElement)">
            <summary>
            Sets parent object to targeted element.
            </summary>
            <param name="element">Target element.</param>
            <param name="value">Parent object.</param>
        </member>
        <member name="F:Intersoft.Client.Framework.ISHeaderedItemsControl.ItemContainerStyleSelectorProperty">
            <summary>
            Identifies the ItemContainerStyleSelector dependency property.
            </summary>
            <value>
            The identifier for the ItemContainerStyleSelector dependency property.
            </value>
        </member>
        <member name="F:Intersoft.Client.Framework.ISHeaderedItemsControl.ItemTemplateSelectorProperty">
            <value>
            The identifier for the ItemTemplateSelector dependency property.
            </value>
        </member>
        <member name="F:Intersoft.Client.Framework.ISHeaderedItemsControl.CornerRadiusProperty">
            <summary>
            Identifies the CornerRadius dependency property.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ISHeaderedItemsControl.CollectionMemberPathProperty">
            <summary>
            Identifies the CollectionMemberPath dependency property.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ISHeaderedItemsControl.ImageMemberPathProperty">
            <summary>
            Identifies the ImageMemberPath dependency property.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedItemsControl.ApplyTemplate(System.Windows.DependencyObject,System.Object)">
            <summary>
            Applies item template for each generated element.
            </summary>
            <param name="element">Container element.</param>
            <param name="item">Item.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedItemsControl.ApplyBinding(System.Windows.DependencyObject,System.Object)">
            <summary>
            Applies item binding for each generated element.
            </summary>
            <param name="element">Container element.</param>
            <param name="item">Item.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedItemsControl.ApplyStyle(System.Windows.DependencyObject,System.Object)">
            <summary>
            Applies style for container element generated for each item.
            </summary>
            <param name="element">Container element.</param>
            <param name="item">Item.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedItemsControl.IsSelectorStyle(System.Windows.Style)">
            <summary>
            Determines whether the specified Style is defined in ItemContainerStyleSelector.
            </summary>
            <param name="style">A style object.</param>
            <returns>True if the specified style is defined in ItemContainerStyleSelector.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedItemsControl.IsSelectorTemplate(System.Windows.DataTemplate)">
            <summary>
            Determines whether the specified Template is defined in ItemTemplateSelector.
            </summary>
            <param name="template">A template object.</param>
            <returns>True if the specified template is defined in ItemTemplateSelector.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedItemsControl.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
            <summary>
            Prepares the specified element to display the specified item.
            </summary>
            <param name="element">The container element used to display the specified item.</param>
            <param name="item">The item to display.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedItemsControl.RefreshBinding(System.Windows.DependencyProperty,System.String)">
            <summary>
            Refresh property binding.
            </summary>
            <param name="property">Dependency property.</param>
            <param name="propertyPath">Property path.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedItemsControl.RefreshImageBinding">
            <summary>
            Refresh image member path binding.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedItemsControl.RefreshStyleSelector">
            <summary>
            Refresh style selector.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedItemsControl.RefreshTemplateSelector">
            <summary>
            Refresh style selector.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedItemsControl.OnApplyTemplate">
            <summary>
            Builds the visual tree when a new template is applied.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedItemsControl.AttachEventHandlers">
            <summary>
            Attach built-in event handlers to control templates. Call this method if necessary.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedItemsControl.OnUnloaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the element is unloaded.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The event data for the property change.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedItemsControl.InitializeTemplates">
            <summary>
            Initializes control templates.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedItemsControl.InitializeStoryboards">
            <summary>
            Initializes storyboards.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedItemsControl.DetachedEventHandlers">
            <summary>
            Detach built-in event handlers from control templates. Call this method if necessary.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedItemsControl.OnHeaderChanged(System.Object,System.Object)">
            <summary>
            Called when the value of the Header property changes.
            </summary>
            <param name="oldHeader">The old value of the Header property.</param>
            <param name="newHeader">The new value of the Header property.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedItemsControl.OnItemBind(System.Windows.DependencyObject,System.Object)">
            <summary>
            Perform on item bind
            </summary>
            <param name="element">Element.</param>
            <param name="item">Item.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedItemsControl.OnItemBound(System.Windows.DependencyObject,System.Object)">
            <summary>
            Perform on item bound
            </summary>
            <param name="element">Element.</param>
            <param name="item">Item.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedItemsControl.OnDependencyPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Invoked when the control properties has changed.
            </summary>
            <param name="sender">The instance for which property is changed.</param>
            <param name="e">The event argument for DependencyPropertyChanged.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedItemsControl.OnItemsPanelChanged(System.Windows.Controls.ItemsPanelTemplate,System.Windows.Controls.ItemsPanelTemplate)">
            <summary>
            Called when the value of ItemsPanel property changes.
            </summary>
            <param name="oldValue">The old value of the ItemsPanel property.</param>
            <param name="newValue">The new value of the ItemsPanel property.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedItemsControl.FindPanel">
            <summary>
            Gets the panel object reference.
            </summary>        
            <returns></returns>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedItemsControl.RefreshClip">
            <summary>
            Perform clipping to the dimension of the control. Call this method if necessary
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedItemsControl.ResumeLayout">
            <summary>
            Resume the layout.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedItemsControl.SuspendLayout">
            <summary>
            Suspend the layout.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedItemsControl.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ISHeaderedItemsControl.IsControlFocusedProperty">
            <summary>
            Identifies the IsControlFocused dependency property.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ISHeaderedItemsControl.IsControlMouseOverProperty">
            <summary>
            Identifies the IsControlMouseOver dependency property.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ISHeaderedItemsControl.IsSelectedProperty">
            <summary>
            Identifies the IsSelected dependency property.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ISHeaderedItemsControl.ValueProperty">
            <summary>
            Identifies the IsSelected dependency property.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedItemsControl.DoFocus">
            <summary>
            Perform focus.
            </summary>        
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedItemsControl.DoLostFocus">
            <summary>
            Perform lost focus.
            </summary>        
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedItemsControl.FocusChanged(System.Boolean)">
            <summary>
            Focus changed
            </summary>
            <param name="haveFocus">Have focus</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedItemsControl.OnItemFocused">
            <summary>
            Called before the GotFocus event occurs.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedItemsControl.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            Called before MouseEnter event occurs.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedItemsControl.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Called before the MouseLeave event occurs.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedItemsControl.CheckMultipleSelection">
            <summary>
            Check whether the current process is multiple selection.
            </summary>
            <returns>True if current process is multiple selection.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedItemsControl.ChangeVisualState">
            <summary>
            Change the visual state.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedItemsControl.ChangeVisualState(System.Boolean)">
            <summary>
            Change the visual state.
            </summary>
            <param name="useTransitions">Use transitions.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedItemsControl.OnIsSelectedChanged(System.Boolean,System.Boolean)">
            <summary>
            Called when the value of the IsSelected property changes.
            </summary>
            <param name="oldValue">The old value of the IsSelected property.</param>
            <param name="newValue">The new value of the IsSelected property.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedItemsControl.GoToDisabledState">
            <summary>
            Go to disabled state.
            </summary>        
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedItemsControl.GoToDisabledState(System.Boolean)">
            <summary>
            Go to disabled state.
            </summary>
            <param name="animate">Use transitions.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedItemsControl.GoToFocusedState">
            <summary>
            Go to focused state.
            </summary>        
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedItemsControl.GoToFocusedState(System.Boolean)">
            <summary>
            Go to focused state.
            </summary>
            <param name="animate">Use transitions.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedItemsControl.GoToMouseOverState">
            <summary>
            Go to mouse over state.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedItemsControl.GoToMouseOverState(System.Boolean)">
            <summary>
            Go to mouse over state.
            </summary>
            <param name="animate">Use transitions.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedItemsControl.GoToNormalState">
            <summary>
            Go to normal state.
            </summary>        
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedItemsControl.GoToNormalState(System.Boolean)">
            <summary>
            Go to normal state.
            </summary>
            <param name="animate">Use transitions.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedItemsControl.GoToSelectedState">
            <summary>
            Go to selected state.
            </summary>        
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedItemsControl.GoToSelectedState(System.Boolean)">
            <summary>
            Go to selected state.
            </summary>
            <param name="animate">Use transitions.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedItemsControl.GoToUnfocusedState">
            <summary>
            Go to unfocused state.
            </summary>        
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedItemsControl.GoToUnfocusedState(System.Boolean)">
            <summary>
            Go to unfocused state.
            </summary>
            <param name="animate">Use transitions.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedItemsControl.GoToUnselectedState">
            <summary>
            Go to unselected state.
            </summary>        
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedItemsControl.GoToUnselectedState(System.Boolean)">
            <summary>
            Go to unselected state.
            </summary>
            <param name="animate">Use transitions.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedItemsControl.GetValueProperty">
            <summary>
            Gets value dependency property. Used for internal purposes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedItemsControl.Select">
            <summary>
            Select the item.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedItemsControl.Unselect">
            <summary>
            Unselect the item.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISHeaderedItemsControl.ItemContainerStyleSelector">
            <summary>
            Gets or sets the Style Selector that is applied to the container element generated for each item.
            </summary>
            <value>
            The Style Selector that is applied to the container element generated for each item. The default is null.
            </value>
        </member>
        <member name="P:Intersoft.Client.Framework.ISHeaderedItemsControl.ItemTemplateSelector">
            <summary>
            Gets or sets the Template Selector that is applied to the container element generated for each item.
            </summary>
            <value>
            The Template Selector that is applied to the container element generated for each item. The default is null.
            </value>
        </member>
        <member name="P:Intersoft.Client.Framework.ISHeaderedItemsControl.CornerRadius">
            <summary>
            Represents the radius of a border's corner. The radius can't be negative.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISHeaderedItemsControl.CollectionMemberPath">
            <summary>
            Gets or sets the collection member path.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISHeaderedItemsControl.ImageMemberPath">
            <summary>
            Gets or sets the image member path.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISHeaderedItemsControl.Framework">
            <summary>
            Gets the entity framework.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISHeaderedItemsControl.IsInDesignMode">
            <summary>
            Gets a value that indicates whether the control is in design mode (development).
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISHeaderedItemsControl.IsRefreshingStyle">
            <summary>
            Gets a value that indicates whether the control's style is being refreshed or reassigned from style manager.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISHeaderedItemsControl.IsRefreshingTemplate">
            <summary>
            Gets a value that indicates whether the control's template is being refreshed or reassigned from template manager.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISHeaderedItemsControl.LayoutSuspended">
            <summary>
            Gets a value that indicates whether the layout is being suspended.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISHeaderedItemsControl.Platform">
            <summary>
            Gets a value that indicates the current client platform.
            </summary>
        </member>
        <member name="E:Intersoft.Client.Framework.ISHeaderedItemsControl.ItemBind">
            <summary>
            Occurs when item binding.
            </summary>
        </member>
        <member name="E:Intersoft.Client.Framework.ISHeaderedItemsControl.ItemBound">
            <summary>
            Occurs when item is bound.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISHeaderedItemsControl.Product">
            <summary>
            Product Info.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISHeaderedItemsControl.Intersoft#Client#Framework#ILicensing#Product">
            <summary>
            Product Info.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISHeaderedItemsControl.IsControlFocused">
            <summary>
            Gets or sets a value that indicates whether the item is focused.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISHeaderedItemsControl.IsControlMouseOver">
            <summary>
            Gets or sets a value that indicates whether the item is hovered.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISHeaderedItemsControl.IsSelected">
            <summary>
            Gets or sets a value that indicates whether the item is selected.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISHeaderedItemsControl.ForceMultipleSelection">
            <summary>
            Gets a value that indicates whether multiple selection is desired.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISHeaderedItemsControl.Owner">
            <summary>
            Gets the owner of the selection item.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISHeaderedItemsControl.ParentControl">
            <summary>
            Gets the parent control of the selection item.
            </summary>
        </member>
        <member name="E:Intersoft.Client.Framework.ISHeaderedItemsControl.Selected">
            <summary>
            Occurs when item is selected.
            </summary>
        </member>
        <member name="E:Intersoft.Client.Framework.ISHeaderedItemsControl.Unselected">
            <summary>
            Occurs when item is unselected.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedHierarchicalSelectionControl.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called before the MouseLeftButtonDown event occurs.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedHierarchicalSelectionControl.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
            <summary>
            Prepares the specified element to display the specified item.
            </summary>
            <param name="element">The container element used to display the specified item.</param>
            <param name="item">The item to display.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedHierarchicalSelectionControl.OnItemsChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when the value of the ItemsControl.Items property changes.
            </summary>
            <param name="e">NotifyCollectionChangedEventArgs that contains the event data</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedHierarchicalSelectionControl.OnApplyTemplate">
            <summary>
            Builds the visual tree for the ISHeaderedHierarchicalSelectionControl when a new template is applied.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedHierarchicalMultipleSelectionControl.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called before the MouseLeftButtonDown event occurs.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedHierarchicalMultipleSelectionControl.ClearContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
            <summary>
            Undoes the effects of the ItemsControl.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Object) method.
            </summary>
            <param name="element">The container element.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedHierarchicalMultipleSelectionControl.OnIsSelectedChanged(System.Boolean,System.Boolean)">
            <summary>
            Called when the value of the IsSelected property changes.
            </summary>
            <param name="oldValue">The old value of the IsSelected property.</param>
            <param name="newValue">The new value of the IsSelected property.</param>
        </member>
        <member name="P:Intersoft.Client.Framework.Input.HybridRoutedCommand.Image">
            <summary>
            Specifies the ImageSource to be associated to the Image property of UIElement that supports HybridRoutedCommand.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.Input.HybridRoutedCommand.CannotExecuteBehavior">
            <summary>
            Determines the UI behavior that should be applied to the UIElement when its Command can not be executed.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.Input.HybridRoutedCommand.AutoBindUI">
            <summary>
            Specifies whether the Text and Image should be bind automatically to the associated UIElement that supports HybridRoutedCommand.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.IShellManager">
            <summary>
            Provides the methods used to handle event notifications raised from an UXShell object.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.IApplicationInitializer">
            <summary>
            Defines the members that support initializer when the application is loaded to the domain.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.IApplicationInitializer.Initialize(Intersoft.Client.Framework.ApplicationPackage)">
            <summary>
            Initializes the application when the package is loaded.
            </summary>
            <param name="package"></param>
        </member>
        <member name="T:Intersoft.Client.Framework.UXShell">
            <summary>
            Represents a shell component that manages an application's life cycle and provides core architecture to dispatch external content.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.UXShell.StartService(System.Windows.ApplicationServiceContext)">
            <summary>
            Called when the application that host the UXShell object is started.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Intersoft.Client.Framework.UXShell.StopService">
            <summary>
            Called when the application that host the UXShell object is stopped.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.UXShell.#ctor">
            <summary>
            Initializes a new UXShell instance.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.UXShell.AutoInstallUpdatesProperty">
            <summary>
            Identifies the AutoInstallUpdates dependency property.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.UXShell.CheckForUpdatesProperty">
            <summary>
            Identifies the CheckForUpdates dependency property.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.UXShell.RunOfflineApplicationsProperty">
            <summary>
            Identifies the RunOfflineApplications dependency property.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.UXShell.InstallStorageScopeProperty">
            <summary>
            Identifies the InstallStorageScope dependency property.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.UXShell.AutoInstallOnDownloadProperty">
            <summary>
            Identifies the AutoInstallOnDownload dependency property.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.UXShell.UserProperty">
            <summary>
            Identifies the User dependency property.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.UXShell.IsAuthenticatingProperty">
            <summary>
            Identifies the IsAuthenticating dependency property.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.UXShell.IsInitializingProperty">
            <summary>
            Identifies the IsInitializing dependency property.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.UXShell.SetDefaultContainer(Intersoft.Client.Framework.Containers.IDependencyContainer)">
            <summary>
            Sets the default dependency container for this <see cref="T:Intersoft.Client.Framework.UXShell"/> instance.
            </summary>
            <param name="container">The dependency container to be applied as default container.</param>
            <remarks>
            When unspecified, the shell will automatically use the built-in ClientUI dependency container,
            represented by the <see cref="T:Intersoft.Client.Framework.Containers.IocContainer"/> class.
            </remarks>
        </member>
        <member name="M:Intersoft.Client.Framework.UXShell.BeginInit">
            <summary>
            Signals the object that initialization is starting. 
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.UXShell.EndInit">
            <summary>
            Signals the object that initialization is complete. 
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.UXShell.IsAuthenticating">
            <summary>
            Gets or sets a value indicating whether the application is currently performing authentication process.
            When the property is set to true, the navigators will delay their navigation execution until the authentication process is done.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.UXShell.IsInitializing">
            <summary>
            Gets or sets a value indicating whether the application is currently performing asynchronous initialization.
            You can bind this property to navigators such as UXFrame to delay the navigation process until the application is completely initialized.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.UXShell.User">
            <summary>
            Gets or sets the current user object that participates in single sign-on authentication.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.UXShell.AutoInstallUpdates">
            <summary>
            Specifies whether downloaded updates should be automatically installed without user's intervention.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.UXShell.CheckForUpdates">
            <summary>
            Specifies whether the shell object should check updates for the currently installed applications.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.UXShell.ShellNavigationInitialized">
            <summary>
            Specifies whether a navigation host for the shell has been initialized.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.UXShell.Current">
            <summary>
            Gets the current UXShell instance of the running application.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.UXShell.Container">
            <summary>
            Gets the current dependency container that implements <see cref="T:Intersoft.Client.Framework.Containers.IDependencyContainer"/>.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.UXShell.InitParams">
            <summary>
            Gets the initialization parameters of the running application.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.UXShell.MaxSimultaneousDownloads">
            <summary>
            Specifies the number of allowed simultaneous application downloads.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.UXShell.ShellUIManager">
            <summary>
            Gets or sets the UI manager object that receives event notifications from a UXShell instance.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.UXShell.RootApplication">
            <summary>
            Gets or sets the application package used to define the root application of a UXShell instance.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.UXShell.Applications">
            <summary>
            Gets a collection of applications managed by this UXShell instance.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.UXShell.IsServiceStarted">
            <summary>
            Determines whether the service for this UXShell is started.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.UXShell.RunOfflineApplications">
            <summary>
            Specifies whether the UXShell should load installed applications from isolated storage when the network is offline.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.UXShell.InstallStorageScope">
            <summary>
            Specifies the scope of the storage that determines where the downloaded applications are stored.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.UXShell.AutoInstallOnDownload">
            <summary>
            Specifies whether the UXShell should automatically install the downloaded applications locally.
            </summary>
            <remarks>
            When set to true, the downloaded applications will be stored to isolated storage. This allows the applications
            to run locally in the next launch resulting in faster startup and better user experiences.
            </remarks>
        </member>
        <member name="P:Intersoft.Client.Framework.UXShell.IsNetworkAvailable">
            <summary>
            Determines whether internet connection is available.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.UXShell.IsRunningOutOfBrowser">
            <summary>
            Determines whether the current application is running from desktop mode.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.Input.MouseWheelEventArgs">
            <summary>
            Provides data for MouseWheel event.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.Input.MouseEventHandler">
            <summary>
            Represents the method that will handle mouse related routed events that do not specifically involve mouse buttons; for example, MouseMove.
            </summary>
            <param name="sender">The object where the event handler is attached.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="T:Intersoft.Client.Framework.Input.MouseButtonEventHandler">
            <summary>
            Represents the method that handles the MouseLeftButtonDown and MouseLeftButtonUp events.
            </summary>
            <param name="sender">The object where the event handler is attached.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="T:Intersoft.Client.Framework.Input.MouseWheelEventHandler">
            <summary>
            Represents the method that will handle the MouseWheel routed event.
            </summary>
            <param name="sender">The object where the event handler is attached.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="T:Intersoft.Client.Framework.Input.CanQueryStatusRoutedEventHandler">
            <summary>
            Represents the method that will handle the CanQueryStatus events for commands.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A CanQueryStatusRoutedEventArgs that contains the event data.</param>
        </member>
        <member name="T:Intersoft.Client.Framework.Input.QueryStatusRoutedEventHandler">
            <summary>
            Represents the method that will handle the HybridCommandBinding.QueryStatus 
            routed event.
            </summary>
            <param name="sender">The object where the event handler is attached.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="T:Intersoft.Client.Framework.DataEventArgs`1">
            <summary>
            Represents a generic class which passes a simple object to the event handlers.
            </summary>
            <typeparam name="TData">The type of data to pass.</typeparam>
        </member>
        <member name="M:Intersoft.Client.Framework.DataEventArgs`1.#ctor(`0)">
            <summary>
            Initializes the DataEventArgs class.
            </summary>
            <param name="value">The object to pass to the event handlers.</param>
        </member>
        <member name="P:Intersoft.Client.Framework.DataEventArgs`1.Value">
            <summary>
            Gets the object to pass to the event handlers.
            </summary>
            <value>An object.</value>
        </member>
        <member name="T:Intersoft.Client.Framework.LongTypeConverter">
            <summary>
            Converts an instance of number type to a long type.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.LongTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines whether conversion is possible from a specified type to a
            <see cref="T:System.Int64" /> that represents an object
            measurement.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type" /> that represents the type you want to convert from.</param>
            <returns>True if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.LongTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether the type converter can convert a measurement to the
            specified type.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type" /> that represents the type you want to convert to.</param>
            <returns>True if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Intersoft.Client.Framework.LongTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)" -->
        <member name="M:Intersoft.Client.Framework.LongTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the specified measurement to the specified type.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture.</param>
            <param name="value">The value to convert.</param>
            <param name="destinationType">A <see cref="T:System.Type" /> that represents the type you want to convert to.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="T:Intersoft.Client.Framework.Containers.IRegistrationKey">
            <summary>
            This interface is used internally to identify registrations in the type registry.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.IRegistrationKey.GetInstanceType">
            <summary>
            Gets the type that this key identifies.
            </summary>
            <returns>Returns the type of the registration.</returns>
        </member>
        <member name="T:Intersoft.Client.Framework.Containers.ILifetimeManager">
            <summary>
            Defines the functionality for Lifetime Managers.  Implementation should instantiate an 
            instance store and use the Registration's Key property to index the data in the store.
            This allows one lifetime manager to service multiple Registrations.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.ILifetimeManager.GetInstance(Intersoft.Client.Framework.Containers.IRegistration)">
            <summary>
            Get an instance for the registration, using the lifetime manager to cache instance
            as required by the scope of the lifetime manager.
            </summary>
            <param name="registration">
            The registration which is used to supply the storage key and create a new instance if
            required.
            </param>
            <returns>The cached or new instance.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.ILifetimeManager.InvalidateInstanceCache(Intersoft.Client.Framework.Containers.IRegistration)">
            <summary>
            Invalidate the instance in whatever storage is used by the lifetime manager.
            </summary>
            <param name="registration">
            The registration which is used to supply the storage key and create a new instance if
            required.
            </param>
        </member>
        <member name="T:Intersoft.Client.Framework.Encryption.Data">
            <summary>
            represents Hex, Byte, Base64, or String data to encrypt/decrypt;
            use the .Text property to set/get a string representation 
            use the .Hex property to set/get a string-based Hexadecimal representation 
            use the .Base64 to set/get a string-based Base64 representation 
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.Encryption.Data.DefaultEncoding">
            <summary>
            Determines the default text encoding across ALL Data instances
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.Encryption.Data.Encoding">
            <summary>
            Determines the default text encoding for this Data instance
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.Encryption.Data.#ctor">
            <summary>
            Creates new, empty encryption data
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.Encryption.Data.#ctor(System.Byte[])">
            <summary>
            Creates new encryption data with the specified byte array
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.Encryption.Data.#ctor(System.String)">
            <summary>
            Creates new encryption data with the specified string; 
            will be converted to byte array using default encoding
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.Encryption.Data.#ctor(System.String,System.Text.Encoding)">
            <summary>
            Creates new encryption data using the specified string and the 
            specified encoding to convert the string to a byte array.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.Encryption.Data.ToBase64">
            <summary>
            returns Base64 string representation of this data
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.Encryption.Data.ToHex">
            <summary>
            returns Hex string representation of this data
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.Encryption.Data.ToString">
            <summary>
            Returns text representation of bytes using the default text encoding
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.Encryption.Data.Base64">
            <summary>
            Sets or returns Base64 string representation of this data
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.Encryption.Data.Bytes">
            <summary>
            Returns the byte representation of the data; 
            This will be padded to MinBytes and trimmed to MaxBytes as necessary!
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.Encryption.Data.Hex">
            <summary>
            Sets or returns Hex string representation of this data
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.Encryption.Data.IsEmpty">
            <summary>
            returns true if no data is present
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.Encryption.Data.MaxBits">
            <summary>
            maximum number of bits allowed for this data; if 0, no limit
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.Encryption.Data.MaxBytes">
            <summary>
            maximum number of bytes allowed for this data; if 0, no limit
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.Encryption.Data.MinBits">
            <summary>
            minimum number of bits allowed for this data; if 0, no limit
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.Encryption.Data.MinBytes">
            <summary>
            minimum number of bytes allowed for this data; if 0, no limit
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.Encryption.Data.StepBits">
            <summary>
            allowed step interval, in bits, for this data; if 0, no limit
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.Encryption.Data.StepBytes">
            <summary>
            allowed step interval, in bytes, for this data; if 0, no limit
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.Encryption.Data.Text">
            <summary>
            Sets or returns text representation of bytes using the default text encoding
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.TypeConverters.CanConvertFrom``1(System.Type)">
            <summary>
            Returns a value indicating whether this converter can convert an
            object of the given type to an instance of the expected type.
            </summary>
            <typeparam name="T">Expected type of the converter.</typeparam>
            <param name="sourceType">
            The type of the source that is being evaluated for conversion.
            </param>
            <returns>
            A value indicating whether the converter can convert the provided
            type.
            </returns>
        </member>
        <member name="M:Intersoft.Client.Framework.TypeConverters.ConvertFrom``1(System.ComponentModel.TypeConverter,System.Object)">
            <summary>
            Attempts to convert a specified object to an instance of the
            expected type.
            </summary>
            <typeparam name="T">Expected type of the converter.</typeparam>
            <param name="converter">TypeConverter instance.</param>
            <param name="value">The object being converted.</param>
            <returns>
            The instance of the expected type created from the converted object.
            </returns>
        </member>
        <member name="M:Intersoft.Client.Framework.TypeConverters.CanConvertTo``1(System.Type)">
            <summary>
            Determines whether conversion is possible to a specified type.
            </summary>
            <typeparam name="T">Expected type of the converter.</typeparam>
            <param name="destinationType">
            Identifies the data type to evaluate for conversion.
            </param>
            <returns>
            A value indicating whether conversion is possible.
            </returns>
        </member>
        <member name="M:Intersoft.Client.Framework.TypeConverters.ConvertTo(System.ComponentModel.TypeConverter,System.Object,System.Type)">
            <summary>
            Attempts to convert a specified object to an instance of the
            desired type.
            </summary>
            <param name="converter">TypeConverter instance.</param>
            <param name="value">The object being converted.</param>
            <param name="destinationType">
            The type to convert the value to.
            </param>
            <returns>
            The value of the conversion to the specified type.
            </returns>
        </member>
        <member name="T:Intersoft.Client.Framework.ISelection">
            <summary>
            Defines data members that belongs to selection control.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISelection.Select(System.Int32)">
            <summary>
            Select the item on specified index.
            </summary>
            <param name="index">Index.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISelection.Select(System.Object)">
            <summary>
            Select the specified item.
            </summary>
            <param name="item">Item.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISelection.Unselect(System.Int32)">
            <summary>
            Unselect the item at specified index.
            </summary>
            <param name="index">Index.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISelection.Unselect(System.Object)">
            <summary>
            Unselect the specified item.
            </summary>
            <param name="item">Item.</param>
        </member>
        <member name="P:Intersoft.Client.Framework.ISelection.ItemContainerStyle">
            <summary>
            Gets or sets the Style that is applied to the container element generated for each item.
            </summary>
            <value>
            The Style that is applied to the container element generated for each item. The default is null.
            </value>
        </member>
        <member name="P:Intersoft.Client.Framework.ISelection.SelectedElement">
            <summary>
            Gets or sets the current selected element.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISelection.SelectedIndex">
            <summary>
            Gets or sets the current selected index.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISelection.SelectedItem">
            <summary>
            Gets or sets the current selected item.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISelection.SelectedValue">
            <summary>
            Gets the current selected value. Only applicable if selected value path is specified.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISelection.SelectedValuePath">
            <summary>
            Gets or sets the selected value path.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISelection.ItemContainerStyleSelector">
            <summary>
            Gets or sets the Style Selector that is applied to the container element generated for each item.
            </summary>
            <value>
            The Style Selector that is applied to the container element generated for each item. The default is null.
            </value>
        </member>
        <member name="E:Intersoft.Client.Framework.ISelection.SelectionChanged">
            <summary>
            Occurs when the selection of a ISelection changes.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.TestKeyEventArgs">
            <summary>
            Provides data for TestKey event.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.Input.ExecutedRoutedEventArgs">
            <summary>
            Provides data for the Executed and PreviewExecuted routed events.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.ApplicationLaunchEventHandler">
            <summary>
            Represents the method that will handle ApplicationLaunch events.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="T:Intersoft.Client.Framework.ApplicationLaunchFailedEventHandler">
            <summary>
            Represents the method that will handle ApplicationLaunchFailed events.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="T:Intersoft.Client.Framework.ApplicationLaunchProgressEventHandler">
            <summary>
            Represents the method that will handle ApplicationDownloadProgress events.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="T:Intersoft.Client.Framework.ApplicationLaunchProgressEventArgs">
            <summary>
            Provides data for the ApplicationLaunchProgressEventArgs events. 
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ApplicationLaunchProgressEventArgs.BytesRead">
            <summary>
            Gets the number of bytes that have been read. 
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ApplicationLaunchProgressEventArgs.MaxBytes">
            <summary>
            Gets the maximum number of bytes. 
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ApplicationLaunchProgressEventArgs.Navigator">
            <summary>
            Gets the navigator that raised the event 
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ApplicationLaunchProgressEventArgs.Uri">
            <summary>
            Gets the uniform resource identifier (URI) of the target page. 
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ApplicationLaunchProgressEventArgs.WindowOptions">
            <summary>
            Gets the window options associated with this application launch.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ApplicationLaunchProgressEventArgs.ApplicationSource">
            <summary>
            Gets the application package source available to the event.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.ApplicationLaunchFailedEventArgs">
            <summary>
            Provides data for the ApplicationLaunchFailedEventArgs events. 
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ApplicationLaunchFailedEventArgs.Uri">
            <summary>
            Gets the uniform resource identifier (URI) of the target page. 
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ApplicationLaunchFailedEventArgs.Exception">
            <summary>
            Gets the exception details that cause the application launch to fail.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ApplicationLaunchFailedEventArgs.WindowOptions">
            <summary>
            Gets the window options associated with this application launch.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ApplicationLaunchFailedEventArgs.ApplicationSource">
            <summary>
            Gets the application package source available to the event.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.ApplicationLaunchEventArgs">
            <summary>
            Provides data for the ApplicationLaunchEventArgs events. 
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ApplicationLaunchEventArgs.Uri">
            <summary>
            Gets the uniform resource identifier (URI) of the target page. 
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ApplicationLaunchEventArgs.Content">
            <summary>
            Gets the content dispatched by the application event.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ApplicationLaunchEventArgs.Window">
            <summary>
            Gets the IWindow instance dispatched by the application event.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ApplicationLaunchEventArgs.WindowOptions">
            <summary>
            Gets the window options associated with this application launch.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ApplicationLaunchEventArgs.ApplicationSource">
            <summary>
            Gets the application package source available to the event.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.ApplicationEvents">
            <summary>
            Provides application-related routed events
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ApplicationEvents.LaunchingEvent">
            <summary>
            Identifies the Launching routed event.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ApplicationEvents.LaunchFailedEvent">
            <summary>
            Identifies the LaunchFailed routed event.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ApplicationEvents.LaunchedEvent">
            <summary>
            Identifies the Launched routed event.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ApplicationEvents.LaunchCancelledEvent">
            <summary>
            Identifies the LaunchCancelled routed event.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ApplicationEvents.LaunchProgressEvent">
            <summary>
            Identifies the LaunchProgress routed event.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ApplicationEvents.LaunchQueuedEvent">
            <summary>
            Identifies the LaunchQueued routed event.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.Regions.IViewPart">
            <summary>
            Defines the members required to implement a view part.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.Regions.IViewPart.RegionScopeName">
            <summary>
            Gets the name of the region scope.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.Regions.IViewPart.RegionName">
            <summary>
            Gets the name of the region.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.Regions.IViewPart.ViewName">
            <summary>
            Gets the name of the view.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.Regions.IViewPart.RegionScopeType">
            <summary>
            Gets the type of the region scope where this view will be injected to.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.Regions.ViewPartAttribute">
            <summary>
            Represents an attribute that can be used to define a view part.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.ViewPartAttribute.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Intersoft.Client.Framework.Regions.ViewPartAttribute"/> class.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.ViewPartAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Intersoft.Client.Framework.Regions.ViewPartAttribute"/> class.
            </summary>
            <param name="regionScopeName">The region scope name of which the view will be injected to.</param>
            <param name="regionName">The region name of which the view will be injected to.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.ViewPartAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Intersoft.Client.Framework.Regions.ViewPartAttribute"/> class.
            </summary>
            <param name="regionScopeName">The region scope name of which the view will be injected to.</param>
            <param name="regionName">The region name of which the view will be injected to.</param>
            <param name="viewName">The unique name associated to this view instance.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.ViewPartAttribute.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Intersoft.Client.Framework.Regions.ViewPartAttribute"/> class.
            </summary>
            <param name="regionScopeName">The region scope name of which the view will be injected to.</param>
            <param name="regionName">The region name of which the view will be injected to.</param>
            <param name="viewName">The unique name associated to this view instance.</param>
            <param name="regionScopeType">The type of the region scope of which the view will be injected to.</param>
        </member>
        <member name="P:Intersoft.Client.Framework.Regions.ViewPartAttribute.RegionName">
            <summary>
            Gets the region name of the view part.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.Regions.ViewPartAttribute.RegionScopeName">
            <summary>
            Gets the region scope name of the view part.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.Regions.ViewPartAttribute.ViewName">
            <summary>
            Gets the name of the view part.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.Regions.ViewPartAttribute.RegionScopeType">
            <summary>
            Gets the type of the region scope where this view will be injected to.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.Regions.ViewMetadataAttribute">
            <summary>
            Represents an attribute to provide additional data to a view.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.ViewMetadataAttribute.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Intersoft.Client.Framework.Regions.ViewMetadataAttribute"/> class.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.ViewMetadataAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Intersoft.Client.Framework.Regions.ViewMetadataAttribute"/> class.
            </summary>
            <param name="viewSortHint">A value that represents the hint for view sorting.</param>
        </member>
        <member name="P:Intersoft.Client.Framework.Regions.ViewMetadataAttribute.ViewSortHint">
            <summary>
            Gets or sets the hint for view sorting.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.Regions.ViewMetadataAttribute.IsActive">
            <summary>
            Gets or sets a value that indicates whether the view is active.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.Regions.ViewMetadataAttribute.UserData">
            <summary>
            Gets or sets a custom user-defined data.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.WeakAction">
            <summary>
            Represents a weak action, which references an action while still allowing
            the owner of the action to be reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.WeakAction.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Intersoft.Client.Framework.WeakAction"/> class.
            </summary>
            <param name="action">The action that will be associated to this instance.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.WeakAction.Invoke">
            <summary>
            Invokes the action of this instance. This method runs only if the target of the reference is still alive.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.WeakAction.Dispose">
            <summary>
            Clears the weak reference of this instance.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.WeakAction.Action">
            <summary>
            Gets the Action associated to this instance.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.WeakAction.IsAlive">
            <summary>
            Gets a value indicating whether the Action's owner is still alive, or if it was collected
            by the Garbage Collector already.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.WeakAction.Target">
            <summary>
            Gets the Action's owner. This object is stored as a <see cref="T:System.WeakReference"/>.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.SubscriptionToken">
            <summary>
            Subscription token returned from <see cref="T:Intersoft.Client.Framework.DelegateEventBase"/> on subscribe.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.SubscriptionToken.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Intersoft.Client.Framework.SubscriptionToken"/>.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.SubscriptionToken.Equals(Intersoft.Client.Framework.SubscriptionToken)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            <see langword="true"/> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false"/>.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.SubscriptionToken.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />. </param>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj" /> parameter is null.</exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Intersoft.Client.Framework.SubscriptionToken.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object" />.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Intersoft.Client.Framework.DateTimeTypeConverter">
            <summary>
            Converts a string value to DateTime object.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.DateTimeTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines whether conversion is possible from a specified type to a DateTime object.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type" /> that represents the type you want to convert from.</param>
            <returns>True if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Intersoft.Client.Framework.DateTimeTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)" -->
        <member name="M:Intersoft.Client.Framework.DateTimeTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether the type converter can convert to string type.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type" /> that represents the type you want to convert to.</param>
            <returns>True if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.DateTimeTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the specified DateTime object to string value.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture.</param>
            <param name="value">The value to convert.</param>
            <param name="destinationType">A <see cref="T:System.Type" /> that represents the type you want to convert to.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="T:Intersoft.Client.Framework.Containers.AlwaysNewLifetime">
            <summary>
            A Lifetime Manager that always returns a new instance.
            </summary>
            <remarks>
            <para>Setting the IocContainer's or Registration's lifetime manager to null is equivalent
            to setting it to an instance of AlwaysNewLifetime. This is the default lifetime manager
            for the IocContainer.</para>
            The one instance can be used for all registrations. 
            </remarks>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.AlwaysNewLifetime.GetInstance(Intersoft.Client.Framework.Containers.IRegistration)">
            <summary>
            Always creates a new instance.
            </summary>
            <param name="registration">The creator (registration) that can create an instance</param>
            <returns>The new instance.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.AlwaysNewLifetime.InvalidateInstanceCache(Intersoft.Client.Framework.Containers.IRegistration)">
            <summary>
            Does nothing as this lifetime manager does not cache.
            </summary>
            <param name="registration">The registration.</param>
        </member>
        <member name="T:Intersoft.Client.Framework.ISButton">
            <summary>
            Serves as the base class for all Intersoft Button controls
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ISButton.ClickLatencyProperty">
            <summary>
            Identifies the BusyLatency dependency property.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ISButton.IsCheckedProperty">
            <summary>
            Identifies the IsChecked dependency property. 
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ISButton.IsToggleButtonProperty">
            <summary>
            Identifies the IsToggleButton dependency property. 
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ISButton.GroupNameProperty">
            <summary>
            Identifies the GroupName dependency property. 
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ISButton.EnableFocusAnimationProperty">
            <summary>
            Identifies the EnableFocusAnimation dependency property.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ISButton.CornerRadiusProperty">
            <summary>
            Identifies the CornerRadius dependency property.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ISButton.IsDefaultProperty">
            <summary>
            Identifies the IsDefault dependency property.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ISButton.IsCancelProperty">
            <summary>
            Identifies the IsCancel dependency property.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ISButton.EnableVisualTransitionsProperty">
            <summary>
            Identifies the EnableVisualTransitions dependency property.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ISButton.CornerRadiusDoubleProperty">
            <summary>
            Identifies the CornerRadiusDouble dependency property.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ISButton.IsDefaultFocusedProperty">
            <summary>
            Identifies the IsDefaultFocused dependency property.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ISButton.FocusableProperty">
            <summary>
            Identifies the Focusable dependency property.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ISButton.AutoCheckOnToggleProperty">
            <summary>
            Identifies the AutoCheckOnToggle dependency property.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ISButton.KeepCheckedStateProperty">
            <summary>
            Identifies the KeepCheckedState dependency property.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ISButton.UseCheckedVisualStateProperty">
            <summary>
            Identifies the UseCheckedVisualState dependency property.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISButton.OnGotFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Called before the GotFocus event occurs.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISButton.OnLostFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Called before the LostFocus event occurs.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISButton.AttachEventHandlers">
            <summary>
            Attach built-in event handlers to control templates. Call this method if necessary.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISButton.OnUnloaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the element is unloaded.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The event data for the property change.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISButton.InitializeTemplates">
            <summary>
            Initializes control templates.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISButton.InitializeStoryboards">
            <summary>
            Initializes storyboards.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISButton.DetachedEventHandlers">
            <summary>
            Detach built-in event handlers from control templates. Call this method if necessary.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISButton.OnClick">
            <summary>
            Called before the Click event occurs.
            </summary>        
        </member>
        <member name="M:Intersoft.Client.Framework.ISButton.OnToggleClick">
            <summary>
            Called before the ToggleClick event occurs.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISButton.DoToggle">
            <summary>
            Perform button toggle, if IsToggle is set to true.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISButton.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            Called before MouseEnter event occurs.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISButton.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Called before the MouseLeave event occurs.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISButton.OnIsPressedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the value of IsPressed property changes.
            </summary>
            <param name="e">The event data for the property change.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISButton.OnIsKeyboardFocusChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the value of IsKeyboardFocus property changes.
            </summary>
            <param name="e">>The event data for the property change.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISButton.OnIsCheckedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the value of IsChecked property changes.
            </summary>
            <param name="e">The event data for the property change.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISButton.OnIsEnabledChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the value of IsEnabled property changes.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The event data for the property change.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISButton.OnCommandChanged(System.Windows.Input.ICommand,System.Windows.Input.ICommand)">
            <summary>
            Called when the value of Command property changes.
            </summary>
            <param name="oldCommand">The old command.</param>
            <param name="newCommand">The new command.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISButton.OnInitializeCommandDefault(System.Windows.Input.ICommand)">
            <summary>
            Called when the Command is initialized.
            </summary>
            <param name="command">The command to be initialized.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISButton.UpdateCommandUIState">
            <summary>
            Updates the current state of the UI based on the associated Command.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISButton.UpdateCanExecute">
            <summary>
            Invalidates the CanExecute state of the command associated to this button.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISButton.OnApplyTemplate">
            <summary>
            Builds the visual tree when a new template is applied.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISButton.ChangeVisualState">
            <summary>
            Change the visual state.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISButton.ChangeVisualState(System.Boolean)">
            <summary>
            Change the visual state.
            </summary>
            <param name="useTransitions">Use transitions.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISButton.OnCornerRadiusChanged(System.Windows.CornerRadius)">
            <summary>
            Called when the value of CornerRadius property changes.
            </summary>
            <param name="newRadius">The new corner radius.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISButton.RefreshClip">
            <summary>
            Perform clipping to the dimension of the control. Call this method if necessary
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISButton.ResumeLayout">
            <summary>
            Resume the layout.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISButton.SuspendLayout">
            <summary>
            Suspend the layout.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISButton.RefreshVisualState">
            <summary>
            Refresh visual state to reflect the current state of button.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISButton.DoClick">
            <summary>
            Invokes the OnClick event and simulates the Click visual state.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ISButton.ClickEvent">
            <summary>
            Identifies the Clicked routed event.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ISButton.IsCheckedChangedEvent">
            <summary>
            Identifies the IsCheckedChanged routed event.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISButton.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ISButton.CommandProperty">
            <summary>
            Identifies the Command dependency property.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ISButton.CommandParameterProperty">
            <summary>
            Identifies the CommandParameter dependency property.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ISButton.CommandTargetProperty">
            <summary>
            Identifies the CommandTarget dependency property.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ISButton.CommandCannotExecuteProperty">
            <summary>
            Identifies the CommandCannotExecute dependency property.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISButton.ClickLatency">
            <summary>
            Gets or sets the latency, in seconds, before the click action is executed.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISButton.UseCheckedVisualState">
            <summary>
            Gets or sets a value indicating whether the Checked visual state should be applied when the IsChecked property is true.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISButton.KeepCheckedState">
            <summary>
            Gets or sets a value that determines whether the IsChecked property should be persisted when its value is true.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISButton.AutoCheckOnToggle">
            <summary>
            Gets or sets a value that indicates whether the IsChecked property should be automatically set when the button is clicked.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISButton.Focusable">
            <summary>
            Gets or sets a value that indicates whether this control can receive focus. (WPF compatible)
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISButton.IsChecked">
            <summary>
            Gets or sets a value that indicates whether the button is currently toggled (checked).
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISButton.IsToggleButton">
            <summary>
            Gets or sets a value that indicate whether the button should use toggle button behavior.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISButton.GroupName">
            <summary>
            Gets or sets a value that determines the group where this toggle button belongs to.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISButton.EnableFocusAnimation">
            <summary>
            Specifies whether this button should be animated when focused.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISButton.CornerRadius">
            <summary>
            Represents the radius of a border's corner. The radius can't be negative.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISButton.IsDefault">
            <summary>
            Specifies whether this button is the default button in the page or logical container. 
            A user invokes the default button by pressing the ENTER key.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISButton.EnableVisualTransitions">
            <summary>
            Specifies whether transitions should be used when the control changed its visual state.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISButton.IsCancel">
            <summary>
            Specifies whether this button is the Cancel button in the page or logical container. 
            A user can activate the Cancel button by pressing the ESC key.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISButton.CornerRadiusDouble">
            <summary>
            Corner Radius in double type for template binding.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISButton.Framework">
            <summary>
            Gets the entity framework.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISButton.IsInDesignMode">
            <summary>
            Gets a value that indicates whether the control is in design mode (development).
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISButton.LayoutSuspended">
            <summary>
            Gets a value that indicates whether the layout is being suspended.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISButton.Platform">
            <summary>
            Gets a value that indicates the current client platform.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISButton.RequireUpdateCanExecute">
            <summary>
            Determines whether the command associated to this button require to be updated in the next call.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISButton.IsInputControl">
            <summary>
            Determines whether this control is a command button or an input control.
            </summary>
        </member>
        <member name="E:Intersoft.Client.Framework.ISButton.IsCheckedChanged">
            <summary>
            Occurs when the IsChecked dependency property of the button is changed.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISButton.Product">
            <summary>
            Product Info.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISButton.Intersoft#Client#Framework#ILicensing#Product">
            <summary>
            Product Info.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISButton.Command">
            <summary>
            Gets or sets the command to invoke when this button is clicked.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISButton.CommandParameter">
            <summary>
            Gets or sets the parameter to pass to the Command property.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISButton.CommandTarget">
            <summary>
            Gets or sets the element on which to raise the specified command.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISButton.CommandCannotExecute">
            <summary>
            Gets or sets the UI behavior when the associated Command cannot be executed.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.JavaScript">
            <summary>
            Provides utility class related to javascript.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.JavaScript.AttachOnMouseWheel(System.EventHandler{System.Windows.Browser.HtmlEventArgs})">
            <summary>
            Attach mouse wheel. Deprecated since Silverlight already has mouse wheel event.
            </summary>
            <param name="onMouseWheel"></param>
        </member>
        <member name="M:Intersoft.Client.Framework.JavaScript.AttachOnContextMenu(System.EventHandler{System.Windows.Browser.HtmlEventArgs})">
            <summary>
            Attach context menu. Deprecated in Silverlight 4.0
            </summary>
            <param name="onContextMenu"></param>
        </member>
        <member name="M:Intersoft.Client.Framework.JavaScript.OpenWindow(System.String,System.String)">
            <summary>
            Open window.
            </summary>
            <param name="targetUrl"></param>
            <param name="targetWindow"></param>
        </member>
        <member name="T:Intersoft.Client.Framework.ProductInfo">
            <summary>
            Provides information about the product.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ProductInfo.ProductName">
            <summary>
            Gets or sets the product name.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ProductInfo.VersionNumber">
            <summary>
            Gets or sets the version number.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ProductInfo.BuildNumber">
            <summary>
            Gets or sets the build number.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ProductInfo.SubProductName">
            <summary>
            Gets or sets the sub product name.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ProductInfo.IsCollection">
            <summary>
            Gets or sets a value that indicates whether the product is collection product.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ProductInfo.Namespace">
            <summary>
            Gets or sets the namespace.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ProductInfo.ProductDesc">
            <summary>
            Gets or sets the product description.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ProductInfo.HasEdition">
            <summary>
            Gets or sets a value that indicates whether the product has edition.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ProductInfo.EditionName">
            <summary>
            Gets or sets the edition name.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ProductInfo.ReleaseType">
            <summary>
            Gets or sets the release type.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ProductInfo.PublicKeyToken">
            <summary>
            Gets or sets the public key token.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ProductInfo.BetaExpired">
            <summary>
            Gets or sets the beta expired date.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ProductInfo.IsTrialExpired">
            <summary>
            Gets or sets a value that indicates whether the trial is expired.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ProductInfo.Identity">
            <summary>
            Gets or sets the identity.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ProductInfo.ProductType">
            <summary>
            Gets or sets the product type.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ProductInfo.SimpleProductName">
            <summary>
            Gets or sets the simple product name.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ProductInfo.Tag">
            <summary>
            Gets or sets the tag vale.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ProductInfo.ObjectData">
            <summary>
            Gets or sets the object data.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ProductInfo.GetProductName">
            <summary>
            Gets the product name.
            </summary>
            <returns>Product name.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.ProductInfo.GetProductRegistryPath">
            <summary>
            Gets the product registry path.
            </summary>
            <returns>Registry path.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.ProductInfo.GetVersion">
            <summary>
            Gets the product version.
            </summary>
            <returns>Product version.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.ProductInfo.GetFrameworkCoreVersion">
            <summary>
            Gets the framework core version.
            </summary>
            <returns>Framework version.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.ProductInfo.GetVersionString">
            <summary>
            Gets the version string.
            </summary>
            <returns>Version.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.ProductInfo.GetRevisionNumber">
            <summary>
            Gets the revision number.
            </summary>
            <returns>Revision number.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.ProductInfo.GetPublicKeyToken">
            <summary>
            Gets the public key token.
            </summary>
            <returns>Public key token.</returns>
        </member>
        <member name="T:Intersoft.Client.Framework.Input.TestMouseEventArgs">
            <summary>
            Provides data for TestMouse event.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.JsonSerializer">
            <summary>
            Provides helper methods to serialize data to JSON format, and deserialize a JSON string back to specified type.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.JsonSerializer.SerializeToJsonString(System.Object)">
            <summary>
            Serialize the specified object to JSON string.
            </summary>
            <param name="objectToSerialize">The object to serialize.</param>
            <returns>String in JSON format.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.JsonSerializer.Deserialize``1(System.String)">
            <summary>
            Deserialize the specified JSON string to an object.
            </summary>
            <typeparam name="T">The type of the target object.</typeparam>
            <param name="jsonString">The JSON string to deserialize.</param>
            <returns>An object as the result of deserialization.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.JsonSerializer.Deserialize(System.Type,System.String)">
            <summary>
            Deserialize the specified JSON string to an object.
            </summary>
            <param name="type">The type of the target object.</param>
            <param name="jsonString">The JSON string to deserialize.</param>
            <returns>An object as the result of deserialization.</returns>
        </member>
        <member name="T:Intersoft.Client.Framework.Regions.IRegionCollection">
            <summary>
            Defines a collection of <see cref="T:Intersoft.Client.Framework.Regions.IRegion"/> uniquely identified by their Name.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.IRegionCollection.Add(Intersoft.Client.Framework.Regions.IRegion)">
            <summary>
            Adds a <see cref="T:Intersoft.Client.Framework.Regions.IRegion"/> to the collection.
            </summary>
            <param name="region">Region to be added to the collection.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.IRegionCollection.Remove(System.String)">
            <summary>
            Removes a <see cref="T:Intersoft.Client.Framework.Regions.IRegion"/> from the collection.
            </summary>
            <param name="regionName">Name of the region to be removed.</param>
            <returns><see langword="true"/> if the region was removed from the collection, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.IRegionCollection.Contains(System.String)">
            <summary>
            Checks if the collection contains a <see cref="T:Intersoft.Client.Framework.Regions.IRegion"/> with the name received as parameter.
            </summary>
            <param name="regionName">The name of the region to look for.</param>
            <returns><see langword="true"/> if the region is contained in the collection, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="P:Intersoft.Client.Framework.Regions.IRegionCollection.Item(System.String)">
            <summary>
            Gets the IRegion with the name received as index.
            </summary>
            <param name="regionName">Name of the region to be retrieved.</param>
            <returns>The <see cref="T:Intersoft.Client.Framework.Regions.IRegion"/> identified with the requested name.</returns>
        </member>
        <member name="T:Intersoft.Client.Framework.IEventAggregator">
            <summary>
            Defines the methods required in event aggregator implementation.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.IEventAggregator.GetEvent``1">
            <summary>
            Gets an instance of an event type.
            </summary>
            <typeparam name="TEventType">The type of event to get.</typeparam>
            <returns>An instance of an event object of type <typeparamref name="TEventType"/>.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.IEventAggregator.Subscribe``2(System.Action{``1})">
            <summary>
            Subscribes a delegate to an event that will be published on the <see cref="!:ThreadOption.PublisherThread"/>.
            <see cref="T:Intersoft.Client.Framework.DelegateEvent`1"/> will maintain a <seealso cref="T:System.WeakReference"/> to the target of the supplied <paramref name="action"/> delegate.
            </summary>
            <param name="action">The delegate that gets executed when the event is published.</param>
            <returns>A <see cref="T:Intersoft.Client.Framework.SubscriptionToken"/> that uniquely identifies the added subscription.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.IEventAggregator.Publish``2(``1)">
            <summary>
            Publishes the <see cref="T:Intersoft.Client.Framework.DelegateEvent`1"/>.
            </summary>
            <param name="payload">Message to pass to the subscribers.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.IEventAggregator.Unsubscribe``2(System.Action{``1})">
            <summary>
            Removes the first subscriber matching <seealso cref="T:System.Action`1"/> from the subscribers' list.
            </summary>
            <param name="subscriber">The <see cref="T:System.Action`1"/> used when subscribing to the event.</param>
        </member>
        <member name="T:Intersoft.Client.Framework.EventAggregator">
            <summary>
            Represents a class that serves as the hub/aggregator for events messaging.
            </summary>
            <remarks>
            Event aggregator facilitates the decoupling of publisher and subscribers messaging
            between different part of applications. It channels events from multiple objects
            into a single object to simplify registration for clients.
            </remarks>
        </member>
        <member name="M:Intersoft.Client.Framework.EventAggregator.GetEvent``1">
            <summary>
            Gets an instance of an event type.
            </summary>
            <typeparam name="TEventType">The type of event to get.</typeparam>
            <returns>An instance of an event object of type <typeparamref name="TEventType"/>.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.EventAggregator.Subscribe``2(System.Action{``1})">
            <summary>
            Subscribes a delegate to an event that will be published on the <see cref="!:ThreadOption.PublisherThread"/>.
            <see cref="T:Intersoft.Client.Framework.DelegateEvent`1"/> will maintain a <seealso cref="T:System.WeakReference"/> to the target of the supplied <paramref name="action"/> delegate.
            </summary>
            <param name="action">The delegate that gets executed when the event is published.</param>
            <returns>A <see cref="T:Intersoft.Client.Framework.SubscriptionToken"/> that uniquely identifies the added subscription.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.EventAggregator.Subscribe``2(System.Action{``1},Intersoft.Client.Framework.SubscribeOptions)">
            <summary>
            Subscribes a delegate to an event.
            DelegateEvent will maintain a <seealso cref="T:System.WeakReference"/> to the Target of the supplied <paramref name="action"/> delegate.
            </summary>
            <param name="action">The delegate that gets executed when the event is raised.</param>
            <param name="options">Specifies the options to apply to the subscription.</param>
            <returns>A <see cref="T:Intersoft.Client.Framework.SubscriptionToken"/> that uniquely identifies the added subscription.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.EventAggregator.Subscribe``2(System.Action{``1},Intersoft.Client.Framework.SubscribeOptions,System.Predicate{``1})">
            <summary>
            Subscribes a delegate to an event.
            </summary>
            <param name="action">The delegate that gets executed when the event is published.</param>
            <param name="options">Specifies the options to apply to the subscription.</param>
            <param name="filter">Filter to evaluate if the subscriber should receive the event.</param>
            <returns>A <see cref="T:Intersoft.Client.Framework.SubscriptionToken"/> that uniquely identifies the added subscription.</returns>
            <remarks>
            If <paramref name="options"/> contains <see cref="!:UseStrongReference"/> flag, the action and filter references will be keep alive.
            In such case, you must explicitly call Unsubscribe for the event when disposing the subscriber in order to avoid memory leaks or unexpected behaviors.
            </remarks>
        </member>
        <member name="M:Intersoft.Client.Framework.EventAggregator.Publish``2(``1)">
            <summary>
            Publishes the <see cref="T:Intersoft.Client.Framework.DelegateEvent`1"/>.
            </summary>
            <param name="payload">Message to pass to the subscribers.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.EventAggregator.Unsubscribe``2(System.Action{``1})">
            <summary>
            Removes the first subscriber matching <seealso cref="T:System.Action`1"/> from the subscribers' list.
            </summary>
            <param name="subscriber">The <see cref="T:System.Action`1"/> used when subscribing to the event.</param>
        </member>
        <member name="P:Intersoft.Client.Framework.EventAggregator.Default">
            <summary>
            Gets the default instance for EventAggregator service, allowing
            events to be subscribed and published in a static manner.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.ISHierarchicalSelectionControl">
            <summary>
            Serves as the base class for all Intersoft Hierarchical Selection controls.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHierarchicalSelectionControl.ClearContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
            <summary>
            Undoes the effects of the ItemsControl.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Object) method.
            </summary>
            <param name="element">The container element.</param>
            <param name="item">The item.</param>        
        </member>
        <member name="M:Intersoft.Client.Framework.ISHierarchicalSelectionControl.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
            <summary>
            Prepares the specified element to display the specified item.
            </summary>
            <param name="element">The container element used to display the specified item.</param>
            <param name="item">The item to display.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHierarchicalSelectionControl.ScrollIntoView(System.Windows.UIElement)">
            <summary>
            Scroll the desired element into the ScrollHost's viewport.
            </summary>
            <param name="element">Element to scroll into view.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHierarchicalSelectionControl.OnApplyTemplate">
            <summary>
            Builds the visual tree for the ISSelectionControl when a new template is applied.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHierarchicalSelectionControl.ClearSelection(System.Object)">
            <summary>
            Clear current selection.
            </summary>
            <param name="except">Except specified object.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHierarchicalSelectionControl.GetItemContext(System.Object)">
            <summary>
            Get item's context.
            </summary>
            <param name="item">Item.</param>
            <returns>Data Context.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHierarchicalSelectionControl.GetItemElement(System.Object,System.Windows.Controls.ItemsControl,Intersoft.Client.Framework.ISelectionItem)">
            <summary>
            Gets the element of the specified item.
            </summary>
            <param name="item"></param>
            <param name="items"></param>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHierarchicalSelectionControl.InitializeSelection(System.Windows.DependencyObject,System.Object)">
            <summary>
            Initialize selection.
            </summary>
            <param name="element">The container element used to display the specified item.</param>
            <param name="item">The item to display.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHierarchicalSelectionControl.GetSelectedItem">
            <summary>
            Get selected item element.
            </summary>
            <returns>Selected item element.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHierarchicalSelectionControl.Select(System.Int32)">
            <summary>
            Select the item on specified index.
            </summary>
            <param name="index">Index.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHierarchicalSelectionControl.Select(System.Object)">
            <summary>
            Select the specified item.
            </summary>
            <param name="item">Item.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHierarchicalSelectionControl.Unselect(System.Int32)">
            <summary>
            Unselect the item at specified index.
            </summary>
            <param name="index">Index.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHierarchicalSelectionControl.Unselect(System.Object)">
            <summary>
            Unselect the specified item.
            </summary>
            <param name="item">Item.</param>
        </member>
        <member name="F:Intersoft.Client.Framework.ISHierarchicalSelectionControl.SelectionChangedEvent">
            <summary>
            Identifies the SelectionChanged routed event.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ISHierarchicalSelectionControl.SelectedElementProperty">
            <summary>
            Identifies the SelectedElement dependency property.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ISHierarchicalSelectionControl.SelectedIndexProperty">
            <summary>
            Identifies the SelectedIndex dependency property.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ISHierarchicalSelectionControl.SelectedItemProperty">
            <summary>
            Identifies the SelectedItem dependency property.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ISHierarchicalSelectionControl.SelectedValueProperty">
            <summary>
            Identifies the SelectedValue dependency property.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ISHierarchicalSelectionControl.SelectedValuePathProperty">
            <summary>
            Identifies the SelectedValuePath dependency property.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHierarchicalSelectionControl.OnSelectedItemChanged(System.Object,System.Object)">
            <summary>
            Called when the value of the SelectedItem property changes.
            </summary>
            <param name="oldItem">The old value of the SelectedItem property.</param>
            <param name="newItem">The new value of the SelectedItem property.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHierarchicalSelectionControl.OnSelectedValueChanged(System.Object,System.Object)">
            <summary>
            Called when the value of the SelectedValue property changes.
            </summary>
            <param name="oldValue">The old value of the SelectedValue property.</param>
            <param name="newValue">The new value of the SelectedValue property.</param>
        </member>
        <member name="E:Intersoft.Client.Framework.ISHierarchicalSelectionControl.SelectionChanged">
            <summary>
            Occurs when the selection of a ISelection changes.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISHierarchicalSelectionControl.SelectedElement">
            <summary>
            Gets or sets the current selected element.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISHierarchicalSelectionControl.SelectedIndex">
            <summary>
            Gets or sets the current selected index.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISHierarchicalSelectionControl.SelectedItem">
            <summary>
            Gets or sets the current selected item.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISHierarchicalSelectionControl.SelectedValue">
            <summary>
            Gets the current selected value. Only applicable if selected value path is specified.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISHierarchicalSelectionControl.SelectedValuePath">
            <summary>
            Gets or sets the selected value path.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.DoubleClickManager">
            <summary>
            Provides static methods related to double click action.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.DoubleClickManager.IsDoubleClick">
            <summary>
            Gets a value that indicates whether the action is double click.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Intersoft.Client.Framework.ISPanel">
            <summary>
            Serves as the base class for all Intersoft panels.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISPanel.#ctor">
            <summary>
            Initializes a new instance of ISPanel class.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISPanel.GetItemSpacing(System.Windows.DependencyObject)">
            <summary>
            Gets item spacing value from target object.
            </summary>
            <param name="obj">Target object.</param>
            <returns>Item spacing.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.ISPanel.SetItemSpacing(System.Windows.DependencyObject,System.Int32)">
            <summary>
            Sets item spacing value to target object.
            </summary>
            <param name="obj">Target object.</param>
            <param name="value">Value.</param>
        </member>
        <member name="F:Intersoft.Client.Framework.ISPanel.ItemSpacingProperty">
            <summary>
            Identifies ItemSpacing dependency property.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISPanel.Framework">
            <summary>
            Gets the entity framework.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISPanel.IsInDesignMode">
            <summary>
            Gets a value that indicates whether the control is in design mode (development).
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISPanel.Platform">
            <summary>
            Gets a value that indicates the current client platform.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISPanel.TemplatedParent">
            <summary>
            Gets the ItemsControl object that host this panel.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISPanel.Product">
            <summary>
            Product Info.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISPanel.Intersoft#Client#Framework#ILicensing#Product">
            <summary>
            Product Info.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.ITaskBar">
            <summary>
            Provides the common properties and methods for UI controls to support task bar integration with UXDesktop component.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ITaskBar.GetSizeBoundary">
            <summary>
            Returns the size boundary of the control.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Intersoft.Client.Framework.ITaskBar.GetPositionOffset">
            <summary>
            Returns the position offset of the control.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Intersoft.Client.Framework.ITaskBar.GetWindowStateData(System.String)">
            <summary>
            Returns the state data used for window operation processing.
            </summary>
            <param name="targetState">The target state name.</param>
            <returns>A WindowStateData object.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.ITaskBar.PerformWindowOperation(Intersoft.Client.Framework.IWindow,System.String)">
            <summary>
            Executes the window operation instructed by desktop manager.
            </summary>
            <param name="window">The window which operation will be performed.</param>
            <param name="operation">The operation name.</param>
            <returns>True, if the operation is successful.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.ITaskBar.PrepareWindowOperation(Intersoft.Client.Framework.IWindow,System.String)">
            <summary>
            Prepares the window operation before the execution takes place.
            </summary>
            <param name="window">The window which operation will be performed.</param>
            <param name="operation">The operation name.</param>
            <returns>True, if the preparation has handled and executed the window operation.</returns>
        </member>
        <member name="P:Intersoft.Client.Framework.ITaskBar.DockPosition">
            <summary>
            Gets or sets the current dock position of the task bar.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ITaskBar.Owner">
            <summary>
            Gets or sets the owner of the control.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.IAuthenticationHost">
            <summary>
            Defines the properties required by a navigation host to support basic credential authentication.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.IAuthenticationHost.User">
            <summary>
            Gets or sets the <see cref="T:System.Security.Principal.IPrincipal"/> object representing the user to be authenticated.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.IAuthenticationHost.RedirectUri">
            <summary>
            Gets or sets the uniform resource identifier (URI) that will be navigated when the authentication is requested.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.IAuthenticationHost.IsAuthenticated">
            <summary>
            Gets a value indicating whether the associated <see cref="P:Intersoft.Client.Framework.IAuthenticationHost.User"/> is authenticated.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.ISupportAuthentication">
            <summary>
            Provides properties to support authentication in a content control that can be navigated such as UXPage.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISupportAuthentication.User">
            <summary>
            Gets or sets the <see cref="T:System.Security.Principal.IPrincipal"/> object representing the user to be authenticated.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISupportAuthentication.RequiresAuthentication">
            <summary>
            Gets or sets a value indicating whether the content requires authentication before it can be displayed.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISupportAuthentication.RequiresRole">
            <summary>
            Gets or sets the roles required by the <see cref="P:Intersoft.Client.Framework.ISupportAuthentication.User"/> to display the content.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISupportAuthentication.UseSingleSignOn">
            <summary>
            Gets or sets a value indicating whether the content is automatically authenticated when previous authentication succeeded.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISupportAuthentication.IsAuthenticated">
            <summary>
            Gets a value indicating whether the associated <see cref="P:Intersoft.Client.Framework.ISupportAuthentication.User"/> is authenticated.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.NotAuthorizedException">
            <summary>
            Represents the exception that occured due to insufficient permission or unauthorized access.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.Regions.ViewDiscoveryProvider">
            <summary>
            Represents the built-in view discovery implementation for the ClientUI region framework.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.Regions.IViewDiscoveryProvider">
            <summary>
            Defines the members required to implement a discovery provider.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.IViewDiscoveryProvider.Discover(Intersoft.Client.Framework.Regions.IRegion)">
            <summary>
            Perform the searching process to collect valid objects which can be added to the views in a <see cref="T:Intersoft.Client.Framework.Regions.IRegion"/>.
            </summary>
            <param name="region">The region instance to discover.</param>
            <returns>Returns a list of valid objects to be added to the views.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.ViewDiscoveryProvider.Discover(Intersoft.Client.Framework.Regions.IRegion)">
            <summary>
            Perform the searching process to collect valid objects which can be added to the views in a <see cref="T:Intersoft.Client.Framework.Regions.IRegion"/>.
            </summary>
            <param name="region">The region instance to discover.</param>
            <returns>Returns a list of valid objects to be added to the views.</returns>
        </member>
        <member name="T:Intersoft.Client.Framework.ISVirtualizingPanel">
            <summary>
            Serves as the base class for all Intersoft Virtualizing panels.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISVirtualizingPanel.#ctor">
            <summary>
            Initializes a new instance of ISVirtualizingPanel class.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISVirtualizingPanel.Framework">
            <summary>
            Gets the entity framework.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISVirtualizingPanel.IsInDesignMode">
            <summary>
            Gets a value that indicates whether the control is in design mode (development).
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISVirtualizingPanel.Product">
            <summary>
            Product Info.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISVirtualizingPanel.Intersoft#Client#Framework#ILicensing#Product">
            <summary>
            Product Info.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ISGroupItem.HeaderVisibilityProperty">
            <summary>
            Identifies the HeaderVisibility dependency property.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISGroupItem.HeaderVisibility">
            <summary>
            Gets or sets the header element visibility.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.IMultipleSelection">
            <summary>
            Defines data members that belongs to multiple selection control.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.IMultipleSelection.IsMultipleSelection">
            <summary>
            Gets a value that indicates whether the current action is multiple selection.        
            </summary>
            <returns>Value that indicates whether the current action is multiple selection. True if multiple selection.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.IMultipleSelection.Select(System.Int32,System.Boolean)">
            <summary>
            Select the item on specified index.
            </summary>
            <param name="index">Index.</param>
            <param name="multipleSelection">Is multiple selection.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.IMultipleSelection.Select(System.Object,System.Boolean)">
            <summary>
            Select the specified item.
            </summary>
            <param name="item">Item.</param>
            <param name="multipleSelection">Is multiple selection.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.IMultipleSelection.Unselect(System.Int32,System.Boolean)">
            <summary>
            Unselects item at specified index.
            </summary>
            <param name="index">Index.</param>
            <param name="multipleSelection">Is multiple selection.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.IMultipleSelection.Unselect(System.Object,System.Boolean)">
            <summary>
            Unselect the specified item.
            </summary>
            <param name="item">Item.</param>
            <param name="multipleSelection">Is multiple selection.</param>
        </member>
        <member name="P:Intersoft.Client.Framework.IMultipleSelection.SelectedItems">
            <summary>
            Gets or sets the selected items
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.IMultipleSelection.ItemContainerStyle">
            <summary>
            Gets or sets the Style that is applied to the container element generated for each item.
            </summary>
            <value>
            The Style that is applied to the container element generated for each item. The default is null.
            </value>
        </member>
        <member name="P:Intersoft.Client.Framework.IMultipleSelection.ItemContainerStyleSelector">
            <summary>
            Gets or sets the Style Selector that is applied to the container element generated for each item.
            </summary>
            <value>
            The Style Selector that is applied to the container element generated for each item. The default is null.
            </value>
        </member>
        <member name="T:Intersoft.Client.Framework.HierarchicalDataTemplate">
            <summary>
            Represents a DataTemplate that supports hierarchical objects.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.HierarchicalDataTemplate.#ctor">
            <summary>
            Initializes a new instance of the HierarchicalDataTemplate class.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.HierarchicalDataTemplate.ItemContainerStyle">
            <summary>
            Gets or sets the Style that is applied to the item container for each child item.
            </summary>
            <value>
            The style that is applied to the item container for each child item.
            </value>
        </member>
        <member name="P:Intersoft.Client.Framework.HierarchicalDataTemplate.ItemsSource">
            <summary>
            Gets or sets the collection that is used to generate content for the next sublevel in the data hierarchy.
            </summary>
            <value>
            The collection that is used to generate content for the next sublevel in the data hierarchy.  The default value is null.
            </value>
        </member>
        <member name="P:Intersoft.Client.Framework.HierarchicalDataTemplate.ItemTemplate">
            <summary>
            Specifies a data template that represents how the item should be displayed.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.ISRangeControl">
            <summary>
            Serves as the base class for all Intersoft Range controls.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ISRangeControl.CornerRadiusProperty">
            <summary>
            Identifies the CornerRadius dependency property.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ISRangeControl.CornerRadiusDoubleProperty">
            <summary>
            Identifies the CornerRadiusDouble dependency property.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ISRangeControl.InnerCornerRadiusProperty">
            <summary>
            Identifies the InnerCornerRadius dependency property.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ISRangeControl.InnerCornerRadiusDoubleProperty">
            <summary>
            Identifies the InnerCornerRadiusDouble dependency property.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISRangeControl.OnApplyTemplate">
            <summary>
            Builds the visual tree when a new template is applied.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISRangeControl.AttachEventHandlers">
            <summary>
            Attach built-in event handlers to control templates. Call this method if necessary.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISRangeControl.OnUnloaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the element is unloaded.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The event data for the property change.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISRangeControl.InitializeTemplates">
            <summary>
            Initializes control templates.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISRangeControl.InitializeStoryboards">
            <summary>
            Initializes storyboards.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISRangeControl.DetachedEventHandlers">
            <summary>
            Detach built-in event handlers from control templates. Call this method if necessary.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISRangeControl.RefreshClip">
            <summary>
            Perform clipping to the dimension of the control. Call this method if necessary
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISRangeControl.ResumeLayout">
            <summary>
            Resume the layout.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISRangeControl.SuspendLayout">
            <summary>
            Suspend the layout.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISRangeControl.OnCornerRadiusChanged(System.Windows.CornerRadius)">
            <summary>
            Invoked when the corner radius property is changed.
            </summary>
            <param name="newRadius"></param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISRangeControl.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISRangeControl.Framework">
            <summary>
            Gets the entity framework.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISRangeControl.IsInDesignMode">
            <summary>
            Gets a value that indicates whether the control is in design mode (development).
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISRangeControl.LayoutSuspended">
            <summary>
            Gets a value that indicates whether the layout is being suspended.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISRangeControl.Platform">
            <summary>
            Gets a value that indicates the current client platform.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISRangeControl.CornerRadius">
            <summary>
            Represents the radii of a border's corners.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISRangeControl.CornerRadiusDouble">
            <summary>
            Corner Radius in double type for template binding.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISRangeControl.InnerCornerRadiusDouble">
            <summary>
            Inner Corner Radius in double type for template binding.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISRangeControl.InnerCornerRadius">
            <summary>
            Inner corner radius.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISRangeControl.Product">
            <summary>
            Product Info.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISRangeControl.Intersoft#Client#Framework#ILicensing#Product">
            <summary>
            Product Info.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.ISFramework">
            <summary>
            Intersoft Client UI Entity Framework.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISFramework.#ctor(System.Windows.DependencyObject)">
            <summary>
            Initializes a new instance of the ISFramework class. 
            </summary>
            <param name="obj">Dependency Object.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISFramework.HasFocus">
            <summary>
            Gets a value that indicates whether the associated object has focused.
            </summary>
            <returns>Has focus.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.ISFramework.RefreshClip">
            <summary>
            Perform clipping to the dimension of the control. Call this method if necessary
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISFramework.ResumeLayout">
            <summary>
            Resume the layout.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISFramework.SuspendLayout">
            <summary>
            Suspend the layout.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISFramework.Platform">
            <summary>
            Gets a value that indicates the current client platform.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISFramework.ISObject">
            <summary>
            Gets the associated object.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISFramework.IsInDesignMode">
            <summary>
            Gets a value that indicates whether the control is in design mode (development).
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISFramework.LayoutSuspended">
            <summary>
            Gets a value that indicates whether the layout is being suspended.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.IWindowHost">
            <summary>
            Defines the properties to support <see cref="T:Intersoft.Client.Framework.IWindow"/> host.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.IWindowHost.WindowTitle">
            <summary>
            Gets or sets the window's title.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.IWindowHost.WindowGroupName">
            <summary>
            Gets or sets the group name for the window.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.IWindowHost.WindowHeight">
            <summary>
            Gets or sets the height of the window.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.IWindowHost.WindowMinHeight">
            <summary>
            Gets or sets the minimum height of the window.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.IWindowHost.WindowMaxHeight">
            <summary>
            Gets or sets the maximum height of the window.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.IWindowHost.WindowMinWidth">
            <summary>
            Gets or sets the minimum width of the window.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.IWindowHost.WindowMaxWidth">
            <summary>
            Gets or sets the maximum width of the window.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.IWindowHost.WindowWidth">
            <summary>
            Gets or sets the window's width.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.IWindowHost.WindowLeft">
            <summary>
            Gets or sets the left position of the window.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.IWindowHost.WindowTop">
            <summary>
            Gets or sets the top position of the window.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.IWindowHost.WindowIcon">
            <summary>
            Gets or sets the window's icon.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.IWindowHost.WindowIconLarge">
            <summary>
            Gets or sets the window's large icon.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.IWindowHost.WindowCanResize">
            <summary>
            Gets or sets a value indicating whether the window can be resized.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.IWindowHost.WindowCanMaximize">
            <summary>
            Gets or sets a value indicating whether the window can be maximized.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.IWindowHost.WindowCanMinimize">
            <summary>
            Gets or sets a value indicating whether the window can be minimized.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.IWindowHost.WindowCanClose">
            <summary>
            Gets or sets a value indicating whether the window can be closed.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.IWindowHost.WindowUseDefaultChrome">
            <summary>
            Gets or sets a value indicating whether the window should use default chrome style.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.IWindowHost.WindowUseNavigationUI">
            <summary>
            Gets or sets a value indicating whether the navigation UI should be displayed in navigation window.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.IWindowHost.DataContext">
            <summary>
            Gets or sets the data context to apply to the window.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.Containers.ThreadLocalStorageLifetime">
            <summary>
            A LifetimeManager that uses Thread Local Storage to cache instances.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.ThreadLocalStorageLifetime.GetInstance(Intersoft.Client.Framework.Containers.IRegistration)">
            <summary>
            Gets an instance from the thread local storage, or creates a new instance if not found.
            </summary>
            <param name="creator">The IInstanceCreate to use to get the Key and create new if required.</param>
            <returns>The instance.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.ThreadLocalStorageLifetime.InvalidateInstanceCache(Intersoft.Client.Framework.Containers.IRegistration)">
            <summary>
            Removes the instance for the registration from the local storage cache.
            </summary>
            <param name="registration">The IRegistration returned when the type was registered in the IOC container.</param>
        </member>
        <member name="T:Intersoft.Client.Framework.Containers.IRegistration">
            <summary>
            Defines the members to support registering a type in the container.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.IRegistration.WithLifetimeManager(Intersoft.Client.Framework.Containers.ILifetimeManager)">
            <summary>
            Sets the lifetime manager to be used by this Registration.
            </summary>
            <param name="manager">The ILifetimeManager to use.</param>
            <returns>'this', or the Registration.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.IRegistration.InvalidateInstanceCache">
            <summary>
            Invalidates any cached value so that a new instance will be created on
            the next Resolve call.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.IRegistration.CreateInstance">
            <summary>
            Creates an instance of the type using the registered function.
            </summary>
            <returns>The new instance.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.IRegistration.GetInstance">
            <summary>
            Gets the instance of the type using the registered function.
            </summary>
            <returns>The new or cached instance.</returns>
        </member>
        <member name="P:Intersoft.Client.Framework.Containers.IRegistration.Name">
            <summary>
            Gets the name of the registration.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.Containers.IRegistration.Key">
            <summary>
            Gets the key that is used to identify cached values.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.Containers.IRegistration.ResolvesTo">
            <summary>
            Gets the type the contain will Resolve to when this Registration is used.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.ISBindingContainer">
            <summary>
            Represents a framework element class that based on panel used for binding container.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.MultiBinding">
            <summary>
            Describes a collection of <see cref="T:System.Windows.Data.Binding"/> objects attached to a single binding target property.
            </summary>
            <remarks>
            You can specify multiple bindings in a MultiBinding object. When you use the MultiBinding object 
            with a converter, it produces a final value for the binding target based on the values of those bindings. 
            For example, color might be computed from red, blue, and green values, which can be values from the same 
            or different binding source objects. When a value moves from the target to the sources, the target property 
            value is translated to a set of values that are fed back into the bindings.
            </remarks>
        </member>
        <member name="F:Intersoft.Client.Framework.MultiBinding._updatingConvertedValue">
            <summary>
            Indicates whether the converted value property is currently being updated
            as a result of one of the BindingProxy.Value properties changing
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.MultiBinding.ConvertedValueProperty">
            <summary>
            Identifies the ConverterdValue dependency property.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.MultiBinding.OnConvertedValuePropertyChanged">
            <summary>
            Handles propety changes for the ConvertedValue property
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.MultiBinding.#ctor">
            <summary>
            Creates a new instance of MultiBinding class.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.MultiBinding.ConvertedValue">
            <summary>
            Gets or sets the resulting value of the associated Converter.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.MultiBinding.Mode">
            <summary>
            Gets or sets a value that indicates the direction of the data flow of this binding.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.MultiBinding.TargetProperty">
            <summary>
            Gets or sets the target property on the element which this MultiBinding is associated to.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.MultiBinding.Converter">
            <summary>
            Gets or sets the converter to use to convert the source values to or from the target value.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.MultiBinding.ConverterParameter">
            <summary>
            Gets or sets an optional parameter to pass to a converter as additional information.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.MultiBinding.Bindings">
            <summary>
            Gets the collection of <see cref="T:System.Windows.Data.Binding"/> objects within this <see cref="T:Intersoft.Client.Framework.MultiBinding"/> instance.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.BindingProxy">
            <summary>
            Represents a proxy class that contains a single property to hold the Value output as the result of data binding.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.BindingProxy.ValueProperty">
            <summary>
            Identifies the Value attached property.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.BindingProxy.OnPropertyChanged(System.String)">
            <summary>
            Called when the property value changes.
            </summary>
            <param name="name">The name of the property that changed.</param>
        </member>
        <member name="P:Intersoft.Client.Framework.BindingProxy.Value">
            <summary>
            Gets or sets the Value of the property bound in the MultiBinding instance.
            </summary>
        </member>
        <member name="E:Intersoft.Client.Framework.BindingProxy.PropertyChanged">
            <summary>
            Occurs when the property value changes.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.ElementNameBindingProxy">
            <summary>
            Represents a binding proxy that supports ElementName binding.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ElementNameBindingProxy.#ctor(System.Windows.FrameworkElement,System.Windows.Data.Binding)">
            <summary>
            Initializes a new instance of ElementNameBindingProxy class.
            </summary>
            <param name="target">The target element to bind.</param>
            <param name="binding">The binding object.</param>
        </member>
        <member name="T:Intersoft.Client.Framework.BindingCollection">
            <summary>
            Represents a collection of <see cref="T:System.Windows.Data.Binding"/> objects.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.RelativeBinding">
            <summary>
            Represents a Binding class that supports RelativeSource in Silverlight 3, Silverlight 4 and WPF.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.RelativeBinding.RelativeSourceMode">
            <summary>
            Gets or sets the location of the binding source relative to the position of the binding target.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.RelativeBinding.ParentType">
            <summary>
            Gets or sets the type of the parent template when the <see cref="P:Intersoft.Client.Framework.RelativeBinding.RelativeSourceMode"/> is set to TemplatedParent.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.Utility">
            <summary>
            Provides helper methods for basic and general purposes for building silverlight controls or applications. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.Utility.ClipElement(System.Windows.FrameworkElement)">
            <summary>
            Clip the element to its specified dimension.
            </summary>
            <param name="element">Element to be clipped.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.Utility.CreateTimeOut(System.Double,System.EventHandler)">
            <summary>
            Create a dispatcher time out.
            </summary>
            <param name="timeout">Ticks to timeout in seconds.</param>
            <param name="handler">Event delegation.</param>
            <returns>Dispatcher Timeout</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Utility.ExecuteTimeOut(System.Double,System.Action)">
            <summary>
            Execute an <see cref="T:System.Action"/> after the specified time span has elapsed.
            </summary>
            <param name="timeout">Ticks to timeout in seconds.</param>
            <param name="action">The action to execute.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.Utility.GetChildsRecursive(System.Windows.DependencyObject)">
            <summary>
            Gets all coresponding childs from given root element.
            </summary>
            <param name="root">The root element.</param>
            <returns>All childs that belongs to given root element.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Utility.GetChildsRecursive(System.Windows.DependencyObject,System.Int32)">
            <summary>
            Gets all coresponding childs from given root element.
            </summary>
            <param name="root">The root element.</param>
            <param name="level">How deep it should search. (-1 will dig deep until the bottom elements)</param>
            <returns>All childs that belongs to given root element.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Utility.GetChildsRecursive(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Gets all coresponding childs from given root element.
            </summary>
            <param name="root">The root element.</param>
            <param name="includeRoot">include root element in the query</param>
            <returns>All childs that belongs to given root element.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Utility.GetChildsRecursive(System.Windows.DependencyObject,System.Boolean,System.Int32)">
            <summary>
            Gets all coresponding childs from given root element.
            </summary>
            <param name="root">The root element.</param>
            <param name="includeRoot">Include root element in the returned collection.</param>
            <param name="level">How deep it should search. (-1 will dig deep until the bottom elements)</param>
            <returns>All childs that belongs to given root element.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Utility.GetElementsAtPosition(System.Windows.Input.MouseEventArgs)">
            <summary>
            Gets the elements at position
            </summary>
            <param name="e">Current mouse pointer</param>
            <returns>Hovered drop target.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Utility.GetElementsAtPosition(System.Windows.Point)">
            <summary>
            Gets the elements at position
            </summary>
            <param name="point">The exact position in Point where elements should be retrieved</param>
            <returns>A collection of elements at the specified position</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Utility.GetElementsAtPosition(System.Windows.Input.MouseEventArgs,System.Windows.UIElement,System.Windows.Size)">
            <summary>
            Gets the elements at position
            </summary>
            <param name="e">Current mouse pointer.</param>
            <param name="source">Source element.</param>
            <param name="size">Size.</param>
            <returns>Hovered drop target.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Utility.GetElementsAtPosition(System.Windows.Point,System.Windows.UIElement,System.Windows.Size)">
            <summary>
            Gets the elements at position
            </summary>
            <param name="mousePosition">Current mouse pointer</param>
            /// <param name="source">Source element.</param>
            <param name="size">Size.</param>
            <returns>Hovered drop target.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Utility.GetImageSource(System.Windows.Media.ImageSource)">
            <summary>
            Get the bitmap image from given image source.
            </summary>
            <param name="imageSource">The image source that going to be extracted.</param>
            <returns>Bitmap image of given image source.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Utility.GetImageUri(System.Windows.DependencyObject)">
            <summary>
            Gets the image uri in string representation from given image source.
            </summary>
            <param name="imageSource">The image source that going to be extracted.</param>
            <returns>Image uri in string representation of given image source.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Utility.GetImplementationRoot(System.Windows.DependencyObject)">
            <summary>
            Gets the implementation root of a dependency object.
            </summary>
            <param name="dependencyObject">The dependency object.</param>
            <returns>Returns the element of the implementation root.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Utility.GetMainLayoutRoot(System.Windows.Controls.Control)">
            <summary>
            Gets the main layout root that host the specified control.
            </summary>
            <param name="control">Control.</param>
            <returns>Main layout root.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Utility.GetMainLayoutRoot(System.Windows.FrameworkElement)">
            <summary>
            Gets the main layout root that host the specified element.
            </summary>
            <param name="element">Element.</param>
            <returns>Main layout root.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Utility.IsInLiveTree(System.Windows.DependencyObject)">
            <summary>
            Determines whether the specified element is in live tree.
            </summary>
            <param name="source">The source element to query.</param>
            <returns>True indicates the element is in live tree.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Utility.GetPopupRoot(System.Windows.DependencyObject)">
            <summary>
            Gets the popup root element.
            </summary>
            <param name="element">Popup element.</param>
            <returns>Popup root element.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Utility.GetRootVisual">
            <summary>
            Gets the application root visual.
            </summary>
            <returns>Application root visual.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Utility.GetRootVisual(System.Windows.UIElement)">
            <summary>
            Gets the application root visual.
            </summary>
            <returns>Application root visual.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Utility.GetRootVisual(System.Boolean)">
            <summary>
            Gets the application root visual.
            </summary>
            <param name="ensurePanel">Ensure panel.</param>
            <returns>Application root visual.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Utility.GetScrollContentPresenter(System.Windows.FrameworkElement)">
            <summary>
            Gets scroll content presenter.
            </summary>
            <param name="element">Source element.</param>
            <returns>Scroll content presenter.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Utility.GetStoryboard(System.Windows.DependencyObject,System.String,System.String)">
            <summary>
            Gets the story board of the specified source and group.
            </summary>
            <param name="source">A dependency object.</param>
            <param name="stateGroup">The group name of the story board to be retrieved.</param>
            <param name="newTransition">The transition name of the story board to be retrieved.</param>
            <returns></returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Utility.GetStoryboardFromVisualState(System.Windows.FrameworkElement,System.String,System.String)">
            <summary>
            Gets the storyboard from given visual state.
            </summary>
            <param name="element">Element that has visual state group.</param>
            <param name="groupName">Group name.</param>
            <param name="visualState">Visual state.</param>
            <returns>Storyboard.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Utility.GetValue(System.Object,System.Windows.Data.Binding)">
            <summary>
            Gets the value of the item using the provided binding info.
            </summary>
            <param name="item">Item.</param>
            <param name="binding">Binding info.</param>
            <returns></returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Utility.GetValue(System.Object,System.Windows.Data.Binding,System.Boolean)">
            <summary>
            Gets the value of the item using the provided binding info.
            </summary>
            <param name="item">Item.</param>
            <param name="binding">Binding info.</param>
            <param name="useConverter">Pass through converter</param>
            <returns></returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Utility.GetVisualState(System.Windows.DependencyObject,System.String,System.String)">
            <summary>
            Gets the visual state of the specified source, group and state name.
            </summary>
            <param name="source">An element of dependency object type.</param>
            <param name="stateGroup">The state group of the visual state to be retrieved.</param>
            <param name="stateName">The visual state/transition name to be retrieved.</param>
            <returns></returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Utility.GetWriteableBitmap(System.Windows.UIElement)">
            <summary>
            Gets writeable bitmap from specified element.
            </summary>
            <param name="element">Element that going to be captured as bitmap.</param>
            <returns>Bitmap of the specified element.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Utility.HasDefaultValue(System.Windows.DependencyObject,System.Windows.DependencyProperty)">
            <summary>
            Check whether a control has the default value for a property.
            </summary>
            <param name="control">The control to check.</param>
            <param name="property">The property to check.</param>
            <returns>
            True if the property has the default value; false otherwise.
            </returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Utility.InitializeRenderTransformGroup">
            <summary>
            Initialize a default render transform group, which might be needed for manupulating storyboard.
            </summary>
            <returns>Default render transform group.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Utility.LoadTemplate(System.Windows.Controls.Panel,System.Windows.DataTemplate)">
            <summary>
            Load template to the specified panel.
            </summary>
            <param name="panel">A panel that will host the template.</param>
            <param name="template">The template to be instantiated.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.Utility.LoadTemplate(System.Windows.Controls.Border,System.Windows.DataTemplate)">
            <summary>
            Load template to the specified border.
            </summary>
            <param name="panel">A border that will host the template.</param>
            <param name="template">The template to be instantiated</param>
        </member>
        <member name="M:Intersoft.Client.Framework.Utility.RemoveFromParent(System.Windows.FrameworkElement)">
            <summary>
            Remove the element from its parent.
            </summary>
            <param name="element">Element that is going to be released from its parent.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.Utility.TraverseChildrens(System.Windows.UIElement,System.Int32,System.Action{System.Windows.UIElement,Intersoft.Client.Framework.TraverseEventArg})">
            <summary>
            Deep traverse the children of the specified UIElement and return the children based on condition in the provided Action.
            </summary>
            <param name="element">The UIElement to be traversed.</param>
            <param name="deepLength">The deep length of children to be traversed.</param>
            <param name="action">The method that will be invoked on each child element found during traversal process.</param>
            <returns>Returns child element.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Utility.TryGetVisualStateGroup(System.Windows.DependencyObject,System.String)">
            <summary>
            Try to get the visual state group of the specified dependency object.
            </summary>
            <param name="dependencyObject">The dependency object which visual state group to be retrieved.</param>
            <param name="groupName">The group name of which visual state group to be retrieved.</param>
            <returns>Returns visual state group object.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Utility.FindPanel(System.Windows.DependencyObject)">
            <summary>
            Find the Panel instance of the specified dependency object.
            </summary>
            <param name="obj">A dependency object.</param>
            <returns>Returns Panel object.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Utility.SnapshotElement(System.Windows.UIElement,System.Boolean,System.Action{Intersoft.Client.Framework.SnapshotCallbackData})">
            <summary>
            Snapshot the specified UIElement into a WriteableBitmap. 
            The UIElement can be properly captured regardless of its current Visibility and Opacity value.
            </summary>
            <param name="element">The UIElement to snapshot.</param>
            <param name="requireParentSurgery">Determines whether the snapshot should be performed in background to achieve smoother effect.</param>
            <param name="callback">The delegate that handles the callback which process the resulted writeable bitmap.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.Utility.IsInPopup(System.Windows.UIElement,System.Windows.FrameworkElement@)">
            <summary>
            Determines whether the given element is contained in a Popup.
            </summary>
            <param name="element">The element to query.</param>
            <param name="popup">Popup element.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.Utility.FindVisualAncestor(System.Windows.DependencyObject,System.Type)">
            <summary>
            Finds the ancestor visual element of the specified source which matches the given type.
            </summary>
            <param name="source">Source.</param>
            <param name="ancestorType">Ancestor type.</param>
            <returns>Visual ancestor.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Utility.FindVisualDescendant(System.Windows.UIElement,System.Type)">
            <summary>
            Finds the descendant visual element of the specified source which matches the given type.
            </summary>
            <param name="source">Source.</param>
            <param name="type">Descendant type.</param>
            <returns>A dependency object.</returns>
        </member>
        <member name="T:Intersoft.Client.Framework.Guard">
            <summary>
            Framework helper.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.Guard.NotNull(System.Object,System.String)">
            <summary>
            Guard not null.
            </summary>
            <param name="obj"></param>
            <param name="name"></param>
        </member>
        <member name="M:Intersoft.Client.Framework.Guard.NotEmpty(System.String,System.String)">
            <summary>
            Guard not empty.
            </summary>
            <param name="str"></param>
            <param name="name"></param>
        </member>
        <member name="T:Intersoft.Client.Framework.TraverseEventArg">
            <summary>
            Provides details for child traversing
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.TraverseEventArg.Stop">
            <summary>
            Indicates whether the traverse should be stopped and returns the child element assigned in Result property.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.TraverseEventArg.Result">
            <summary>
            Gets or sets the element to be returned in TraverseChidrens method.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.TraverseEventArg.SkipChildren">
            <summary>
            Gets or sets a value that indicates whether children is skipped.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.DataBinding">
            <summary>
            Intersoft's data binding extension.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.DataBinding.UpdateSourceOnLostFocusProperty">
            <summary>
            Identifies the UpdateSourceOnPropertyChanged attached property.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.DataBinding.UpdateSourceOnPropertyChangedProperty">
            <summary>
            Identifies the UpdateSourceOnPropertyChanged attached property.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.DataBinding.ClearErrorOnTextInputProperty">
            <summary>
            Identifies the UpdateSourceOnPropertyChanged attached property.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.DataBinding.GetUpdateSourceOnLostFocus(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the UpdateSourceOnLostFocus attached property.
            </summary>
            <param name="element">Element for which to get the property.</param>
            <returns>Value of UpdateSourceOnLostFocus attached property.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.DataBinding.GetUpdateSourceOnPropertyChanged(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the UpdateSourceOnPropertyChanged attached property.
            </summary>
            <param name="element">Element for which to get the property.</param>
            <returns>Value of UpdateSourceOnPropertyChanged attached property.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.DataBinding.SetUpdateSourceOnLostFocus(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the value of the SetUpdateSourceOnLostFocus attached property.
            </summary>
            <param name="element">Element on which to set the property.</param>
            <param name="value">Value for SetUpdateSourceOnLostFocus attached property.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.DataBinding.SetUpdateSourceOnPropertyChanged(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the value of the UpdateSourceOnPropertyChanged attached property.
            </summary>
            <param name="element">Element on which to set the property.</param>
            <param name="value">Value for UpdateSourceOnPropertyChanged attached property.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.DataBinding.GetClearErrorOnTextInput(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the ClearErrorOnTextInput attached property.
            </summary>
            <param name="element">Element for which to get the property.</param>
            <returns>Value of ClearErrorOnTextInput attached property.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.DataBinding.SetClearErrorOnTextInput(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the value of the ClearErrorOnTextInput attached property.
            </summary>
            <param name="element">Element on which to set the property.</param>
            <param name="value">Value for ClearErrorOnTextInput attached property.</param>
        </member>
        <member name="T:Intersoft.Client.Framework.Input.KeyboardFocusChangedEventArgs">
            <summary>
            Provides data for KeyboardFocusChanged event.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.Input.KeyEventArgs">
            <summary>
            Provides data for Key event.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.IEventSubscription">
            <summary>
            Defines the members to implement an event subscription.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.IEventSubscription.GetExecutionStrategy">
            <summary>
            Gets the execution strategy to publish this event.
            </summary>
            <returns>An <see cref="T:System.Action`1"/> with the execution strategy, or <see langword="null"/> if the <see cref="T:Intersoft.Client.Framework.IEventSubscription"/> is no longer valid.</returns>
        </member>
        <member name="P:Intersoft.Client.Framework.IEventSubscription.SubscriptionID">
            <summary>
            Gets or sets a <see cref="!:Events.SubscriptionToken"/> that identifies this <see cref="T:Intersoft.Client.Framework.IEventSubscription"/>.
            </summary>
            <value>A token that identifies this <see cref="T:Intersoft.Client.Framework.IEventSubscription"/>.</value>
        </member>
        <member name="T:Intersoft.Client.Framework.EventSubscription`1">
            <summary>
            Provides a way to retrieve a <see cref="T:System.Delegate"/> to execute an action depending
            on the value of a second filter predicate that returns true if the action should execute.
            </summary>
            <typeparam name="TPayload">The type to use for the generic <see cref="T:System.Action`1"/> and <see cref="T:System.Predicate`1"/> types.</typeparam>
        </member>
        <member name="M:Intersoft.Client.Framework.EventSubscription`1.#ctor(Intersoft.Client.Framework.IDelegateReference,Intersoft.Client.Framework.IDelegateReference)">
            <summary>
             Creates a new instance of <see cref="T:Intersoft.Client.Framework.EventSubscription`1"/>.
            </summary>
            <param name="actionReference">A reference to a delegate of type <see cref="T:System.Action`1"/>.</param>
            <param name="filterReference">A reference to a delegate of type <see cref="T:System.Predicate`1"/>.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="actionReference"/> or <see paramref="filterReference"/> are <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">When the target of <paramref name="actionReference"/> is not of type <see cref="T:System.Action`1"/>,
            or the target of <paramref name="filterReference"/> is not of type <see cref="T:System.Predicate`1"/>.</exception>
        </member>
        <member name="M:Intersoft.Client.Framework.EventSubscription`1.Intersoft#Client#Framework#IEventSubscription#GetExecutionStrategy">
            <summary>
            Gets the execution strategy to publish this event.
            </summary>
            <returns>An <see cref="T:System.Action`1"/> with the execution strategy, or <see langword="null"/> if the <see cref="T:Intersoft.Client.Framework.IEventSubscription"/> is no longer valid.</returns>
            <remarks>
            If <see cref="P:Intersoft.Client.Framework.EventSubscription`1.Action"/> or <see cref="P:Intersoft.Client.Framework.EventSubscription`1.Filter"/> are no longer valid because they were
            garbage collected, this method will return <see langword="null"/>.
            Otherwise it will return a delegate that evaluates the <see cref="P:Intersoft.Client.Framework.EventSubscription`1.Filter"/> and if it
            returns <see langword="true"/> will then call <see cref="M:Intersoft.Client.Framework.EventSubscription`1.InvokeAction(System.Action{`0},`0)"/>. The returned
            delegate holds hard references to the <see cref="P:Intersoft.Client.Framework.EventSubscription`1.Action"/> and <see cref="P:Intersoft.Client.Framework.EventSubscription`1.Filter"/> target
            <see cref="T:System.Delegate">delegates</see>. As long as the returned delegate is not garbage collected,
            the <see cref="P:Intersoft.Client.Framework.EventSubscription`1.Action"/> and <see cref="P:Intersoft.Client.Framework.EventSubscription`1.Filter"/> references delegates won't get collected either.
            </remarks>
        </member>
        <member name="M:Intersoft.Client.Framework.EventSubscription`1.InvokeAction(System.Action{`0},`0)">
            <summary>
            Invokes the specified <see cref="T:System.Action`1"/> synchronously when not overriden.
            </summary>
            <param name="action">The action to execute.</param>
            <param name="argument">The payload to pass <paramref name="action"/> while invoking it.</param>
            <exception cref="T:System.ArgumentNullException">An <see cref="T:System.ArgumentNullException"/> is thrown if <paramref name="action"/> is null.</exception>
        </member>
        <member name="P:Intersoft.Client.Framework.EventSubscription`1.Action">
            <summary>
            Gets the target <see cref="T:System.Action`1"/> that is referenced by the <see cref="T:Intersoft.Client.Framework.IDelegateReference"/>.
            </summary>
            <value>An <see cref="T:System.Action`1"/> or <see langword="null"/> if the referenced target is not alive.</value>
        </member>
        <member name="P:Intersoft.Client.Framework.EventSubscription`1.Filter">
            <summary>
            Gets the target <see cref="T:System.Predicate`1"/> that is referenced by the <see cref="T:Intersoft.Client.Framework.IDelegateReference"/>.
            </summary>
            <value>An <see cref="T:System.Predicate`1"/> or <see langword="null"/> if the referenced target is not alive.</value>
        </member>
        <member name="P:Intersoft.Client.Framework.EventSubscription`1.SubscriptionID">
            <summary>
            Gets or sets a <see cref="!:Events.SubscriptionToken"/> that identifies this <see cref="T:Intersoft.Client.Framework.IEventSubscription"/>.
            </summary>
            <value>A token that identifies this <see cref="T:Intersoft.Client.Framework.IEventSubscription"/>.</value>
        </member>
        <member name="T:Intersoft.Client.Framework.BackgroundEventSubscription`1">
            <summary>
            Extends <see cref="T:Intersoft.Client.Framework.EventSubscription`1"/> to invoke the <see cref="P:Intersoft.Client.Framework.EventSubscription`1.Action"/> delegate in a background thread.
            </summary>
            <typeparam name="TPayload">The type to use for the generic <see cref="T:System.Action`1"/> and <see cref="T:System.Predicate`1"/> types.</typeparam>
        </member>
        <member name="M:Intersoft.Client.Framework.BackgroundEventSubscription`1.#ctor(Intersoft.Client.Framework.IDelegateReference,Intersoft.Client.Framework.IDelegateReference)">
            <summary>
            Creates a new instance of <see cref="T:Intersoft.Client.Framework.BackgroundEventSubscription`1"/>.
            </summary>
            <param name="actionReference">A reference to a delegate of type <see cref="T:System.Action`1"/>.</param>
            <param name="filterReference">A reference to a delegate of type <see cref="T:System.Predicate`1"/>.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="actionReference"/> or <see paramref="filterReference"/> are <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">When the target of <paramref name="actionReference"/> is not of type <see cref="T:System.Action`1"/>,
            or the target of <paramref name="filterReference"/> is not of type <see cref="T:System.Predicate`1"/>.</exception>
        </member>
        <member name="M:Intersoft.Client.Framework.BackgroundEventSubscription`1.InvokeAction(System.Action{`0},`0)">
            <summary>
            Invokes the specified <see cref="T:System.Action`1"/> in an asynchronous thread by using a <see cref="T:System.Threading.ThreadPool"/>.
            </summary>
            <param name="action">The action to execute.</param>
            <param name="argument">The payload to pass <paramref name="action"/> while invoking it.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.TypeRegistry.Dispose">
            <summary>
            Called when the type registry is disposed.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.IMultiValueConverter">
            <summary>
            Provides a way to apply custom logic in a <see cref="T:Intersoft.Client.Framework.MultiBinding"/>.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.IMultiValueConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts source values to a value for the binding target. The data binding engine calls this method when it propagates the values from source bindings to the binding target.
            </summary>
            <param name="values">The array of values that the source bindings in the MultiBinding produces. The value UnsetValue indicates that the source binding has no value to provide for conversion.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>A converted value. If the method returns null, the valid null value is used.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.IMultiValueConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a binding target value to the source binding values.
            </summary>
            <param name="value">The value that the binding target produces.</param>
            <param name="targetTypes">The array of types to convert to. The array length indicates the number and types of values that are suggested for the method to return.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>An array of values that have been converted from the target value back to the source values.</returns>
        </member>
        <member name="T:Intersoft.Client.Framework.WindowStateData">
            <summary>
            Provides data and state for window.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.WindowStateData.Left">
            <summary>
            Gets the left position of the window.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.WindowStateData.Top">
            <summary>
            Gets the top position of the window.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.WindowStateData.Width">
            <summary>
            Gets the logical width of the window.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.WindowStateData.Height">
            <summary>
            Gets the logical height of the window.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.WindowStateData.Opacity">
            <summary>
            Gets the opacity of the window.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.WindowStateData.Visibility">
            <summary>
            Gets or sets a value that indicates whether the window is visible.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.WindowStateData.Tag">
            <summary>
            Gets or sets custom object associated to the window.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.WindowStateData.State">
            <summary>
            Gets or sets state data associated to the window.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.WindowStateData.MinWidth">
            <summary>
            Gets or sets the last minimum width value of the window.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.WindowStateData.MinHeight">
            <summary>
            Gets or sets the last minimum height value of the window.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.Downloader">
            <summary>
            Provides a downloader class that utilize WebClient to download any kind of resource from the web.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.Downloader.Download(System.String)">
            <summary>
            Download the specified uri.
            </summary>
            <param name="uri">Uri to be downloaded.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.Downloader.OnDownloaded(System.Net.OpenReadCompletedEventArgs)">
            <summary>
            Raises the Downloaded event.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.Downloader.OnDownloadProgressChanged(System.Net.DownloadProgressChangedEventArgs)">
            <summary>
            Raises the Download progress changed event.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.Downloader.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.Downloader.Client">
            <summary>
            Gets the WebClient.
            </summary>
        </member>
        <member name="E:Intersoft.Client.Framework.Downloader.Downloaded">
            <summary>
            Occurs when the resource has been downloaded.
            </summary>
        </member>
        <member name="E:Intersoft.Client.Framework.Downloader.DownloadProgress">
            <summary>
            Occurs when the resource is being downloaded.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.ContentChangedRoutedEventHandler">
            <summary>
            Represents the method that will handle the ContentChanged routed event.
            </summary>
            <param name="sender">The object where the event handler is attached.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="T:Intersoft.Client.Framework.ContentChangedRoutedEventArgs">
            <summary>
            Provides data for ContentChanged event.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ContentChangedRoutedEventArgs.#ctor(Intersoft.Client.Framework.RoutedEvent)">
            <summary>
            Initializes a new instance of the ContentChangedRoutedEventArgs class. 
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ContentChangedRoutedEventArgs.OldContent">
            <summary>
            Gets the old content.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ContentChangedRoutedEventArgs.NewContent">
            <summary>
            Gets the new content.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.RoutedCommandHelpers.ExecuteCommand(System.Windows.Input.ICommand,System.Object,System.Windows.UIElement)">
            <summary>
            A helper method to execute a <see cref="T:System.Windows.Input.ICommand"/>.
            </summary>
            <param name="command">The command to execute.</param>
            <param name="parameter">The command parameter.</param>
            <param name="target">The command target.</param>
        </member>
        <member name="T:Intersoft.Client.Framework.Input.CanExecuteRoutedEventArgs">
            <summary>
            Provides data for the CanExecute and PreviewCanExecute routed events.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.ISPopup">
            <summary>
            Serves as the base class for all Intersoft Popup controls.
            </summary>    
        </member>
        <member name="F:Intersoft.Client.Framework.ISPopup.MouseLeftButtonDownEvent">
            <summary>
            Identifies the MouseLeftButtonDown routed event.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ISPopup.MouseLeftButtonUpEvent">
            <summary>
            Identifies the MouseLeftButtonUp routed event.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ISPopup.KeyDownEvent">
            <summary>
            Identifies the KeyDown routed event.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ISPopup.KeyUpEvent">
            <summary>
            Identifies the KeyUp routed event.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.Regions.RegionManagerService">
            <summary>
            Provides the methods to maintain the region manager.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.RegionManagerService.Register(Intersoft.Client.Framework.Regions.IRegionManager)">
            <summary>
            Registers the specified region manager to the registry.
            </summary>
            <param name="regionManager">The region manager to register.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.RegionManagerService.Unregister(Intersoft.Client.Framework.Regions.IRegionManager)">
            <summary>
            Unregisters the specified region manager from the registry.
            </summary>
            <param name="regionManager">The region manager to unregister.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.RegionManagerService.FindRegionManager(System.Windows.DependencyObject)">
            <summary>
            Find the region manager that owns the specified element.
            </summary>
            <param name="element">The element that will be used as the search reference.</param>
            <returns>Returns <see cref="T:Intersoft.Client.Framework.Regions.IRegionManager"/>.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.RegionManagerService.FindRegionManager(System.String)">
            <summary>
            Find the region manager that owns the specified element.
            </summary>
            <param name="scopeName">The scope name of the region manager to find.</param>
            <returns>Returns <see cref="T:Intersoft.Client.Framework.Regions.IRegionManager"/>.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.RegionManagerService.Dispose(System.Windows.DependencyObject)">
            <summary>
            Dispose all region managers that are registered under the specified element.
            </summary>
            <param name="root">The element used as the starting point for region managers discovery.</param>
        </member>
        <member name="T:Intersoft.Client.Framework.Input.CanExecuteRoutedEventHandler">
            <summary>
            Represents the method that will handle the CanExecute events for commands.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A CanExecuteToolEventArgs that contains the event data.</param>
        </member>
        <member name="T:Intersoft.Client.Framework.Input.CanQueryStatusRoutedEventArgs">
            <summary>
            Provides data for the CanQueryStatus routed event.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.Input.QueryStatusRoutedEventArgs">
            <summary>
            Provides data for the QueryStatus routed event.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.WeakAction`1">
            <summary>
            Represents a generic weak action, which references an action while still allowing
            the owner of the action to be reclaimed by garbage collection.
            </summary>
            <typeparam name="T">The type of the Action's parameter.</typeparam>
        </member>
        <member name="M:Intersoft.Client.Framework.WeakAction`1.#ctor(System.Action{`0})">
            <summary>
            Initializes a new instance of the WeakAction class.
            </summary>
            <param name="action">The action that will be associated to this instance.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.WeakAction`1.Invoke">
            <summary>
            Invokes the action of this instance. This method runs only if the target of the reference is still alive.
            The action's parameter is set to default(T).
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.WeakAction`1.Execute(`0)">
            <summary>
            Invokes the action of this instance. This method runs only if the target of the reference is still alive.
            </summary>
            <param name="parameter">A parameter to be passed to the action.</param>
        </member>
        <member name="P:Intersoft.Client.Framework.WeakAction`1.Action">
            <summary>
            Gets the Action associated to this instance.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.CharTypeConverter">
            <summary>
            Converts a string value to char value.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.CharTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines whether conversion is possible from a specified type to a char type.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type" /> that represents the type you want to convert from.</param>
            <returns>True if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Intersoft.Client.Framework.CharTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)" -->
        <member name="M:Intersoft.Client.Framework.CharTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether the type converter can convert to char type.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type" /> that represents the type you want to convert to.</param>
            <returns>True if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.CharTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the specified char value to string value.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture.</param>
            <param name="value">The value to convert.</param>
            <param name="destinationType">A <see cref="T:System.Type" /> that represents the type you want to convert to.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="T:Intersoft.Client.Framework.GroupStyle">
            <summary>Defines how you want the group to look at each level.</summary>
        </member>
        <member name="P:Intersoft.Client.Framework.GroupStyle.AlternationCount">
            <summary>Gets or sets the number of alternating ISGroupItem objects.</summary>
            <returns>The number of alternating ISGroupItem objects.</returns>
        </member>
        <member name="P:Intersoft.Client.Framework.GroupStyle.ContainerStyle">
            <summary>Gets or sets the style that is applied to the ISGroupItem generated for each item.</summary>
            <returns>The style that is applied to the ISGroupItem generated for each item. The default is null.</returns>
        </member>
        <member name="P:Intersoft.Client.Framework.GroupStyle.ContainerStyleSelector">
            <summary>Enables the application writer to provide custom selection logic for a style to apply to each generated ISGroupItem.</summary>
            <returns>An object that derives from <see cref="T:System.Windows.Controls.StyleSelector" />. The default is null.</returns>
        </member>
        <member name="P:Intersoft.Client.Framework.GroupStyle.Default">
            <summary>Gets the default style of the group.</summary>
            <returns>The default style of the group.</returns>
        </member>
        <member name="P:Intersoft.Client.Framework.GroupStyle.HeaderStringFormat">
            <summary>Gets or sets a composite string that specifies how to format the header if it is displayed as a string.</summary>
            <returns>A composite string that specifies how to format the header if it is displayed as a string.</returns>
        </member>
        <member name="P:Intersoft.Client.Framework.GroupStyle.HeaderTemplate">
            <summary>Gets or sets the template that is used to display the group header.</summary>
            <returns>A <see cref="T:System.Windows.DataTemplate" /> object that is used to display the group header. The default is null.</returns>
        </member>
        <member name="P:Intersoft.Client.Framework.GroupStyle.HeaderTemplateSelector">
            <summary>Enables the application writer to provide custom selection logic for a template that is used to display the group header.</summary>
            <returns>An object that derives from <see cref="T:System.Windows.Controls.DataTemplateSelector" />. The default is null.</returns>
        </member>
        <member name="P:Intersoft.Client.Framework.GroupStyle.HidesIfEmpty">
            <summary>Gets or sets a value that indicates whether items corresponding to empty groups should be displayed.</summary>
            <returns>true to not display empty groups; otherwise, false. The default is false.</returns>
        </member>
        <member name="P:Intersoft.Client.Framework.GroupStyle.Panel">
            <summary>Gets or sets a template that creates the panel used to layout the items.</summary>
            <returns>An <see cref="T:System.Windows.Controls.ItemsPanelTemplate" /> object that creates the panel used to layout the items.</returns>
        </member>
        <member name="T:Intersoft.Client.Framework.WindowEventHandler">
            <summary>
            Represents the method that will handle the common events for windows.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A WindowEventArgs that contains the event data.</param>
        </member>
        <member name="T:Intersoft.Client.Framework.WindowOperationEventHandler">
            <summary>
            Represents the method that will handle the operation-related events for windows.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A WindowOperationEventArgs that contains the event data.</param>
        </member>
        <member name="T:Intersoft.Client.Framework.WindowContextMenuEventHandler">
            <summary>
            Represents the method that will handle the context menu events for windows.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A WindowContextMenuEventArgs that contains the event data.</param>
        </member>
        <member name="T:Intersoft.Client.Framework.WindowActivationEventHandler">
            <summary>
            Represents the method that will handle the window activation events.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A WindowActivationEventArgs that contains the event data.</param>
        </member>
        <member name="T:Intersoft.Client.Framework.WindowEventArgs">
            <summary>
            Provides data for common window events such as Opening, Closing, Activated and more.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.WindowEventArgs.Window">
            <summary>
            The window object that relates to the event context.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.WindowOperationEventArgs">
            <summary>
            Provides data for operation-related window events such as WindowStateChanging and WindowStateChanged event.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.WindowOperationEventArgs.StateData">
            <summary>
            Provides the state data for the designated window operation.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.WindowContextMenuEventArgs">
            <summary>
            Provides data for WindowContextMenu event.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.WindowContextMenuEventArgs.ContextMenu">
            <summary>
            Gets the ContextMenu object associated to the window.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.WindowActivationEventArgs">
            <summary>
            Provides data for WindowReactivated event.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.WindowActivationEventArgs.Options">
            <summary>
            Gets the WindowOptions object that passed to the window during reactivation process.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.WindowEvents">
            <summary>
            Provides the common events for window and window-related operations.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.WindowEvents.ReactivatedEvent">
            <summary>
            Identifies the WindowStateChanging routed event.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.WindowEvents.WindowStateChangingEvent">
            <summary>
            Identifies the WindowStateChanging routed event.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.WindowEvents.WindowStateChangedEvent">
            <summary>
            Identifies the WindowStateChanged routed event.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.WindowEvents.CreatingEvent">
            <summary>
            Identifies the Creating routed event.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.WindowEvents.CreatedEvent">
            <summary>
            Identifies the Created routed event.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.WindowEvents.ClosingEvent">
            <summary>
            Identifies the Closing routed event.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.WindowEvents.ClosedEvent">
            <summary>
            Identifies the Closed routed event.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.WindowEvents.DestroyedEvent">
            <summary>
            Identifies the Destroyed routed event.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.WindowEvents.ActivatedEvent">
            <summary>
            Identifies the Activated routed event.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.WindowEvents.DeactivatedEvent">
            <summary>
            Identifies the Deactivated routed event.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.WindowEvents.OpeningEvent">
            <summary>
            Identifies the Opening routed event.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.WindowEvents.OpenedEvent">
            <summary>
            Identifies the Opened routed event.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.WindowEvents.MovedEvent">
            <summary>
            Identifies the Moved routed event.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.WindowEvents.ResizedEvent">
            <summary>
            Identifies the Resized routed event.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.WindowEvents.SystemContextMenuEvent">
            <summary>
            Identifies the SystemContextMenu routed event.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.WindowEvents.BusyChangedEvent">
            <summary>
            Identifies the BusyChanged routed event.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.TransformInfo">
            <summary>
            Provides class definition for transform information. Used in drag drop transformation approach.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.TransformInfo.Content">
            <summary>
            Gets or sets content data.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.TransformInfo.ContentType">
            <summary>
            Gets or sets content type data.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.TransformInfo.Image">
            <summary>
            Gets or sets image data.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.TransformInfo.PreferredContentSource">
            <summary>
            Gets or sets preffered content source.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.TransformInfo.Text">
            <summary>
            Gets or sets text data.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.TransformInfo.Children">
            <summary>
            Gets children collection.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.Regions.Adapters.ItemsControlRegionAdapter">
            <summary>
            Represents a region adapter for items controls.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.Adapters.ItemsControlRegionAdapter.Adapt(Intersoft.Client.Framework.Regions.IRegion,System.Windows.Controls.ItemsControl)">
            <summary>
            Adapts an object (typically a control) to the specified <see cref="T:Intersoft.Client.Framework.Regions.IRegion"/>.
            </summary>
            <param name="region">The region of which object to adapt.</param>
            <param name="regionTarget">The object to adapt.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.Adapters.ItemsControlRegionAdapter.SynchronizeViews">
            <summary>
            Called when the adapter performs view synchronization.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.Adapters.ItemsControlRegionAdapter.GetViews">
            <summary>
            Returns the existing views registered in the <see cref="T:Intersoft.Client.Framework.Regions.IRegion"/> associated with this adapter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.Adapters.ItemsControlRegionAdapter.Remove(System.Object)">
            <summary>
            Removes the specified view from the region.
            </summary>
            <param name="view">The view to remove.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.Adapters.ItemsControlRegionAdapter.Release(Intersoft.Client.Framework.Regions.IRegion)">
            <summary>
            Releases the adapter from the specified <see cref="T:Intersoft.Client.Framework.Regions.IRegion"/> and frees the resources allocated by the adapter.
            </summary>
            <param name="region">The region to release.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.Adapters.ItemsControlRegionAdapter.Dispose">
            <summary>
            Called when the adapter is disposed.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.INavigationState">
            <summary>
            Defines the common methods to support navigation state.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.INavigationState.NavigationState">
            <summary>
            Gets or sets a value indicating the unique resource identifier (URI) of the control that supports navigation state.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.INavigationSource">
            <summary>
            Provides the common properties to support navigation.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.INavigationSource.NavigateUri">
            <summary>
            Gets or sets a value indicating the unique resource identifier (URI) to navigate to.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.INavigationSource.TargetName">
            <summary>
            Gets or sets the target frame or window name to display the navigated content.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.NavigationOptions">
            <summary>
            Provides basic options for navigation. 
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.NavigationOptions.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Intersoft.Client.Framework.NavigationOptions"/> class.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.NavigationOptions.#ctor(System.Uri)">
            <summary>
            Creates a new instance of <see cref="T:Intersoft.Client.Framework.NavigationOptions"/> class with the URI to navigate.
            </summary>
            <param name="uri">The unified resource identifier (URI) to navigate.</param>
        </member>
        <member name="P:Intersoft.Client.Framework.NavigationOptions.ExtraData">
            <summary>
            Gets or sets the extra data associated with the navigation session.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.NavigationOptions.NavigateUri">
            <summary>
            Gets or sets a value indicating the unique resource identifier (URI) to navigate to.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.NavigationOptions.TargetName">
            <summary>
            Gets or sets the target frame or window name to display the navigated content.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.INavigationHost">
            <summary>
            Defines the properties required to implement a navigation host.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.INavigationHost.Source">
            <summary>
            Gets or sets a value that indicates the source URI of the navigation host.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.INavigationHost.NavigationState">
            <summary>
            Gets o sets a value that indicates the current navigation state.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.INavigationHost.IsPrimaryNavigator">
            <summary>
            Gets or sets a value indicating whether the navigation host is the primary navigator.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.LocalizationConverter">
            <summary>
            Converts one or more values to be formatted using the text specified in localization manager, which
            can be bound to a dependency property.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.LocalizationConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the <paramref name="values"/> to a localized string.
            </summary>
            <param name="values">The values to format.</param>
            <param name="targetType">The target output type.</param>
            <param name="parameter">Optional parameter.</param>
            <param name="culture">The culture to use in the format operation.</param>
            <returns>The formatted and localized string.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.LocalizationConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.DataProvider">
            <summary>
            Provides utility methods to extract data from an enum value.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.DataProvider.GetData(System.Type)">
            <summary>
            Gets the data extracted from given enum type.
            </summary>
            <param name="dataType">Enum type.</param>
            <returns>Enum values.</returns>
        </member>
        <member name="P:Intersoft.Client.Framework.DataProvider.DataType">
            <summary>
            Gets or sets the type of enum to be extracted.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.DataProvider.Data">
            <summary>
            Gets the data extracted from given enum type.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.Containers.ContainerLifetime">
            <summary>
            A lifetime manager that scopes the lifetime of created instances to the lifetime of the
            container.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.ContainerLifetime.GetInstance(Intersoft.Client.Framework.Containers.IRegistration)">
            <summary>
            Gets the instance from the container instance cache, if available, otherwise creates a new
            instance and caches it. This effectively make the instance an application scoped Singleton.
            </summary>
            <param name="registration">The creator (registration) to create a new instance.</param>
            <returns>The instance.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.ContainerLifetime.InvalidateInstanceCache(Intersoft.Client.Framework.Containers.IRegistration)">
            <summary>
            Invalidates the cached value.
            </summary>
            <param name="registration">The Registration which is having its value invalidated</param>
        </member>
        <member name="T:Intersoft.Client.Framework.WeakEventListener`3">
            <summary>
            Implements a weak event listener that allows the owner to be garbage collected if its only remaining link is an event handler.
            </summary>
            <typeparam name="TInstance">Type of instance listening for the event.</typeparam>
            <typeparam name="TSource">Type of source for the event.</typeparam>
            <typeparam name="TEventArgs">Type of event arguments for the event.</typeparam>
        </member>
        <member name="M:Intersoft.Client.Framework.WeakEventListener`3.#ctor(`0)">
            <summary>
            Initializes a new instances of the WeakEventListener class.
            </summary>
            <param name="instance">Instance subscribing to the event.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.WeakEventListener`3.OnEvent(`1,`2)">
            <summary>
            Handler for the subscribed event calls OnEventAction to handle it.
            </summary>
            <param name="source">Event source.</param>
            <param name="eventArgs">Event arguments.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.WeakEventListener`3.Detach">
            <summary>
            Detaches from the subscribed event.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.WeakEventListener`3.WeakInstance">
            <summary>
            WeakReference to the instance listening for the event.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.WeakEventListener`3.OnEventAction">
            <summary>
            Gets or sets the method to call when the event fires.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.WeakEventListener`3.OnDetachAction">
            <summary>
            Gets or sets the method to call when detaching from the event.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.Resources">
            <summary>
            Provides helper methods related to retrieving resources from assemblies.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.Resources.GetResourceInfo(System.String)">
            <summary>
            Gets the resource info from given resource path.
            </summary>
            <param name="resource">Resource path.</param>
            <returns>Resource info.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Resources.GetImageResource(System.String)">
            <summary>
            Gets the image resource from given resource path.
            </summary>
            <param name="resource">Resource path.</param>
            <returns>Bitmap image.</returns>
        </member>
        <member name="T:Intersoft.Client.Framework.ISBehavior`1">
            <summary>
            Serves as the base class for all Intersoft Client UI behaviors
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISBehavior`1.GetAssociatedObject">
            <summary>
            Gets the associated object.
            </summary>
            <returns>Associated object.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.ISBehavior`1.GetAssociatedType">
            <summary>
            Gets the associated type
            </summary>
            <returns>Associated type.</returns>
        </member>
        <member name="P:Intersoft.Client.Framework.ISBehavior`1.Framework">
            <summary>
            Gets the entity framework.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISBehavior`1.IsInDesignMode">
            <summary>
            Gets a value indicating whether the control is in design mode (development).
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISBehavior`1.Platform">
            <summary>
            Gets a value that indicates the current client platform.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISBehavior`1.Product">
            <summary>
            Product Info.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.IWindow">
            <summary>
            Provides the properties, methods and events to support IWindow implementation.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.IWindow.IsFeatureSupported(System.Object)">
            <summary>
            Determines whether the specified windowing feature is supported.
            </summary>
            <param name="feature">The feature to be checked.</param>
            <returns>True if the specified feature is supported.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.IWindow.Show">
            <summary>
            Show and activates this window.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.IWindow.Close">
            <summary>
            Close this window.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.IWindow.GetImplementationRoot">
            <summary>
            Gets the implementation root of the control.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.IWindow.WindowName">
            <summary>
            Gets or sets the name that identify this window.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.IWindow.WindowID">
            <summary>
            Gets or sets the unique identifier (UID) for this control.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.IWindow.ParentControl">
            <summary>
            Gets or sets the ItemsControl that host this control.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.IWindow.Owner">
            <summary>
            Gets or sets the owner visual element of the control.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.IWindow.Left">
            <summary>
            Gets or sets the left position of the control.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.IWindow.Top">
            <summary>
            Gets or sets the top position of the control.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.IWindow.Width">
            <summary>
            Gets or sets the width of the control.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.IWindow.Height">
            <summary>
            Gets or sets the height of the control.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.IWindow.RuntimeZIndex">
            <summary>
            Gets or sets the z-index order of the control.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.IWindow.IsActive">
            <summary>
            Gets or sets the active state of the control.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.IWindow.IsClosed">
            <summary>
            Gets or sets whether the window is closed and should be destroyed permanently.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.IWindow.IsClientVisible">
            <summary>
            Specifies whether the control should be visible initially at runtime.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.IWindow.Text">
            <summary>
            Gets the text that represents this window.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.IWindow.Icon">
            <summary>
            Gets the icon image that represents this window.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.IWindow.IconLarge">
            <summary>
            Gets the large version of the icon image that represents this window.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.IWindow.Thumbnail">
            <summary>
            Gets the thumbnail image of the current window content.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.IWindow.GroupName">
            <summary>
            Specifies the group name of this window.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.IWindow.DataContext">
            <summary>
            Specifies the data context associated to this window.
            </summary>
        </member>
        <member name="E:Intersoft.Client.Framework.IWindow.Opening">
            <summary>
            Occurs when a window is about to show.
            </summary>
        </member>
        <member name="E:Intersoft.Client.Framework.IWindow.Opened">
            <summary>
            Occurs when a window is opened.
            </summary>
        </member>
        <member name="E:Intersoft.Client.Framework.IWindow.Closed">
            <summary>
            Occurs when a window is closed.
            </summary>
        </member>
        <member name="E:Intersoft.Client.Framework.IWindow.Closing">
            <summary>
            Occurs when a window is about to close.
            </summary>
        </member>
        <member name="E:Intersoft.Client.Framework.IWindow.Destroyed">
            <summary>
            Occurs when a window is permanently closed and destroyed to release memory resources.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.IApplicationHost">
            <summary>
            Defines the properties, method and events required for an application host.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.IApplicationHost.ApplicationID">
            <summary>
            Gets the unique identifier that represents the application it contains.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.IApplicationHost.ApplicationUri">
            <summary>
            Gets the unique resource identifier (URI) of the associated application.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.IApplicationHost.StartupParameters">
            <summary>
            Gets the startup parameters of the associated application.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.IModalWindow">
            <summary>
            Provides the properties, methods and events to support modal window implementation.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.IModalWindow.ShowDialog(Intersoft.Client.Framework.IWindow,System.Action{Intersoft.Client.Framework.DialogResult})">
            <summary>
            Show the dialog box to the foreground window.
            </summary>
            <param name="owner">The owner of the modal window. When specified, the dialog box will appear centered against the owner.</param>
            <param name="closeCallback">The callback that invoked when the modal window is closed.</param>
        </member>
        <member name="P:Intersoft.Client.Framework.IModalWindow.DialogResult">
            <summary>
            Gets or sets the value that represents the result of the modal window.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.ApplicationEventArgs">
            <summary>
            Provides data for Application event.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.SystemEventArgs">
            <summary>
            Provides data for System event.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.NetworkConnectivityEventArgs">
            <summary>
            Provides data for NetworkConnectivity event.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.ScreenStateChangedEventArgs">
            <summary>
            Provides data for ScreenStateChanged event.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.ApplicationActivityDetailsEventArgs">
            <summary>
            Provides data for ApplicationActivityDetails event.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.ApplicationActivityEventArgs">
            <summary>
            Provides data for ApplicationActivity event.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.ApplicationDownloadingEventArgs">
            <summary>
            Provides data for ApplicationDownloading event.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.ApplicationDownloadFailedEventArgs">
            <summary>
            Provides data for ApplicationDownloadFailed event.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.ApplicationInstallFailedEventArgs">
            <summary>
            Provides data for ApplicationInstallFailed event.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.ApplicationDownloadCancelledEventArgs">
            <summary>
            Provides data for ApplicationDownloadCancel event.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.Input.DelegateCommand">
            <summary>
            Defines a command that implements ICommand which passes CanExecute and Executed as delegated method.
            The DelegateCommand is commonly used in M-V-VM pattern application development.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.Input.DelegateCommand.CanExecute(System.Object)">
            <summary>
            Determines whether the command can be executed.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.Input.DelegateCommand.Execute(System.Object)">
            <summary>
            Execeutes the command.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.Input.DelegateCommand.RaiseCanExecuteChanged">
            <summary>
             Raises the CanExecuteChaged event.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.Input.DelegateCommand.OnCanExecuteChanged">
            <summary>
            Protected virtual method to raise CanExecuteChanged event.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.Input.DelegateCommand.IsAutomaticRequeryDisabled">
            <summary>
            Specifies whether automatic require should be disabled.
            </summary>
        </member>
        <member name="E:Intersoft.Client.Framework.Input.DelegateCommand.CanExecuteChanged">
            <summary>
            
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.Input.HybridDelegateCommand">
            <summary>
            Defines a command that implements ICommand which passes CanExecute and Executed as delegated method,
            and also provides basic UI data such as Text, Image and NoExecuteBehavior which can be used as binding source in the View.
            The DelegateCommand is commonly used in M-V-VM pattern application development.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.Input.HybridDelegateCommand.CanExecute(System.Object)">
            <summary>
            Determines whether the command can be executed.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.Input.HybridDelegateCommand.Execute(System.Object)">
            <summary>
            Execeutes the command.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.Input.HybridDelegateCommand.RaiseCanExecuteChanged">
            <summary>
             Raises the CanExecuteChaged event.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.Input.HybridDelegateCommand.OnCanExecuteChanged">
            <summary>
            Protected virtual method to raise CanExecuteChanged event.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.Input.HybridDelegateCommand.IsAutomaticRequeryDisabled">
            <summary>
            Specifies whether automatic require should be disabled.
            </summary>
        </member>
        <member name="E:Intersoft.Client.Framework.Input.HybridDelegateCommand.CanExecuteChanged">
            <summary>
            
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.Input.CommandUIData">
            <summary>
            Provides UI data related to command.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.Input.DelegateCommand`1">
            <summary>
            Defines a command that implements ICommand which passes CanExecute and Executed as delegated method.
            The DelegateCommand is commonly used in M-V-VM pattern application development.
            </summary>
            <typeparam name="T">Type of the parameter passed to the delegates</typeparam>
        </member>
        <member name="M:Intersoft.Client.Framework.Input.DelegateCommand`1.#ctor(System.Action{`0},System.Func{`0,System.Boolean},System.Boolean)">
            <summary>
                Constructor
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.DataTemplateSelector">
            <summary>
            Represents data template selector.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.DataTemplateSelector.SelectTemplate(System.Object,System.Windows.DependencyObject)">
            <summary>
            Select Template.
            </summary>
            <param name="item">Item.</param>
            <param name="container">Container.</param>
            <returns>Template</returns>
        </member>
        <member name="T:Intersoft.Client.Framework.SelectionChangedEventHandler">
            <summary>
            Represents the method that will handle the SelectionChanged routed event.
            </summary>
            <param name="sender">The object where the event handler is attached.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="T:Intersoft.Client.Framework.SelectionChangedEventArgs">
            <summary>
            Provides data for SelectionChanged event.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.SelectionChangedEventArgs.#ctor(Intersoft.Client.Framework.RoutedEvent,System.Collections.IList,System.Collections.IList)">
            <summary>
            Initializes a new instance of the SelectionChangedEventArgs class. 
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.SelectionChangedEventArgs.InvokeEventHandler(System.Delegate,System.Object)">
            <summary>
            Invoke event handler.
            </summary>
            <param name="genericHandler">Generic handler.</param>
            <param name="genericTarget">Generic target.</param>
        </member>
        <member name="P:Intersoft.Client.Framework.SelectionChangedEventArgs.AddedItems">
            <summary>
            Gets collection of added items.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.SelectionChangedEventArgs.RemovedItems">
            <summary>
            Gets collection of removed items.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.ISHierarchicalMultipleSelectionControl">
            <summary>
            Serves as the base class for all Intersoft Hierarchical Multiple Selection controls.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ISHierarchicalMultipleSelectionControl.SelectedItemsProperty">
            <summary>
            Identifies the SelectedItems dependency property.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ISHierarchicalMultipleSelectionControl.SelectionModeInternalProperty">
            <summary>
            Identifies the SelectionMode dependency property.
            </summary>        
        </member>
        <member name="M:Intersoft.Client.Framework.ISHierarchicalMultipleSelectionControl.#ctor">
            <summary>
            Initializes a new instance of ISHierarchicalMultipleSelectionControl class.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHierarchicalMultipleSelectionControl.ClearSelection(System.Object)">
            <summary>
            Clear current selection.
            </summary>
            <param name="except">Except specified object.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHierarchicalMultipleSelectionControl.ClearSelection">
            <summary>
            Clear current selection.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHierarchicalMultipleSelectionControl.InitializeSelectedItems">
            <summary>
            Initialize selected items collection.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHierarchicalMultipleSelectionControl.InitializeSelection(System.Windows.DependencyObject,System.Object)">
            <summary>
            Initialize selection.
            </summary>
            <param name="element">The container element used to display the specified item.</param>
            <param name="item">The item to display.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHierarchicalMultipleSelectionControl.IsMultipleSelection">
            <summary>
            Gets a value that indicates whether the current action is multiple selection.        
            </summary>
            <returns>Value that indicates whether the current action is multiple selection. True if multiple selection.</returns>        
        </member>
        <member name="M:Intersoft.Client.Framework.ISHierarchicalMultipleSelectionControl.OnSelectedItemChanged(System.Object,System.Object)">
            <summary>
            Called when the value of the SelectedItem property changes.
            </summary>
            <param name="oldItem">The old value of the SelectedItem property.</param>
            <param name="newItem">The new value of the SelectedItem property.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHierarchicalMultipleSelectionControl.OnSelectionModeChanged(System.Object,System.Object)">
            <summary>
            Occurs when selection mode property is changed.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHierarchicalMultipleSelectionControl.Select(System.Int32,System.Boolean)">
            <summary>
            Select the item on specified index.
            </summary>
            <param name="index">Index.</param>
            <param name="multipleSelection">Is multiple selection.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHierarchicalMultipleSelectionControl.Select(System.Int32)">
            <summary>
            Select the item on specified index.
            </summary>
            <param name="index">Index.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHierarchicalMultipleSelectionControl.Select(System.Object,System.Boolean)">
            <summary>
            Select the specified item.
            </summary>
            <param name="item">Item.</param>
            <param name="multipleSelection">Is multiple selection.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHierarchicalMultipleSelectionControl.SelectRange(System.Int32,System.Int32)">
            <summary>
            Select the item from the specified range.
            </summary>
            <param name="start"></param>
            <param name="end"></param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHierarchicalMultipleSelectionControl.Select(System.Object)">
            <summary>
            Select the specified item.
            </summary>
            <param name="item">Item.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHierarchicalMultipleSelectionControl.Unselect(System.Int32,System.Boolean)">
            <summary>
            Unselects item at specified index.
            </summary>
            <param name="index">Index.</param>
            <param name="multipleSelection">Is multiple selection.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHierarchicalMultipleSelectionControl.Unselect(System.Int32)">
            <summary>
            Unselect the item at specified index.
            </summary>
            <param name="index">Index.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHierarchicalMultipleSelectionControl.Unselect(System.Object,System.Boolean)">
            <summary>
            Unselect the specified item.
            </summary>
            <param name="item">Item.</param>
            <param name="multipleSelection">Is multiple selection.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHierarchicalMultipleSelectionControl.Unselect(System.Object)">
            <summary>
            Unselect the specified item.
            </summary>
            <param name="item">Item.</param>
        </member>
        <member name="P:Intersoft.Client.Framework.ISHierarchicalMultipleSelectionControl.SelectedItems">
            <summary>
            Gets or sets the selected items
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISHierarchicalMultipleSelectionControl.SelectionModeInternal">
            <summary>
            Gets or sets the selection mode.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISHierarchicalMultipleSelectionControl.SuspendCollectionChanged">
            <summary>
            Internal usage.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISHierarchicalMultipleSelectionControl.InitialItem">
            <summary>
            Internal usage.
            </summary>        
        </member>
        <member name="P:Intersoft.Client.Framework.ISHierarchicalMultipleSelectionControl.SelectedItemsCollection">
            <summary>
            Gets selected items collection.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.StoryboardManager">
            <summary>
            Provides helper methods related initializing a storyboard.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.StoryboardManager.CreateDoubleAnimationStoryboard(System.Windows.UIElement,System.String,System.Double,System.Double)">
            <summary>
            Create simple double animation storyboard.
            </summary>
            <param name="targetElement">Target element.</param>
            <param name="targetProperty">Target property.</param>
            <param name="duration">Duration.</param>
            <param name="value">Designated value after specified duration.</param>
            <returns>Storyboard.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.StoryboardManager.CreateDoubleAnimation(System.Windows.UIElement,System.String,System.Double,System.Double)">
            <summary>
            Create simple double animation storyboard.
            </summary>
            <param name="targetElement">Target element.</param>
            <param name="targetProperty">Target property.</param>
            <param name="duration">Duration.</param>
            <param name="value">Designated value after specified duration.</param>
            <returns>Animation.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.StoryboardManager.CreateDoubleAnimationUsingKeyFrames(System.Windows.UIElement,System.String,System.Double,System.Double,System.Double,System.Windows.Point,System.Windows.Point)">
            <summary>
            Create a simple double animation using key frames with a key spline on second frame.
            </summary>
            <param name="targetElement">Target element.</param>
            <param name="targetProperty">Target property.</param>
            <param name="duration">Duration.</param>
            <param name="from">From value.</param>
            <param name="to">Designated value after specified duration.</param>
            <param name="keySpline1">Key Spline - point1</param>
            <param name="keySpline2">Key Spline - point2</param>
            <returns>Storyboard.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.StoryboardManager.CreateDoubleAnimationUsingKeyFrames(System.Windows.UIElement,System.String,System.Double,System.Double,System.Double,System.Double,System.Windows.Point,System.Windows.Point)">
            <summary>
            Create a simple double animation using key frames with a key spline on second frame.
            </summary>
            <param name="targetElement">Target element.</param>
            <param name="targetProperty">Target property.</param>
            <param name="first">Starting ticks</param>
            <param name="second">End ticks.</param>
            <param name="from">From value.</param>
            <param name="to">Designated value after specified duration.</param>
            <param name="keySpline1">Key Spline - point1</param>
            <param name="keySpline2">Key Spline - point2</param>
            <returns>Storyboard.</returns>        
        </member>
        <member name="M:Intersoft.Client.Framework.StoryboardManager.CloneStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.FrameworkElement)">
            <summary>
            Clone the specified storyboard.
            </summary>
            <param name="sb">The storyboard to be cloned.</param>
            <param name="targetElement">The target element to be assigned in each Timeline of the cloned storyboard.</param>
            <returns>The cloned storyboard.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.StoryboardManager.CloneKeySpline(System.Windows.Media.Animation.KeySpline)">
            <summary>
            Clone the specified key spline.
            </summary>
            <param name="spline">The key spline to be cloned.</param>
            <returns>The cloned key spline.</returns>
        </member>
        <member name="T:Intersoft.Client.Framework.DownloadEventArgs">
            <summary>
            Provides data for Download event.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.DownloadProgressEventArgs">
            <summary>
            Provides data for DownloadProgress event.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.DownloadCompletedEventArgs">
            <summary>
            Provides data for DownloadCompleted event.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.DownloadCancelledEventArgs">
            <summary>
            Provides data for DownloadCancelled event.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.DownloadFailedEventArgs">
            <summary>
            Provides data for DownloadFailed event.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.PackageDownloadedEventArgs">
            <summary>
            Provides data for PackageDownloaded event.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.Input.MouseButtonEventArgs">
            <summary>
            Provides data for MouseButton event.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.Input.MouseEventArgs">
            <summary>
            Provides data for Mouse event.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.WindowOptions">
            <summary>
            Provides basic settings for window creation. 
            This class is derived from DependencyObject to support XAML data binding in styles and templates.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.WindowOptions.WindowNameProperty">
            <summary>
            Identifies the WindowName dependency property.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.WindowOptions.UIDProperty">
            <summary>
            Identifies the UID dependency property.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.WindowOptions.UriProperty">
            <summary>
            Identifies the Uri dependency property.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.WindowOptions.ForceSingleInstanceProperty">
            <summary>
            Identifies the ForceSingleInstance dependency property.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.WindowOptions.WindowGroupNameProperty">
            <summary>
            Identifies the WindowGroupName dependency property.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.WindowOptions.NavigationBarVisibilityProperty">
            <summary>
            Identifies the NavigationBarVisibility dependency property.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.WindowOptions.WindowHeightProperty">
            <summary>
            Identifies the WindowHeight dependency property.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.WindowOptions.WindowWidthProperty">
            <summary>
            Identifies the WindowWidth dependency property.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.WindowOptions.WindowTitleProperty">
            <summary>
            Identifies the WindowTitle dependency property.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.WindowOptions.WindowIconProperty">
            <summary>
            Identifies the WindowIcon dependency property.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.WindowOptions.StartupParametersProperty">
            <summary>
            Identifies the StartupParameters dependency property.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.WindowOptions.ReactivateExistingInstanceProperty">
            <summary>
            Identifies the ReactivateExistingInstance dependency property.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.WindowOptions.OverrideWindowSettingsProperty">
            <summary>
            Identifies the OverrideWindowSettings dependency property.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.WindowOptions.TagProperty">
            <summary>
            Identifies the Tag dependency property.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.WindowOptions.Tag">
            <summary>
            Gets or sets a custom object to pass onto the target window.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.WindowOptions.OverrideWindowSettings">
            <summary>
            Determines whether the specified window options should be applied to the target window regardless of the property's values.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.WindowOptions.UID">
            <summary>
            Specifies the unique identifier of this control.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.WindowOptions.Uri">
            <summary>
            Specifies the URI for the application or navigation source.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.WindowOptions.ForceSingleInstance">
            <summary>
            When an existing instance is available, setting this property to true will activate
            the existing instance. Consequently, the application launch for this session will be terminated.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.WindowOptions.WindowName">
            <summary>
            Specifies the name associated to the new window.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.WindowOptions.WindowGroupName">
            <summary>
            Specifies a name that determines the group where the new window belongs to.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.WindowOptions.NavigationBarVisibility">
            <summary>
            Specifies the visibility state of the navigation bar.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.WindowOptions.WindowHeight">
            <summary>
            Specifies the window's height.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.WindowOptions.WindowWidth">
            <summary>
            Specifies the window's width.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.WindowOptions.WindowTitle">
            <summary>
            Specifies the window's title.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.WindowOptions.WindowIcon">
            <summary>
            Specifies the window's icon.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.WindowOptions.StartupParameters">
            <summary>
            Specifies custom data to be passed to the new window.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.WindowOptions.ReactivateExistingInstance">
            <summary>
            Gets or sets a value indicating whether an existing matching instance should be reactivated instead of launching a new window.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.Regions.UIMetadataAttribute">
            <summary>
            Represents an attribute to describe common user interface properties.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.Regions.UIMetadataAttribute.Header">
            <summary>
            Gets or sets a value that represents header content.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.Regions.UIMetadataAttribute.Icon">
            <summary>
            Gets or sets the URI that represents an icon.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.Regions.UIMetadataAttribute.LargeIcon">
            <summary>
            Gets or sets the URI that represents a large icon.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.Regions.UIMetadataAttribute.DisplayMode">
            <summary>
            Gets or sets a value that represents content type.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.Regions.RegionManager">
            <summary>
            Represents an implementation of <see cref="T:Intersoft.Client.Framework.Regions.IRegionManager"/> which is responsible to manage the collection of regions, as well as attaching and releasing regions to controls.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.Regions.RegionManager.IsRegionScopeProperty">
            <summary>
            Identifies the IsRegionScope attached property.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.Regions.RegionManager.ScopeNameProperty">
            <summary>
            Identifies the ScopeName attached property.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.Regions.RegionManager.EnableNavigableViewDiscoveryProperty">
            <summary>
            Identifies the EnableNavigableViewDiscovery attached property.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.RegionManager.GetEnableNavigableViewDiscovery(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the EnableNavigableViewDiscovery attached property.
            </summary>
            <param name="obj">The target element.</param>
            <returns>A value indicating whether the navigable view discovery is enabled in the target element.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.RegionManager.SetEnableNavigableViewDiscovery(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the EnableNavigableViewDiscovery attached property.
            </summary>
            <param name="obj">The target element.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.RegionManager.GetIsRegionScope(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the IsRegionScope attached property.
            </summary>
            <param name="obj">The target element.</param>
            <returns>A value indicating whether the target element is region scope.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.RegionManager.SetIsRegionScope(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the IsRegionScope attached property.
            </summary>
            <param name="obj">The target element.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.RegionManager.GetScopeName(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the ScopeName attached property.
            </summary>
            <param name="obj">The target element.</param>
            <returns>The region scope name of the attached element.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.RegionManager.SetScopeName(System.Windows.DependencyObject,System.String)">
            <summary>
            Sets the ScopeName attached property.
            </summary>
            <param name="obj">The target element.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.RegionManager.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Intersoft.Client.Framework.Regions.RegionManager"/> class.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.RegionManager.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Intersoft.Client.Framework.Regions.RegionManager"/> class.
            </summary>
            <param name="name">The name of the region manager to create.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.RegionManager.#ctor(System.Windows.DependencyObject,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Intersoft.Client.Framework.Regions.RegionManager"/> class.
            </summary>
            <param name="host">The element associated to the region manager.</param>
            <param name="name">The name of the region manager to create.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.RegionManager.AddViewToRegion(System.String,System.Object)">
            <summary>
            Adds the view to the specified region name.
            </summary>
            <param name="regionName">The region name of which the view will be added to.</param>
            <param name="view">The view object (typically control) to be added.</param>
            <returns>Returns the <see cref="T:Intersoft.Client.Framework.Regions.IRegionManager"/> instance that contains the region.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.RegionManager.AddViewToRegion(System.String,System.Object,System.String)">
            <summary>
            Adds the view to the specified region name.
            </summary>
            <param name="regionName">The region name of which the view will be added to.</param>
            <param name="view">The view object (typically control) to be added.</param>
            <param name="viewName">The name associated to the view.</param>
            <returns>Returns the <see cref="T:Intersoft.Client.Framework.Regions.IRegionManager"/> instance that contains the region.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.RegionManager.RegisterViewWithRegion(System.String,System.String,System.Type,System.String)">
            <summary>
            Registers a type to the specified region scope name and region name.
            </summary>
            <param name="regionScopeName">The region scope name of which the view will be registered to.</param>
            <param name="regionName">The region name of which the view will be registered to.</param>
            <param name="viewType">The type of the view to be registered.</param>
            <returns>Returns the <see cref="T:Intersoft.Client.Framework.Regions.IRegionManager"/> instance that contains the region.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.RegionManager.RegisterNavigableView(System.String,System.String,System.Type)">
            <summary>
            Registers a type with the specified mapping to the target frame.
            </summary>
            <param name="frameName">The frame name that will be the target of the navigable view.</param>
            <param name="uri">The URI to be registered.</param>
            <param name="viewType">The type of the view to be registered.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.RegionManager.RegisterNavigableView(System.String,System.Type)">
            <summary>
            Registers a type with the specified mapping to the target frame.
            </summary>
            <param name="uri">The URI to be registered.</param>
            <param name="viewType">The type of the view to be registered.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.RegionManager.RegisterViewWithRegion(System.String,System.Type)">
            <summary>
            Registers a type to the specified region scope name and region name.
            </summary>
            <param name="regionName">The region name of which the view will be registered to.</param>
            <param name="viewType">The type of the view to be registered.</param>
            <returns>Returns the <see cref="T:Intersoft.Client.Framework.Regions.IRegionManager"/> instance that contains the region.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.RegionManager.GetUriTypeMappings">
            <summary>
            Gets the URI and type mappings registered in this region manager.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.RegionManager.GetRegisteredViews(Intersoft.Client.Framework.Regions.IRegion)">
            <summary>
            Gets the collection of view instances registered in this region manager.
            </summary>
            <param name="region">The region of which views to retrieve.</param>
            <returns>A collection of registered view instances</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.RegionManager.Dispose">
            <summary>
            Called when the <see cref="T:Intersoft.Client.Framework.Regions.RegionManager"/> is disposed.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.RegionManager.CreateInstance(System.Type)">
            <summary>
            Creates an instance of a registered view <see cref="T:System.Type"/>. 
            </summary>
            <param name="type">Type of the registered view.</param>
            <returns>Instance of the registered view.</returns>
        </member>
        <member name="P:Intersoft.Client.Framework.Regions.RegionManager.Adapters">
            <summary>
            Gets the default region adapter that will be used in region manager instances.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.Regions.RegionManager.Host">
            <summary>
            Gets or sets the element that hosts the region manager.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.Regions.RegionManager.Name">
            <summary>
            Gets or sets the name of the region manager.
            </summary>
        </member>
        <member name="E:Intersoft.Client.Framework.Regions.RegionManager.NavigableViewAdded">
            <summary>
            Raised when a navigable view is added to the region manager.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.Regions.RegionManager.Regions">
            <summary>
            Gets the collection of <see cref="T:Intersoft.Client.Framework.Regions.IRegion"/> registered in this region manager.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.RegionManager.RegionCollection.#ctor(Intersoft.Client.Framework.Regions.IRegionManager)">
            <summary>
            
            </summary>
            <param name="regionManager"></param>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.RegionManager.RegionCollection.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.RegionManager.RegionCollection.Add(Intersoft.Client.Framework.Regions.IRegion)">
            <summary>
            
            </summary>
            <param name="region"></param>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.RegionManager.RegionCollection.Add(Intersoft.Client.Framework.Regions.IRegion,System.String)">
            <summary>
            
            </summary>
            <param name="region"></param>
            <param name="regionName"></param>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.RegionManager.RegionCollection.Remove(System.String)">
            <summary>
            
            </summary>
            <param name="regionName"></param>
            <returns></returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.RegionManager.RegionCollection.Contains(System.String)">
            <summary>
            
            </summary>
            <param name="regionName"></param>
            <returns></returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.RegionManager.RegionCollection.Dispose">
            <summary>
            Called when the RegionCollection is disposed.
            </summary>
        </member>
        <member name="E:Intersoft.Client.Framework.Regions.RegionManager.RegionCollection.CollectionChanged">
            <summary>
            
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.Regions.RegionManager.RegionCollection.Item(System.String)">
            <summary>
            
            </summary>
            <param name="regionName"></param>
            <returns></returns>
        </member>
        <member name="T:Intersoft.Client.Framework.Regions.Adapters.SelectionControlRegionAdapter">
            <summary>
            Represents a region adapter for selection controls.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.Adapters.SelectionControlRegionAdapter.Adapt(Intersoft.Client.Framework.Regions.IRegion,Intersoft.Client.Framework.ISSelectionControl)">
            <summary>
            Adapts an object (typically a control) to the specified <see cref="T:Intersoft.Client.Framework.Regions.IRegion"/>.
            </summary>
            <param name="region">The region of which object to adapt.</param>
            <param name="regionTarget">The object to adapt.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.Adapters.SelectionControlRegionAdapter.CanActivate">
            <summary>
            Determines whether the specified <see cref="T:Intersoft.Client.Framework.Regions.IRegion"/> supports activation.
            </summary>
            <returns>A boolean value, true if the region supports deactivation.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.Adapters.SelectionControlRegionAdapter.CanDeactivate">
            <summary>
            Determines whether the specified <see cref="T:Intersoft.Client.Framework.Regions.IRegion"/> supports deactivation.
            </summary>
            <returns>A boolean value, true if the region supports deactivation.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.Adapters.SelectionControlRegionAdapter.Activate(System.Object)">
            <summary>
            Activates the specified view.
            </summary>
            <param name="view">The view to activate.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.Adapters.SelectionControlRegionAdapter.Deactivate(System.Object)">
            <summary>
            Deactivates the specified view.
            </summary>
            <param name="view">The view to deactivate.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.Adapters.SelectionControlRegionAdapter.PrepareContainerForItem(System.Object,System.Windows.DependencyObject)">
            <summary>
            Prepare the container for the specified item.
            </summary>
            <param name="item">The item of which container to prepare.</param>
            <param name="parent">The parent of the container.</param>
            <returns>Returns the container for the item.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.Adapters.SelectionControlRegionAdapter.GetContent(System.Windows.DependencyObject)">
            <summary>
            Gets the content of the given container.
            </summary>
            <param name="container">The container of which content to get.</param>
            <returns>Returns the content of the associated container.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.Adapters.SelectionControlRegionAdapter.GetContainer(System.Object)">
            <summary>
            Gets the container of the specified item.
            </summary>
            <param name="item">The item of which container to get.</param>
            <returns>Returns tbe container that hosts the item.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.Adapters.SelectionControlRegionAdapter.SynchronizeViews">
            <summary>
            
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.Adapters.SelectionControlRegionAdapter.GetViews">
            <summary>
            Returns the existing views registered in the <see cref="T:Intersoft.Client.Framework.Regions.IRegion"/> associated with this adapter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.Adapters.SelectionControlRegionAdapter.Remove(System.Object)">
            <summary>
            Removes the specified view from the region.
            </summary>
            <param name="view">The view to remove.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.Adapters.SelectionControlRegionAdapter.Release(Intersoft.Client.Framework.Regions.IRegion)">
            <summary>
            Releases the adapter from the specified <see cref="T:Intersoft.Client.Framework.Regions.IRegion"/> and frees the resources allocated by the adapter.
            </summary>
            <param name="region">The region to release.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.Adapters.SelectionControlRegionAdapter.Dispose">
            <summary>
            Called when the adapter is disposed.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.Regions.Adapters.SelectionControlRegionAdapter.Control">
            <summary>
            The control associated to the adapter.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.Regions.Adapters.SelectionControlRegionAdapter.ControlRegion">
            <summary>
            The region associated to the adapter.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.Regions.Adapters.SelectionControlRegionAdapter.IsItemContainerRequired">
            <summary>
            Determines whether a specific item container is required for this adapter.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.FrameworkElementExtensions">
            <summary>
            Framework Element extension methods.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.FrameworkElementExtensions.FindNameDeep(System.Windows.FrameworkElement,System.String)">
            <summary>
            Find the element that matches the given name. If the element couldn't be found in the main namescope, 
            a deep search operation will be performed.
            </summary>
            <param name="source">The source element which the search will start from.</param>
            <param name="name">The target element's name to find.</param>
            <returns>An object that matches the given name.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.FrameworkElementExtensions.SetStyleWithType(System.Windows.FrameworkElement,System.Windows.Style)">
            <summary>
            Sets framework element style with TypedStyle.
            </summary>
            <param name="element">Element.</param>
            <param name="style">TypedStyle.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.FrameworkElementExtensions.FindResource(System.Windows.FrameworkElement,System.Object)">
            <summary>
            Find specific resource base on specified resource key.
            </summary>
            <param name="element">Framework Element.</param>
            <param name="resourceKey">Resource Key.</param>
            <returns></returns>
        </member>
        <member name="M:Intersoft.Client.Framework.FrameworkElementExtensions.TryFindResource(System.Windows.FrameworkElement,System.Object)">
            <summary>
            Try find specific resource based on specified resource key.
            </summary>
            <param name="element">Framework Element.</param>
            <param name="resourceKey">Resource Key.</param>
            <returns></returns>
        </member>
        <member name="T:Intersoft.Client.Framework.RoutedEventExtension">
            <summary>
            Routed Event extension methods.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.IDelegateReference">
            <summary>
            Represents a reference to a <see cref="T:System.Delegate"/>.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.IDelegateReference.Target">
            <summary>
            Gets the referenced <see cref="T:System.Delegate"/> object.
            </summary>
            <value>A <see cref="T:System.Delegate"/> instance if the target is valid; otherwise <see langword="null"/>.</value>
        </member>
        <member name="T:Intersoft.Client.Framework.DelegateReference">
            <summary>
            Represents a reference to a <see cref="T:System.Delegate"/> that may contain a
            <see cref="T:System.WeakReference"/> to the target. 
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.DelegateReference.#ctor(System.Delegate,System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Intersoft.Client.Framework.DelegateReference"/>.
            </summary>
            <param name="delegate">The original <see cref="T:System.Delegate"/> to create a reference for.</param>
            <param name="keepReferenceAlive">If <see langword="false"/> the class will create a weak reference to the delegate, allowing it to be garbage collected. Otherwise it will keep a strong reference to the target.</param>
            <exception cref="T:System.ArgumentNullException">If the passed <paramref name="delegate"/> is not assignable to <see cref="T:System.Delegate"/>.</exception>
        </member>
        <member name="P:Intersoft.Client.Framework.DelegateReference.Target">
            <summary>
            Gets the <see cref="T:System.Delegate"/> (the target) referenced by the current <see cref="T:Intersoft.Client.Framework.DelegateReference"/> object.
            </summary>
            <value><see langword="null"/> if the object referenced by the current <see cref="T:Intersoft.Client.Framework.DelegateReference"/> object has been garbage collected; otherwise, a reference to the <see cref="T:System.Delegate"/> referenced by the current <see cref="T:Intersoft.Client.Framework.DelegateReference"/> object.</value>
        </member>
        <member name="T:Intersoft.Client.Framework.DelegateEventBase">
            <summary>
            Represents the base class used to publish and subscribe to events.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.DelegateEventBase.InternalSubscribe(Intersoft.Client.Framework.IEventSubscription)">
            <summary>
            Adds the specified <see cref="T:Intersoft.Client.Framework.IEventSubscription"/> to the subscribers' collection.
            </summary>
            <param name="eventSubscription">The subscriber.</param>
            <returns>The <see cref="T:Intersoft.Client.Framework.SubscriptionToken"/> that uniquely identifies every subscriber.</returns>
            <remarks>
            Adds the subscription to the internal list and assigns it a new <see cref="T:Intersoft.Client.Framework.SubscriptionToken"/>.
            </remarks>
        </member>
        <member name="M:Intersoft.Client.Framework.DelegateEventBase.InternalPublish(System.Object[])">
            <summary>
            Calls all the execution strategies exposed by the list of <see cref="T:Intersoft.Client.Framework.IEventSubscription"/>.
            </summary>
            <param name="arguments">The arguments that will be passed to the listeners.</param>
            <remarks>Before executing the strategies, this class will prune all the subscribers from the
            list that return a <see langword="null"/> <see cref="T:System.Action`1"/> when calling the
            <see cref="M:Intersoft.Client.Framework.IEventSubscription.GetExecutionStrategy"/> method.</remarks>
        </member>
        <member name="M:Intersoft.Client.Framework.DelegateEventBase.Unsubscribe(Intersoft.Client.Framework.SubscriptionToken)">
            <summary>
            Removes the subscriber matching the <seealso cref="T:Intersoft.Client.Framework.SubscriptionToken"/>.
            </summary>
            <param name="token">The <see cref="T:Intersoft.Client.Framework.SubscriptionToken"/> returned by <see cref="!:EventBase"/> while subscribing to the event.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.DelegateEventBase.Contains(Intersoft.Client.Framework.SubscriptionToken)">
            <summary>
            Returns <see langword="true"/> if there is a subscriber matching <see cref="T:Intersoft.Client.Framework.SubscriptionToken"/>.
            </summary>
            <param name="token">The <see cref="T:Intersoft.Client.Framework.SubscriptionToken"/> returned by <see cref="!:EventBase"/> while subscribing to the event.</param>
            <returns><see langword="true"/> if there is a <see cref="T:Intersoft.Client.Framework.SubscriptionToken"/> that matches; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="P:Intersoft.Client.Framework.DelegateEventBase.Subscriptions">
            <summary>
            Gets the list of current subscriptions.
            </summary>
            <value>The current subscribers.</value>
        </member>
        <member name="T:Intersoft.Client.Framework.CornerRadiusConverter">
            <summary>
            Converts a CornerRadius instance to new dimension according to the mode specified in the parameter.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.CornerRadiusConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the <paramref name="value"/> to CornerRadius type.
            </summary>
            <param name="value">The value to format.</param>
            <param name="targetType">The target output type.</param>
            <param name="parameter">Optional parameter.</param>
            <param name="culture">The culture to use in the format operation.</param>
            <returns>CornerRadius type.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.CornerRadiusConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Conversion back is not required. This method is not implementated.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.ISHeaderedSelectionControl">
            <summary>
            Serves as the base class for all Intersoft Headered Selection controls.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedSelectionControl.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
            <summary>
            Prepares the specified element to display the specified item.
            </summary>
            <param name="element">The container element used to display the specified item.</param>
            <param name="item">The item to display.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedSelectionControl.ScrollIntoView(System.Windows.UIElement)">
            <summary>
            Scroll the desired element into the ScrollHost's viewport.
            </summary>
            <param name="element">Element to scroll into view.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedSelectionControl.OnApplyTemplate">
            <summary>
            Builds the visual tree for the ISHeaderedSelectionControl when a new template is applied.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedSelectionControl.ArrangeOverride(System.Windows.Size)">
            <summary>
            Provides the behavior for the Arrange pass of Silverlight layout.
            </summary>
            <param name="finalSize">
            The final area within the parent that this object should use to arrange itself and its children.
            </param>
            <returns>The actual size used once the element is arranged.</returns>
        </member>
        <member name="F:Intersoft.Client.Framework.ISHeaderedSelectionControl.SelectedElementProperty">
            <summary>
            Identifies the SelectedElement dependency property.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ISHeaderedSelectionControl.SelectedIndexProperty">
            <summary>
            Identifies the SelectedIndex dependency property.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ISHeaderedSelectionControl.SelectedItemProperty">
            <summary>
            Identifies the SelectedItem dependency property.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ISHeaderedSelectionControl.SelectedValueProperty">
            <summary>
            Identifies the SelectedValue dependency property.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ISHeaderedSelectionControl.SelectedValuePathProperty">
            <summary>
            Identifies the SelectedValuePath dependency property.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedSelectionControl.ClearSelection(System.Object)">
            <summary>
            Clear current selection.
            </summary>
            <param name="except">Except specified object.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedSelectionControl.GetItemContext(System.Object)">
            <summary>
            Get item's context.
            </summary>
            <param name="item">Item.</param>
            <returns>Data Context.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedSelectionControl.GetItemElement(System.Object)">
            <summary>
            Gets item's element.
            </summary>
            <param name="item">Item.</param>
            <returns>Element.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedSelectionControl.InitializeSelection">
            <summary>
            Initialize selection.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedSelectionControl.InitializeSelection(System.Windows.DependencyObject,System.Object)">
            <summary>
            Initialize selection.
            </summary>
            <param name="element">The container element used to display the specified item.</param>
            <param name="item">The item to display.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedSelectionControl.OnSelectedIndexChanged(System.Int32,System.Int32)">
            <summary>
            Called when the value of the SelectedIndex property changes.
            </summary>
            <param name="oldIndex">The old value of the SelectedIndex property.</param>
            <param name="newIndex">The new value of the SelectedIndex property.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedSelectionControl.SelectValue(System.Int32)">
            <summary>
            Set the selected value based on specified index
            </summary>
            <param name="newIndex"></param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedSelectionControl.OnSelectedItemChanged(System.Object,System.Object)">
            <summary>
            Called when the value of the SelectedItem property changes.
            </summary>
            <param name="oldItem">The old value of the SelectedItem property.</param>
            <param name="newItem">The new value of the SelectedItem property.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedSelectionControl.OnSelectedValueChanged(System.Object,System.Object)">
            <summary>
            Called when the value of the SelectedValue property changes.
            </summary>
            <param name="oldValue">The old value of the SelectedValue property.</param>
            <param name="newValue">The new value of the SelectedValue property.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedSelectionControl.GetSelectedItem">
            <summary>
            Get selected item element.
            </summary>
            <returns>Selected item element.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedSelectionControl.Select(System.Int32)">
            <summary>
            Select the item on specified index.
            </summary>
            <param name="index">Index.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedSelectionControl.Select(System.Object)">
            <summary>
            Select the specified item.
            </summary>
            <param name="item">Item.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedSelectionControl.Unselect(System.Int32)">
            <summary>
            Unselect the item at specified index.
            </summary>
            <param name="index">Index.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedSelectionControl.Unselect(System.Object)">
            <summary>
            Unselect the specified item.
            </summary>
            <param name="item">Item.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedSelectionControl.DoFocus(System.Windows.UIElement)">
            <summary>
            Perform focus.
            </summary>
            <param name="focusedItem">Focus item.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedSelectionControl.DoLostFocus(System.Windows.UIElement)">
            <summary>
            Perform lost focus.
            </summary>
            <param name="focusedItem">Focus item.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedSelectionControl.SetFocusedItem(System.Windows.UIElement,System.Boolean)">
            <summary>
            Set focused item from given index.
            </summary>
            <param name="focusedItem">Focused item.</param>
            <param name="scrollIntoView">Scroll into view.</param>
        </member>
        <member name="P:Intersoft.Client.Framework.ISHeaderedSelectionControl.FocusedItem">
            <summary>
            Gets or sets the focused item.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISHeaderedSelectionControl.SelectedElement">
            <summary>
            Gets or sets the current selected element.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISHeaderedSelectionControl.SelectedIndex">
            <summary>
            Gets or sets the current selected index.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISHeaderedSelectionControl.SelectedItem">
            <summary>
            Gets or sets the current selected item.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISHeaderedSelectionControl.SelectedValue">
            <summary>
            Gets the current selected value. Only applicable if selected value path is specified.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISHeaderedSelectionControl.SelectedValuePath">
            <summary>
            Gets or sets the selected value path.
            </summary>
        </member>
        <member name="E:Intersoft.Client.Framework.ISHeaderedSelectionControl.SelectionChanged">
            <summary>
            Occurs when the selection of a ISelection changes.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.ItemsControlHelper">
            <summary>
            The ItemContainerGenerator provides useful utilities for ItemsControls.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:Intersoft.Client.Framework.ItemsControlHelper.#ctor(System.Windows.Controls.ItemsControl)">
            <summary>
            Initializes a new instance of the ItemContainerGenerator.
            </summary>
            <param name="control">
            The ItemsControl being tracked by the ItemContainerGenerator.
            </param>
        </member>
        <member name="M:Intersoft.Client.Framework.ItemsControlHelper.ApplyTemplate(System.Windows.DependencyObject,System.Object)">
            <summary>
            Applies item template for each generated element.
            </summary>
            <param name="element">Container element.</param>
            <param name="item">Item.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ItemsControlHelper.ApplyStyle(System.Windows.DependencyObject,System.Object)">
            <summary>
            Applies style for container element generated for each item.
            </summary>
            <param name="element">Container element.</param>
            <param name="item">Item.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ItemsControlHelper.OnApplyTemplate">
            <summary>
            Apply a control template to the ItemsControl.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ItemsControlHelper.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Windows.Style)">
            <summary>
            Prepares the specified container to display the specified item.
            </summary>
            <param name="element">
            Container element used to display the specified item.
            </param>
            <param name="parentItemContainerStyle">
            The ItemContainerStyle for the parent ItemsControl.
            </param>
        </member>
        <member name="M:Intersoft.Client.Framework.ItemsControlHelper.UpdateItemContainerStyle(System.Windows.Style)">
            <summary>
            Update the style of any generated items when the ItemContainerStyle
            has been changed.
            </summary>
            <param name="itemContainerStyle">The ItemContainerStyle.</param>
            <remarks>
            Silverlight does not support setting a Style multiple times, so we
            only attempt to set styles on elements whose style hasn't already
            been set.
            </remarks>
        </member>
        <member name="M:Intersoft.Client.Framework.ItemsControlHelper.RefreshBinding(System.Windows.DependencyProperty,System.String)">
            <summary>
            Refresh property binding.
            </summary>
            <param name="property">Dependency property.</param>
            <param name="propertyPath">Property path.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ItemsControlHelper.RefreshStyleSelector">
            <summary>
            Refresh style selector.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ItemsControlHelper.RefreshTemplateSelector">
            <summary>
            Refresh style selector.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ItemsControlHelper.ScrollIntoView(System.Windows.FrameworkElement)">
            <summary>
            Scroll the desired element into the ScrollHost's viewport.
            </summary>
            <param name="element">Element to scroll into view.</param>
        </member>
        <member name="P:Intersoft.Client.Framework.ItemsControlHelper.ItemsHost">
            <summary>
            Gets a Panel that is used as the ItemsHost of the ItemsControl.
            This property will only be valid when the ItemsControl is live in
            the tree and has generated containers for some of its items.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ItemsControlHelper.ScrollHost">
            <summary>
            Gets a ScrollViewer that is used to scroll the items in the
            ItemsHost.
            </summary>
        </member>
        <member name="E:Intersoft.Client.Framework.Input.HybridCommandBinding.CanQueryStatus">
            <summary>
            Occurs when the CommandManager performs requery and invalidates the query status.
            </summary>
        </member>
        <member name="E:Intersoft.Client.Framework.Input.HybridCommandBinding.QueryStatus">
            <summary>
            Occurs when the command is about to perform query status.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.ISSelectionItemControl">
            <summary>
            Serves as the base class for all Intersoft Selection Item controls.
            </summary>   
        </member>
        <member name="F:Intersoft.Client.Framework.ISSelectionItemControl.IsControlFocusedProperty">
            <summary>
            Identifies the IsControlFocused dependency property.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ISSelectionItemControl.IsControlMouseOverProperty">
            <summary>
            Identifies the IsControlMouseOver dependency property.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ISSelectionItemControl.IsSelectedProperty">
            <summary>
            Identifies the IsSelected dependency property.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISSelectionItemControl.AttachEventHandlers">
            <summary>
            Attach built-in event handlers to control templates. Call this method if necessary.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISSelectionItemControl.DetachedEventHandlers">
            <summary>
            Detach built-in event handlers from control templates. Call this method if necessary.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISSelectionItemControl.DoFocus">
            <summary>
            Perform focus.
            </summary>        
        </member>
        <member name="M:Intersoft.Client.Framework.ISSelectionItemControl.DoLostFocus">
            <summary>
            Perform lost focus.
            </summary>        
        </member>
        <member name="M:Intersoft.Client.Framework.ISSelectionItemControl.FocusChanged(System.Boolean)">
            <summary>
            Focus changed
            </summary>
            <param name="haveFocus">Have focus</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISSelectionItemControl.OnItemFocused">
            <summary>
            Called before the System.Windows.UIElement.GotFocus event occurs.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISSelectionItemControl.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            Called before MouseEnter event occurs.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISSelectionItemControl.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Called before the MouseLeave event occurs.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISSelectionItemControl.CheckMultipleSelection">
            <summary>
            Check whether the current process is multiple selection.
            </summary>
            <returns>True if current process is multiple selection.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.ISSelectionItemControl.ChangeVisualState">
            <summary>
            Change the visual state.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISSelectionItemControl.ChangeVisualState(System.Boolean)">
            <summary>
            Update the visual state.
            </summary>
            <param name="useTransitions">Use transitions</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISSelectionItemControl.OnIsControlMouseOverPropertyChanged(System.Object,System.Object)">
            <summary>
            Called when the value of the IsControlMouseOver property changes.
            </summary>
            <param name="oldValue">The old value of the IsControlMouseOver property.</param>
            <param name="newValue">The new value of the IsControlMouseOver property.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISSelectionItemControl.OnIsSelectedChanged(System.Boolean,System.Boolean)">
            <summary>
            Called when the value of the IsSelected property changes.
            </summary>
            <param name="oldValue">The old value of the IsSelected property.</param>
            <param name="newValue">The new value of the IsSelected property.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISSelectionItemControl.GoToDisabledState">
            <summary>
            Go to disabled state.
            </summary>        
        </member>
        <member name="M:Intersoft.Client.Framework.ISSelectionItemControl.GoToDisabledState(System.Boolean)">
            <summary>
            Go to disabled state.
            </summary>
            <param name="animate">Use transitions.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISSelectionItemControl.GoToFocusedState">
            <summary>
            Go to focused state.
            </summary>        
        </member>
        <member name="M:Intersoft.Client.Framework.ISSelectionItemControl.GoToFocusedState(System.Boolean)">
            <summary>
            Go to focused state.
            </summary>
            <param name="animate">Use transitions.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISSelectionItemControl.GoToMouseOverState">
            <summary>
            Go to mouse over state.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISSelectionItemControl.GoToMouseOverState(System.Boolean)">
            <summary>
            Go to mouse over state.
            </summary>
            <param name="animate">Use transitions.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISSelectionItemControl.GoToNormalState">
            <summary>
            Go to normal state.
            </summary>        
        </member>
        <member name="M:Intersoft.Client.Framework.ISSelectionItemControl.GoToNormalState(System.Boolean)">
            <summary>
            Go to normal state.
            </summary>
            <param name="animate">Use transitions.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISSelectionItemControl.GoToSelectedState">
            <summary>
            Go to selected state.
            </summary>        
        </member>
        <member name="M:Intersoft.Client.Framework.ISSelectionItemControl.GoToSelectedState(System.Boolean)">
            <summary>
            Go to selected state.
            </summary>
            <param name="animate">Use transitions.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISSelectionItemControl.GoToUnfocusedState">
            <summary>
            Go to unfocused state.
            </summary>        
        </member>
        <member name="M:Intersoft.Client.Framework.ISSelectionItemControl.GoToUnfocusedState(System.Boolean)">
            <summary>
            Go to unfocused state.
            </summary>
            <param name="animate">Use transitions.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISSelectionItemControl.GoToUnselectedState">
            <summary>
            Go to unselected state.
            </summary>        
        </member>
        <member name="M:Intersoft.Client.Framework.ISSelectionItemControl.GoToUnselectedState(System.Boolean)">
            <summary>
            Go to unselected state.
            </summary>
            <param name="animate">Use transitions.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISSelectionItemControl.Select">
            <summary>
            Select the item.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISSelectionItemControl.Unselect">
            <summary>
            Unselect the item.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ISSelectionItemControl.SelectedEvent">
            <summary>
            Identifies the Selected routed event.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ISSelectionItemControl.UnselectedEvent">
            <summary>
            Identifies the Unselected routed event.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISSelectionItemControl.IsControlFocused">
            <summary>
            Gets or sets a value that indicates whether the item is focused.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISSelectionItemControl.IsControlMouseOver">
            <summary>
            Gets or sets a value that indicates whether the item is hovered.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISSelectionItemControl.IsSelected">
            <summary>
            Gets or sets a value that indicates whether the item is selected.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISSelectionItemControl.ForceMultipleSelection">
            <summary>
            Gets a value that indicates whether multiple selection is desired.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISSelectionItemControl.Owner">
            <summary>
            Gets the owner of the selection item.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISSelectionItemControl.ParentControl">
            <summary>
            Gets the parent control of the selection item.
            </summary>
        </member>
        <member name="E:Intersoft.Client.Framework.ISSelectionItemControl.Selected">
            <summary>
            Occurs when item is selected.
            </summary>
        </member>
        <member name="E:Intersoft.Client.Framework.ISSelectionItemControl.Unselected">
            <summary>
            Occurs when item is unselected.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.ContainerStyleSelector">
            <summary>
            Represents a container style selector class which is used to select a style based on type.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.StyleSelector">
            <summary>
            Provides a style selector.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.StyleSelector.SelectStyle(System.Object,System.Windows.DependencyObject)">
            <summary>
            Select style.
            </summary>
            <param name="item">Item.</param>
            <param name="container">Container.</param>
            <returns>Style</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.ContainerStyleSelector.#ctor">
            <summary>
            Initializes a new instance of ContainerStyleSelector.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ContainerStyleSelector.SelectStyle(System.Object,System.Windows.DependencyObject)">
            <summary>
            Select the style to be used in UXToolGroup based on ButtonAppearance property.
            </summary>
            <param name="item">An object that represents the original item to be styled.</param>
            <param name="container">The container of the item to be styled.</param>
            <returns></returns>
        </member>
        <member name="M:Intersoft.Client.Framework.ContainerStyleSelector.IsSelectorStyle(System.Windows.Style)">
            <summary>
            Determines whether the specified Style is defined in ItemContainerStyleSelector.
            </summary>
            <param name="style">A style object.</param>
            <returns>True if the specified style is defined in ItemContainerStyleSelector.</returns>
        </member>
        <member name="P:Intersoft.Client.Framework.ContainerStyleSelector.ContainerStyles">
            <summary>
            Specifies the container style used by the control hosted in UXToolGroup.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.ContainerStyles">
            <summary>
            Represents a collection of container styles.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.ContainerStyle">
            <summary>
            Represents the container style to be used in the ContainerStyles.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ContainerStyle.TypeName">
            <summary>
            Specifies the type name of the control to be styled.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ContainerStyle.Style">
            <summary>
            Specifies the style applied to controls that match the TypeName property.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.ISRoutedEventHandler">
            <summary>
            Represents the method that will handle routed events.
            </summary>
            <param name="sender">The object where the event handler is attached.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="T:Intersoft.Client.Framework.Regions.RegionAdapter">
            <summary>
            Provides services for region adapter such as registration and unregistration.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.RegionAdapter.Register(System.Type,System.Func{Intersoft.Client.Framework.Regions.IRegionAdapter})">
            <summary>
            Registers an adapter to the specified type.
            </summary>
            <param name="controlType">The type of the control.</param>
            <param name="adapter">The adapter to use with the <paramref name="controlType"/> type.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.RegionAdapter.Unregister(System.Type)">
            <summary>
            Removes the registration mapping between a type and an adapter.
            </summary>
            <param name="controlType">The type of the control.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.RegionAdapter.Get(System.Type)">
            <summary>
            Returns a new instance of adapter associated with the type provided.
            </summary>
            <param name="controlType">The type to obtain the <seealso cref="T:Intersoft.Client.Framework.Regions.IRegionAdapter"/> mapped.</param>
            <returns>The <seealso cref="T:Intersoft.Client.Framework.Regions.IRegionAdapter"/> mapped to the <paramref name="controlType"/>.</returns>
        </member>
        <member name="T:Intersoft.Client.Framework.LocalizationManager">
            <summary>
            Provides static properties and instance methods to manage and work with localized resource.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.LocalizationManager.#ctor">
            <summary>
            Initializes a new instance of LocalizationManager class.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.LocalizationManager.SetUICulture(System.Globalization.CultureInfo)">
            <summary>
            Sets the current thread's CurrentUICulture to the specified culture.
            </summary>
            <param name="culture">The new UI culture to set.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.LocalizationManager.GetResource(System.Windows.DependencyObject)">
            <summary>
            Gets the IObservableResource object that attached on the dependency object.
            </summary>
            <param name="obj">The dependency object to query.</param>
            <returns>IObservableResource object.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.LocalizationManager.SetResource(System.Windows.DependencyObject,Intersoft.Client.Framework.IObservableResource)">
            <summary>
            Sets the IObservableResource to the specified dependency object.
            </summary>
            <param name="obj">The dependency object to set.</param>
            <param name="value">IObservableResource object.</param>
        </member>
        <member name="F:Intersoft.Client.Framework.LocalizationManager.ResourceProperty">
            <summary>
            Identifies the Resource attached property.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.LocalizationManager.GetPropertyString(System.Windows.DependencyObject,System.String)">
            <summary>
            Gets the property value of the <see cref="!:Resource"/> attached to the dependency object.
            </summary>
            <param name="obj">The dependency object of which the <see cref="!:Resource"/> is attached.</param>
            <param name="propertyName">The property name of which value to retrieve.</param>
            <returns>A string value.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.LocalizationManager.GetResourceString(System.Windows.DependencyObject,System.String)">
            <summary>
            Gets the string of the <see cref="!:Resource"/> attached to the dependency object.
            </summary>
            <param name="obj">The dependency object of which the <see cref="!:Resource"/> is attached.</param>
            <param name="key">The resource key of which value to retrieve.</param>
            <returns>A string value.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.LocalizationManager.GetPropertyString(System.Windows.DependencyObject,System.String,System.Object[])">
            <summary>
            Gets the property value of the <see cref="!:Resource"/> attached to the dependency object.
            </summary>
            <param name="obj">The dependency object of which the <see cref="!:Resource"/> is attached.</param>
            <param name="propertyName">The property name of which value to retrieve.</param>
            <param name="converterValues">One or more values to be formatted when the text is being localized.</param>
            <returns>A string value.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.LocalizationManager.GetPropertyString(System.Windows.DependencyObject,System.String,System.Globalization.CultureInfo,System.Object[])">
            <summary>
            Gets the property value of the <see cref="!:Resource"/> attached to the dependency object.
            </summary>
            <param name="obj">The dependency object of which the <see cref="!:Resource"/> is attached.</param>
            <param name="propertyName">The property name of which value to retrieve.</param>
            /// <param name="culture">Culture used in localization.</param>
            <param name="converterValues">One or more values to be formatted when the text is being localized.</param>        
            <returns>A string value.</returns>                
        </member>
        <member name="P:Intersoft.Client.Framework.LocalizationManager.DefaultResource">
            <summary>
            Gets or sets the default resource, used as the fallback resource when no resource is defined for a particular control.
            </summary>
        </member>
        <member name="E:Intersoft.Client.Framework.LocalizationManager.CultureChanged">
            <summary>
            Occurs when the <see cref="T:System.Globalization.CultureInfo"/> of the application changes.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.LocalizationManager.Culture">
            <summary>
            Gets or sets the <see cref="T:System.Globalization.CultureInfo"/> to apply globally across the application.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.LocalizationManager.AutoUpdateBindings">
            <summary>
            Gets or sets a boolean value that indicates whether bindings should be automatically updated when the culture changes.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.MultiBindings">
            <summary>
            Describes a collection of <see cref="T:Intersoft.Client.Framework.MultiBinding"/> objects attached to a single framework element.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.MultiBindings.#ctor">
            <summary>
            Creates a new instance of MultiBindings class.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.MultiBindings.Dispose">
            <summary>
            Called when the object is disposed.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.MultiBindings.Bindings">
            <summary>
            Gets or sets the collection of MultiBindings.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.ISPasswordBox">
            <summary>
            Serves as the base class for all Intersoft TextBox controls.
            </summary> 
        </member>
        <member name="F:Intersoft.Client.Framework.ISPasswordBox.CornerRadiusProperty">
            <summary>
            Identifies the CornerRadius dependency property.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISPasswordBox.OnCornerRadiusChanged">
            <summary>
            Occurs when corner radius property changes.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISPasswordBox.CornerRadius">
            <summary>
            Represents the radius of a border's corner. The radius can't be negative.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.ITransformInfo">
            <summary>
            Provides interface for transformable architecture.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ITransformInfo.InitTransformInfo">
            <summary>
            Initialize transformable info.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ITransformInfo.TransformInfo">
            <summary>
            Gets or sets transformable info.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.ISSelectionControl">
            <summary>
            Serves as the base class for all Intersoft Selection controls.
            </summary>    
        </member>
        <member name="F:Intersoft.Client.Framework.ISSelectionControl.IsTextSearchCaseSensitiveProperty">
            <summary>
            Identifies the IsTextSearchCaseSensitive dependency property.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ISSelectionControl.IsTextSearchEnabledProperty">
            <summary>
            Identifies the IsTextSearchEnabled dependency property.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ISSelectionControl.SearchTextProperty">
            <summary>
            Identifies the SearchText dependency property.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISSelectionControl.GetIsNavigationSuppressed(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the IsNavigationSuppressed property attached to the specified object.
            </summary>
            <param name="obj">The object to query.</param>
            <returns>A boolean value.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.ISSelectionControl.SetIsNavigationSuppressed(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the value of the IsNavigationSuppressed property attached to the specified object.
            </summary>
            <param name="obj">The object of which property to set.</param>
            <param name="value">A boolean value.</param>
        </member>
        <member name="F:Intersoft.Client.Framework.ISSelectionControl.IsNavigationSuppressedProperty">
            <summary>
            Identifies the IsVirtualContent dependency property.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISSelectionControl.DoFocus(System.Windows.UIElement)">
            <summary>
            Perform focus.
            </summary>
            <param name="focusedItem">Focus item.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISSelectionControl.DoLostFocus(System.Windows.UIElement)">
            <summary>
            Perform lost focus.
            </summary>
            <param name="focusedItem">Focus item.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISSelectionControl.FocusChanged(System.Boolean)">
            <summary>
            Focus changed
            </summary>
            <param name="haveFocus">Have focus</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISSelectionControl.OnGotFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Called before the GotFocus event occurs.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISSelectionControl.OnLostFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Called before the LostFocus event occurs.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISSelectionControl.SetFocusedItem(System.Windows.UIElement,System.Boolean)">
            <summary>
            Set focused item from given index.
            </summary>
            <param name="focusedItem">Focused item.</param>
            <param name="scrollIntoView">Scroll into view.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISSelectionControl.ApplyBinding(System.Windows.DependencyObject,System.Object)">
            <summary>
            Applies item binding for each generated element.
            </summary>
            <param name="element">Container element.</param>
            <param name="item">Item.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISSelectionControl.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
            <summary>
            Prepares the specified element to display the specified item.
            </summary>
            <param name="element">The container element used to display the specified item.</param>
            <param name="item">The item to display.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISSelectionControl.ScrollIntoView(System.Windows.UIElement)">
            <summary>
            Scroll the desired element into the ScrollHost's viewport.
            </summary>
            <param name="element">Element to scroll into view.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISSelectionControl.ScrollIntoViewDirect(System.Windows.UIElement)">
            <summary>
            Scroll the desired element immediately into the ScrollHost's viewport.
            </summary>
            <param name="element">Element to scroll into view.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISSelectionControl.OnApplyTemplate">
            <summary>
            Builds the visual tree for the ISSelectionControl when a new template is applied.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISSelectionControl.OnItemsChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when the value of the ItemsControl.Items property changes.
            </summary>
            <param name="e">NotifyCollectionChangedEventArgs that contains the event data</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISSelectionControl.ArrangeOverride(System.Windows.Size)">
            <summary>
            Provides the behavior for the Arrange pass of Silverlight layout.
            </summary>
            <param name="finalSize">
            The final area within the parent that this object should use to arrange itself and its children.
            </param>
            <returns>The actual size used once the element is arranged.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.ISSelectionControl.PerformTextSearch(Intersoft.Client.Framework.Input.KeyEventArgs)">
            <summary>
            Perform text search.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISSelectionControl.PerformTextSearch">
            <summary>
            Perform text search.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ISSelectionControl.SelectedElementProperty">
            <summary>
            Identifies the SelectedElement dependency property.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ISSelectionControl.SelectedIndexProperty">
            <summary>
            Identifies the SelectedIndex dependency property.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ISSelectionControl.SelectedItemProperty">
            <summary>
            Identifies the SelectedItem dependency property.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ISSelectionControl.SelectedValueProperty">
            <summary>
            Identifies the SelectedValue dependency property.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ISSelectionControl.SelectedValuePathProperty">
            <summary>
            Identifies the SelectedValuePath dependency property.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISSelectionControl.ClearSelection(System.Object)">
            <summary>
            Clear current selection.
            </summary>
            <param name="except">Except specified object.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISSelectionControl.GetItemContext(System.Object)">
            <summary>
            Get item's context.
            </summary>
            <param name="item">Item.</param>
            <returns>Data Context.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.ISSelectionControl.GetItemElement(System.Object)">
            <summary>
            Gets item's element.
            </summary>
            <param name="item">Item.</param>
            <returns>Element.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.ISSelectionControl.InitializeSelection">
            <summary>
            Initialize selection.
            </summary>        
        </member>
        <member name="M:Intersoft.Client.Framework.ISSelectionControl.InitializeSelection(System.Windows.DependencyObject,System.Object)">
            <summary>
            Initialize selection.
            </summary>
            <param name="element">The container element used to display the specified item.</param>
            <param name="item">The item to display.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISSelectionControl.OnSelectedIndexChanged(System.Int32,System.Int32)">
            <summary>
            Called when the value of the SelectedIndex property changes.
            </summary>
            <param name="oldIndex">The old value of the SelectedIndex property.</param>
            <param name="newIndex">The new value of the SelectedIndex property.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISSelectionControl.SelectValue(System.Int32)">
            <summary>
            Set the selected value based on specified index
            </summary>
            <param name="newIndex"></param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISSelectionControl.OnSelectedItemChanged(System.Object,System.Object)">
            <summary>
            Called when the value of the SelectedItem property changes.
            </summary>
            <param name="oldItem">The old value of the SelectedItem property.</param>
            <param name="newItem">The new value of the SelectedItem property.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISSelectionControl.OnSelectedValueChanged(System.Object,System.Object)">
            <summary>
            Called when the value of the SelectedValue property changes.
            </summary>
            <param name="oldValue">The old value of the SelectedValue property.</param>
            <param name="newValue">The new value of the SelectedValue property.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISSelectionControl.GetSelectedItem">
            <summary>
            Get selected item element.
            </summary>
            <returns>Selected item element.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.ISSelectionControl.Select(System.Int32)">
            <summary>
            Select the item on specified index.
            </summary>
            <param name="index">Index.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISSelectionControl.Select(System.Object)">
            <summary>
            Select the specified item.
            </summary>
            <param name="item">Item.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISSelectionControl.Unselect(System.Int32)">
            <summary>
            Unselect the item at specified index.
            </summary>
            <param name="index">Index.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISSelectionControl.Unselect(System.Object)">
            <summary>
            Unselect the specified item.
            </summary>
            <param name="item">Item.</param>
        </member>
        <member name="F:Intersoft.Client.Framework.ISSelectionControl.SelectionChangedEvent">
            <summary>
            Identifies the SelectionChanged routed event.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISSelectionControl.IsTextSearchCaseSensitive">
            <summary>
            Gets or sets a value that determines whether text search is case sensitive.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISSelectionControl.IsTextSearchEnabled">
            <summary>
            Gets or sets a value that determines whether text search is enabled.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISSelectionControl.SearchText">
            <summary>
            Gets or sets current text search string.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISSelectionControl.FocusedItem">
            <summary>
            Gets or sets the focused item.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISSelectionControl.SearchTextTimeout">
            <summary>
            Gets or sets the search text timeout.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISSelectionControl.IsControlInitialized">
            <summary>
            Gets or sets a value indicating whether the control has passed the initialization phase.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISSelectionControl.IsSelectionPending">
            <summary>
            Gets or sets a value indicating whether the control has pending selection process.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISSelectionControl.SelectedElement">
            <summary>
            Gets or sets the current selected element.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISSelectionControl.SelectedIndex">
            <summary>
            Gets or sets the current selected index.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISSelectionControl.SelectedItem">
            <summary>
            Gets or sets the current selected item.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISSelectionControl.SelectedValue">
            <summary>
            Gets the current selected value. Only applicable if selected value path is specified.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISSelectionControl.SelectedValuePath">
            <summary>
            Gets or sets the selected value path.
            </summary>
        </member>
        <member name="E:Intersoft.Client.Framework.ISSelectionControl.SelectionChanged">
            <summary>
            Occurs when the selection of a ISelection changes.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.Input.ExecutedRoutedEventHandler">
            <summary>
            Represents the method that will handle the CommandBinding.Executed and 
            CommandBinding.PreviewExecuted routed events, as well as related attached events.
            </summary>
            <param name="sender">The object where the event handler is attached.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="T:Intersoft.Client.Framework.DateTimeHelper">
            <summary>
            Provides helper methods for date time operation.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.DateTimeHelper.GetCurrentDateFormat(System.Globalization.CultureInfo)">
            <summary>
            Gets the date time format info from the provided culture.
            </summary>
            <param name="culture">Culture.</param>
            <returns>Date time format info from the provided culture.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.DateTimeHelper.GetWeekStartDate(System.DateTime,System.DayOfWeek)">
            <summary>
            Gets the start date of specified week.
            </summary>
            <param name="startDate">Date of the week.</param>
            <param name="firstDayOfWeek">First day of week.</param>
            <returns>Start date of specified week.</returns>
        </member>
        <member name="T:Intersoft.Client.Framework.Input.ISFocusManager">
            <summary>
            Intersoft Focus Manager for Silverlight/WPF
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.Regions.ViewSortHintAttribute">
            <summary>
            Provides a hint that affects how the view will be sorted.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.ViewSortHintAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Intersoft.Client.Framework.Regions.ViewSortHintAttribute"/> class.
            </summary>
            <param name="hint">The hint to use for sorting.</param>
        </member>
        <member name="P:Intersoft.Client.Framework.Regions.ViewSortHintAttribute.Hint">
            <summary>
            Gets  the hint.
            </summary>
            <value>The hint to use for sorting.</value>
        </member>
        <member name="T:Intersoft.Client.Framework.Regions.Region">
            <summary>
            Implementation of <see cref="T:Intersoft.Client.Framework.Regions.IRegion"/> that enables view composition and activation, as well as views management in loosely-coupled fashion.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.Region.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Intersoft.Client.Framework.Regions.Region"/> class.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.Region.#ctor(System.String,System.Windows.DependencyObject)">
            <summary>
            Initializes a new instance of <see cref="T:Intersoft.Client.Framework.Regions.Region"/> class with the specified name and host.
            </summary>
            <param name="name">The name of the region to be created.</param>
            <param name="host">The element that hosts the region.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.Region.GetRegionName(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the RegionName attached property.
            </summary>
            <param name="obj">The target element.</param>
            <returns>The region name of the attached element.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.Region.SetRegionName(System.Windows.DependencyObject,System.String)">
            <summary>
            Sets the RegionName attached property.
            </summary>
            <param name="obj">The target element.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.Region.GetViewMetadata(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the ViewMetadata attached property.
            </summary>
            <param name="obj">The target element.</param>
            <returns>The <see cref="T:Intersoft.Client.Framework.Regions.ViewMetadata"/> of the attached element.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.Region.SetViewMetadata(System.Windows.DependencyObject,Intersoft.Client.Framework.Regions.ViewMetadata)">
            <summary>
            Sets the ViewMetadata attached property.
            </summary>
            <param name="obj">The target element.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.Region.GetEnableViewSorting(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the EnableViewSorting attached property.
            </summary>
            <param name="obj">The target element.</param>
            <returns>A boolean value indicating whether the target element allows view sorting.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.Region.SetEnableViewSorting(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the ViewMetadata attached property.
            </summary>
            <param name="obj">The target element.</param>
            <param name="value">The value.</param>
        </member>
        <member name="F:Intersoft.Client.Framework.Regions.Region.EnableViewSortingProperty">
            <summary>
            Identifies the EnableViewSorting attached property.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.Regions.Region.ViewMetadataProperty">
            <summary>
            Identifies the ViewMetadata attached property.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.Regions.Region.RegionNameProperty">
            <summary>
            Identifies the RegionName attached property.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.Region.Add(System.Object)">
            <overloads>Adds a new view to the region.</overloads>
            <summary>
            Adds a new view to the region.
            </summary>
            <param name="view">The view to add.</param>
            <returns>The <see cref="T:Intersoft.Client.Framework.Regions.IRegionManager"/> that is set on the view if it is a <see cref="T:System.Windows.DependencyObject"/>. It will be the current region manager when using this overload.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.Region.Add(System.Object,System.String)">
            <summary>
            Adds a new view to the region.
            </summary>
            <param name="view">The view to add.</param>
            <param name="viewName">The name of the view. This can be used to retrieve it later by calling <see cref="M:Intersoft.Client.Framework.Regions.IRegion.GetView(System.String)"/>.</param>
            <returns>The <see cref="T:Intersoft.Client.Framework.Regions.IRegionManager"/> that is set on the view if it is a <see cref="T:System.Windows.DependencyObject"/>. It will be the current region manager when using this overload.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.Region.Remove(System.Object)">
            <summary>
            Removes the specified view from the region.
            </summary>
            <param name="view">The view to remove.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.Region.GetView(System.String)">
            <summary>
            Returns the view instance that was added to the region using a specific name.
            </summary>
            <param name="viewName">The name used when adding the view to the region.</param>
            <returns>Returns the named view or <see langword="null"/> if the view with <paramref name="viewName"/> does not exist in the current region.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.Region.GetViewFromMetadata(System.Object)">
            <summary>
            Returns the view instance based on the specified metadata.
            </summary>
            <param name="o">The metadata of the region.</param>
            <returns>Returns the view associated to the specified metadata.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.Region.Activate(System.Object)">
            <summary>
            Sets the specified view as active, if supported by the adapter. 
            </summary>
            <param name="view">The view to activate.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.Region.Deactivate(System.Object)">
            <summary>
            Sets the specified view as inactive, if supported by the adapter. 
            </summary>
            <param name="view">The view to deactivate.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.Region.InvalidateViews">
            <summary>
            Invalidates the existing views and synchronize the available elements with the views registered in this <see cref="T:Intersoft.Client.Framework.Regions.IRegion"/> instance.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.Regions.Region.Dispose">
            <summary>
            Disposes this <see cref="T:Intersoft.Client.Framework.Regions.Region"/> instance.
            </summary>
        </member>
        <member name="E:Intersoft.Client.Framework.Regions.Region.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.Regions.Region.DefaultDiscoveryProvider">
            <summary>
            Gets or sets the default <see cref="T:Intersoft.Client.Framework.Regions.IViewDiscoveryProvider"/> which will be used to discover views in a region.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.Regions.Region.Context">
            <summary>
            Gets or sets a context for the region. This value can be used by the user to share context with the views.
            </summary>
            <value>The context value to be shared.</value>
        </member>
        <member name="P:Intersoft.Client.Framework.Regions.Region.Name">
            <summary>
            Gets the name of the region that uniequely identifies the region within a <see cref="T:Intersoft.Client.Framework.Regions.IRegionManager"/>.
            </summary>
            <value>The name of the region.</value>
        </member>
        <member name="P:Intersoft.Client.Framework.Regions.Region.EnableViewSorting">
            <summary>
            Gets or sets a value indicating whether the views in the region should be sorted.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.Regions.Region.RegionManager">
            <summary>
            Gets the <see cref="T:Intersoft.Client.Framework.Regions.IRegionManager"/> that owns this <see cref="T:Intersoft.Client.Framework.Regions.IRegion"/> instance.
            </summary>
            <value>The <see cref="T:Intersoft.Client.Framework.Regions.IRegionManager"/> where this <see cref="T:Intersoft.Client.Framework.Regions.IRegion"/> is registered.</value>
            <remarks>This is usually used by implementations of <see cref="T:Intersoft.Client.Framework.Regions.IRegionManager"/> and should not be
            used by the developer explicitely.</remarks>
        </member>
        <member name="P:Intersoft.Client.Framework.Regions.Region.DiscoveryProvider">
            <summary>
            Gets or sets the <see cref="T:Intersoft.Client.Framework.Regions.IViewDiscoveryProvider"/> for this <see cref="T:Intersoft.Client.Framework.Regions.IRegion"/> instance.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.Regions.Region.Host">
            <summary>
            Gets the element that hosts this <see cref="T:Intersoft.Client.Framework.Regions.IRegion"/> instance.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.Regions.Region.Adapter">
            <summary>
            Gets the <see cref="T:Intersoft.Client.Framework.Regions.IRegionAdapter"/> used to adapt the <see cref="P:Intersoft.Client.Framework.Regions.Region.Host"/> element to this <see cref="T:Intersoft.Client.Framework.Regions.IRegion"/> instance.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.Regions.Region.Views">
            <summary>
            Gets the collection of the views registered in this <see cref="T:Intersoft.Client.Framework.Regions.IRegion"/> instance.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.Regions.Region.ResolvedViews">
            <summary>
            Gets the collection of the views that consisted of the original items and new items added in this <see cref="T:Intersoft.Client.Framework.Regions.IRegion"/> instance.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.Regions.Region.SortComparison">
            <summary>
            Gets or sets the comparison used to sort the views.
            </summary>
            <value>The comparison to use.</value>
        </member>
        <member name="T:Intersoft.Client.Framework.TimeSpanTypeConverter">
            <summary>
            Converts a string value to TimeSpan object.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.TimeSpanTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines whether conversion is possible from a specified type to a TimeSpan object.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type" /> that represents the type you want to convert from.</param>
            <returns>True if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Intersoft.Client.Framework.TimeSpanTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)" -->
        <member name="M:Intersoft.Client.Framework.TimeSpanTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether the type converter can convert to string type.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type" /> that represents the type you want to convert to.</param>
            <returns>True if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.TimeSpanTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the specified TimeSpan object to string value.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture.</param>
            <param name="value">The value to convert.</param>
            <param name="destinationType">A <see cref="T:System.Type" /> that represents the type you want to convert to.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="T:Intersoft.Client.Framework.SizeTypeConverter">
            <summary>
            Converts a string value to Size object.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.SizeTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines whether conversion is possible from a specified type to a Size object.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type" /> that represents the type you want to convert from.</param>
            <returns>True if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Intersoft.Client.Framework.SizeTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)" -->
        <member name="M:Intersoft.Client.Framework.SizeTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether the type converter can convert to string type.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type" /> that represents the type you want to convert to.</param>
            <returns>True if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.SizeTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the specified Size object to string value.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture.</param>
            <param name="value">The value to convert.</param>
            <param name="destinationType">A <see cref="T:System.Type" /> that represents the type you want to convert to.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="T:Intersoft.Client.Framework.ClientUIProductInfo">
            <summary>
            Provides a product information for Intersoft Client UI.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ClientUIProductInfo.#ctor">
            <summary>
            Initializes a new instance of the ClientUIProductInfo class. 
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.ISHeaderedSelectionItemControl">
            <summary>
            Serves as the base class for all Intersoft Headered Selection Item.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ISHeaderedSelectionItemControl.IsControlFocusedProperty">
            <summary>
            Identifies the IsControlFocused dependency property.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ISHeaderedSelectionItemControl.IsControlMouseOverProperty">
            <summary>
            Identifies the IsControlMouseOver dependency property.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ISHeaderedSelectionItemControl.IsSelectedProperty">
            <summary>
            Identifies the IsSelected dependency property.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedSelectionItemControl.DoFocus">
            <summary>
            Perform focus.
            </summary>        
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedSelectionItemControl.DoLostFocus">
            <summary>
            Perform lost focus.
            </summary>        
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedSelectionItemControl.FocusChanged(System.Boolean)">
            <summary>
            Focus changed
            </summary>
            <param name="haveFocus">Have focus</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedSelectionItemControl.OnItemFocused">
            <summary>
            Called before the System.Windows.UIElement.GotFocus event occurs.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedSelectionItemControl.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            Called before MouseEnter event occurs.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedSelectionItemControl.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Called before the MouseLeave event occurs.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedSelectionItemControl.CheckMultipleSelection">
            <summary>
            Check whether the current process is multiple selection.
            </summary>
            <returns>True if current process is multiple selection.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedSelectionItemControl.ChangeVisualState(System.Boolean)">
            <summary>
            Update the visual state.
            </summary>
            <param name="useTransitions">Use transitions</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedSelectionItemControl.OnIsControlMouseOverPropertyChanged(System.Object,System.Object)">
            <summary>
            Called when the value of the IsControlMouseOver property changes.
            </summary>
            <param name="oldValue">The old value of the IsControlMouseOver property.</param>
            <param name="newValue">The new value of the IsControlMouseOver property.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedSelectionItemControl.OnIsSelectedChanged(System.Boolean,System.Boolean)">
            <summary>
            Called when the value of the IsSelected property changes.
            </summary>
            <param name="oldValue">The old value of the IsSelected property.</param>
            <param name="newValue">The new value of the IsSelected property.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedSelectionItemControl.GoToDisabledState">
            <summary>
            Go to disabled state.
            </summary>        
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedSelectionItemControl.GoToDisabledState(System.Boolean)">
            <summary>
            Go to disabled state.
            </summary>
            <param name="animate">Use transitions.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedSelectionItemControl.GoToFocusedState">
            <summary>
            Go to focused state.
            </summary>        
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedSelectionItemControl.GoToFocusedState(System.Boolean)">
            <summary>
            Go to focused state.
            </summary>
            <param name="animate">Use transitions.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedSelectionItemControl.GoToMouseOverState">
            <summary>
            Go to mouse over state.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedSelectionItemControl.GoToMouseOverState(System.Boolean)">
            <summary>
            Go to mouse over state.
            </summary>
            <param name="animate">Use transitions.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedSelectionItemControl.GoToNormalState">
            <summary>
            Go to normal state.
            </summary>        
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedSelectionItemControl.GoToNormalState(System.Boolean)">
            <summary>
            Go to normal state.
            </summary>
            <param name="animate">Use transitions.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedSelectionItemControl.GoToSelectedState">
            <summary>
            Go to selected state.
            </summary>        
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedSelectionItemControl.GoToSelectedState(System.Boolean)">
            <summary>
            Go to selected state.
            </summary>
            <param name="animate">Use transitions.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedSelectionItemControl.GoToUnfocusedState">
            <summary>
            Go to unfocused state.
            </summary>        
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedSelectionItemControl.GoToUnfocusedState(System.Boolean)">
            <summary>
            Go to unfocused state.
            </summary>
            <param name="animate">Use transitions.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedSelectionItemControl.GoToUnselectedState">
            <summary>
            Go to unselected state.
            </summary>        
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedSelectionItemControl.GoToUnselectedState(System.Boolean)">
            <summary>
            Go to unselected state.
            </summary>
            <param name="animate">Use transitions.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedSelectionItemControl.Select">
            <summary>
            Select the item.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISHeaderedSelectionItemControl.Unselect">
            <summary>
            Unselect the item.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ISHeaderedSelectionItemControl.SelectedEvent">
            <summary>
            Identifies the Selected routed event.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ISHeaderedSelectionItemControl.UnselectedEvent">
            <summary>
            Identifies the Unselected routed event.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISHeaderedSelectionItemControl.IsControlFocused">
            <summary>
            Gets or sets a value that indicates whether the item is focused.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISHeaderedSelectionItemControl.IsControlMouseOver">
            <summary>
            Gets or sets a value that indicates whether the item is hovered.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISHeaderedSelectionItemControl.IsSelected">
            <summary>
            Gets or sets a value that indicates whether the item is selected.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISHeaderedSelectionItemControl.Owner">
            <summary>
            Gets the owner of the selection item.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISHeaderedSelectionItemControl.ParentControl">
            <summary>
            Gets the parent control of the selection item.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISHeaderedSelectionItemControl.ForceMultipleSelection">
            <summary>
            Gets a value that indicates whether multiple selection is desired.
            </summary>
        </member>
        <member name="E:Intersoft.Client.Framework.ISHeaderedSelectionItemControl.Selected">
            <summary>
            Occurs when item is selected.
            </summary>
        </member>
        <member name="E:Intersoft.Client.Framework.ISHeaderedSelectionItemControl.Unselected">
            <summary>
            Occurs when item is unselected.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.Input.Mouse">
            <summary>
            Provides event management for mouse operations, including mouse-related routed events and functions.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.Encryption.Hash">
            <summary>
            Hash functions are fundamental to modern cryptography. These functions map binary 
            strings of an arbitrary length to small binary strings of a fixed length, known as 
            hash values. A cryptographic hash function has the property that it is computationally
            infeasible to find two distinct inputs that hash to the same value. Hash functions 
            are commonly used with digital signatures and for data integrity.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.Encryption.Hash.#ctor(Intersoft.Client.Framework.Encryption.Hash.Provider)">
            <summary>
            Instantiate a new hash of the specified type
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.Encryption.Hash.Calculate(System.IO.Stream@)">
            <summary>
            Calculates hash on a stream of arbitrary length
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.Encryption.Hash.Calculate(Intersoft.Client.Framework.Encryption.Data)">
            <summary>
            Calculates hash for fixed length <see cref="T:ISNet.Encryption.Data" />
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.Encryption.Hash.Calculate(Intersoft.Client.Framework.Encryption.Data,Intersoft.Client.Framework.Encryption.Data)">
            <summary>
            Calculates hash for a string with a prefixed salt value. 
            A "salt" is random data prefixed to every hashed value to prevent 
            common dictionary attacks.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.Encryption.Hash.CalculatePrivate(System.Byte[])">
            <summary>
            Calculates hash for an array of bytes
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.Encryption.Hash.Value">
            <summary>
            Returns the previously calculated hash
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.Encryption.Hash.Provider">
            <summary>
            Type of hash; some are security oriented, others are fast and simple
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.AuthenticationEventHandler">
            <summary>
            Represents the method that will handle the Authentication events.
            </summary>
            <param name="sender">The object where the event handler is attached.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="T:Intersoft.Client.Framework.AuthenticatingEventHandler">
            <summary>
            Represents the method that will handle the Authenticating events.
            </summary>
            <param name="sender">The object where the event handler is attached.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="T:Intersoft.Client.Framework.RequestingAuthenticationEventHandler">
            <summary>
            Represents the method that will handle the RequestingAuthentication event.
            </summary>
            <param name="sender">The object where the event handler is attached.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="T:Intersoft.Client.Framework.AuthenticationEventArgs">
            <summary>
            Provides data for the common authentication events.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.AuthenticationEventArgs.User">
            <summary>
            Returns the authenticated user object.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.RequestingAuthenticationEventArgs">
            <summary>
            Provides data for RequestingAuthentication event.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.RequestingAuthenticationEventArgs.FromUri">
            <summary>
            Gets the uniform resource identifier (URI) of the page requesting authentication.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.RequestingAuthenticationEventArgs.RedirectUri">
            <summary>
            Gets or sets the uniform resource identifier (URI) to be redirected for user authentication.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.AuthenticatingEventArgs">
            <summary>
            Provides data for Authenticating event.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.AuthenticatingEventArgs.FromUri">
            <summary>
            Gets the uniform resource identifier (URI) of the page requesting authentication.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.AuthenticatingEventArgs.RedirectUri">
            <summary>
            Gets or sets the uniform resource identifier (URI) to be redirected for user authentication.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.AuthenticatingEventArgs.Content">
            <summary>
            Gets the content to be authenticated.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.AuthenticatingEventArgs.User">
            <summary>
            Gets the security principal associated to the container host.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.AuthenticatingEventArgs.IsAuthenticated">
            <summary>
            Gets or sets a value indicating whether the authentication process succeeded.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.AuthenticationEvents">
            <summary>
            Represents authentication-related routed events.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.AuthenticationEvents.RequestingAuthenticationEvent">
            <summary>
            Identifies the RequestingAuthentication routed event.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.AuthenticationEvents.AuthenticatingEvent">
            <summary>
            Identifies the Authenticating routed event.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.AuthenticationEvents.LoggedInEvent">
            <summary>
            Identifies the LoggedIn routed event.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.AuthenticationEvents.LoggedOutEvent">
            <summary>
            Identifies the LoggedOut routed event.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.AuthenticationEvents.AuthenticatedEvent">
            <summary>
            Identifies the Authenticated routed event.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.SubscribeOptions">
            <summary>
            Specifies the options used in Subscribe methods in an event aggregator.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.SubscribeOptions.Default">
            <summary>
            The default options.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.SubscribeOptions.UseBackgroundThread">
            <summary>
            Specifies the event to be invoked in a background thread.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.SubscribeOptions.UseStrongReference">
            <summary>
            Specifies the action and filter methods to be strongly referenced in the event subscription.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.SubscribeOptions.SupportsCancellation">
            <summary>
            Specifies whether the subscription supports cancellable events. This option is reserved for future implementation.
            </summary>
        </member>
        <member name="T:Intersoft.Client.Framework.DelegateEvent`1">
            <summary>
            Defines a generic class that manages publication and subscription to events.
            </summary>
            <typeparam name="TPayload">The type of message that will be passed to the subscribers.</typeparam>
        </member>
        <member name="M:Intersoft.Client.Framework.DelegateEvent`1.Subscribe(System.Action{`0})">
            <summary>
            Subscribes a delegate to an event that will be published on the <see cref="!:ThreadOption.PublisherThread"/>.
            <see cref="T:Intersoft.Client.Framework.DelegateEvent`1"/> will maintain a <seealso cref="T:System.WeakReference"/> to the target of the supplied <paramref name="action"/> delegate.
            </summary>
            <param name="action">The delegate that gets executed when the event is published.</param>
            <returns>A <see cref="T:Intersoft.Client.Framework.SubscriptionToken"/> that uniquely identifies the added subscription.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.DelegateEvent`1.Subscribe(System.Action{`0},Intersoft.Client.Framework.SubscribeOptions)">
            <summary>
            Subscribes a delegate to an event.
            DelegateEvent will maintain a <seealso cref="T:System.WeakReference"/> to the Target of the supplied <paramref name="action"/> delegate.
            </summary>
            <param name="action">The delegate that gets executed when the event is raised.</param>
            <param name="options">Specifies the options to apply to the subscription.</param>
            <returns>A <see cref="T:Intersoft.Client.Framework.SubscriptionToken"/> that uniquely identifies the added subscription.</returns>
        </member>
        <member name="M:Intersoft.Client.Framework.DelegateEvent`1.Subscribe(System.Action{`0},Intersoft.Client.Framework.SubscribeOptions,System.Predicate{`0})">
            <summary>
            Subscribes a delegate to an event.
            </summary>
            <param name="action">The delegate that gets executed when the event is published.</param>
            <param name="options">Specifies the options to apply to the subscription.</param>
            <param name="filter">Filter to evaluate if the subscriber should receive the event.</param>
            <returns>A <see cref="T:Intersoft.Client.Framework.SubscriptionToken"/> that uniquely identifies the added subscription.</returns>
            <remarks>
            If <paramref name="options"/> contains <see cref="!:UseStrongReference"/> flag, the action and filter references will be keep alive.
            In such case, you must explicitly call Unsubscribe for the event when disposing the subscriber in order to avoid memory leaks or unexpected behaviors.
            </remarks>
        </member>
        <member name="M:Intersoft.Client.Framework.DelegateEvent`1.Publish(`0)">
            <summary>
            Publishes the <see cref="T:Intersoft.Client.Framework.DelegateEvent`1"/>.
            </summary>
            <param name="payload">Message to pass to the subscribers.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.DelegateEvent`1.Unsubscribe(System.Action{`0})">
            <summary>
            Removes the first subscriber matching <seealso cref="T:System.Action`1"/> from the subscribers' list.
            </summary>
            <param name="subscriber">The <see cref="T:System.Action`1"/> used when subscribing to the event.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.DelegateEvent`1.Contains(System.Action{`0})">
            <summary>
            Returns <see langword="true"/> if there is a subscriber matching <seealso cref="T:System.Action`1"/>.
            </summary>
            <param name="subscriber">The <see cref="T:System.Action`1"/> used when subscribing to the event.</param>
            <returns><see langword="true"/> if there is an <seealso cref="T:System.Action`1"/> that matches; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:Intersoft.Client.Framework.Containers.CreateInstanceDelegateFactory">
            <summary>
            This class provides a method to build a delegate to create a specified type.  It is used
            by Register&lt;TType, TImp&gt;() to build the Func&lt;IDependencyResolver, TImp&gt; need
            to create the instance to be returned.  Also used by the Resolve methods if the type requested
            is a class, not an interface, and is not currently Registered in the container.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.Containers.CreateInstanceDelegateFactory.Create(System.Type)">
            <summary>
            Build a delegate to return an instance of the specified type given an instance of IocContainer.
            It looks for the public constructor with the most parameters.  The resulting method calls the container
            to resolve each parameter in the constructor.
            </summary>
            <param name="tImpl">The class to be resolved.</param>
            <returns>The delegate to create an instance of the class.</returns>
        </member>
        <member name="T:Intersoft.Client.Framework.ISMultipleSelectionControl">
            <summary>
            Serves as the base class for all Intersoft Multiple Selection controls.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ISMultipleSelectionControl.SelectedItemsProperty">
            <summary>
            Identifies the SelectedItems dependency property.
            </summary>
        </member>
        <member name="F:Intersoft.Client.Framework.ISMultipleSelectionControl.SelectionModeInternalProperty">
            <summary>
            Identifies the SelectionMode dependency property.
            </summary>        
        </member>
        <member name="M:Intersoft.Client.Framework.ISMultipleSelectionControl.ClearContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
            <summary>
            Undoes the effects of the ItemsControl.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Object) method.
            </summary>
            <param name="element">The container element.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISMultipleSelectionControl.ClearSelection">
            <summary>
            Clear current selection.
            </summary>        
        </member>
        <member name="M:Intersoft.Client.Framework.ISMultipleSelectionControl.ClearSelection(System.Object)">
            <summary>
            Clear current selection.
            </summary>
            <param name="except">Except specified object.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISMultipleSelectionControl.InitializeSelectedItems">
            <summary>
            Initialize selected items collection.
            </summary>
        </member>
        <member name="M:Intersoft.Client.Framework.ISMultipleSelectionControl.InitializeSelection">
            <summary>
            Initialize selection.
            </summary>        
        </member>
        <member name="M:Intersoft.Client.Framework.ISMultipleSelectionControl.InitializeSelection(System.Windows.DependencyObject,System.Object)">
            <summary>
            Initialize selection.
            </summary>
            <param name="element">The container element used to display the specified item.</param>
            <param name="item">The item to display.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISMultipleSelectionControl.IsMultipleSelection">
            <summary>
            Gets a value that indicates whether the current action is multiple selection.        
            </summary>
            <returns>Value that indicates whether the current action is multiple selection. True if multiple selection.</returns>        
        </member>
        <member name="M:Intersoft.Client.Framework.ISMultipleSelectionControl.OnSelectedIndexChanged(System.Int32,System.Int32)">
            <summary>
            Called when the value of the SelectedIndex property changes.
            </summary>
            <param name="oldIndex">The old value of the SelectedIndex property.</param>
            <param name="newIndex">The new value of the SelectedIndex property.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISMultipleSelectionControl.OnSelectedItemChanged(System.Object,System.Object)">
            <summary>
            Called when the value of the SelectedItem property changes.
            </summary>
            <param name="oldItem">The old value of the SelectedItem property.</param>
            <param name="newItem">The new value of the SelectedItem property.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISMultipleSelectionControl.OnSelectedValueChanged(System.Object,System.Object)">
            <summary>
            Called when the value of the SelectedValue property changes.
            </summary>
            <param name="oldValue">The old value of the SelectedValue property.</param>
            <param name="newValue">The new value of the SelectedValue property.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISMultipleSelectionControl.OnSelectionModeChanged(System.Object,System.Object)">
            <summary>
            Occurs when selection mode property is changed.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISMultipleSelectionControl.Select(System.Int32,System.Boolean)">
            <summary>
            Select the item on specified index.
            </summary>
            <param name="index">Index.</param>
            <param name="multipleSelection">Is multiple selection.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISMultipleSelectionControl.Select(System.Int32)">
            <summary>
            Select the item on specified index.
            </summary>
            <param name="index">Index.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISMultipleSelectionControl.Select(System.Object,System.Boolean)">
            <summary>
            Select the specified item.
            </summary>
            <param name="item">Item.</param>
            <param name="multipleSelection">Is multiple selection.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISMultipleSelectionControl.Select(System.Object)">
            <summary>
            Select the specified item.
            </summary>
            <param name="item">Item.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISMultipleSelectionControl.Unselect(System.Int32,System.Boolean)">
            <summary>
            Unselects item at specified index.
            </summary>
            <param name="index">Index.</param>
            <param name="multipleSelection">Is multiple selection.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISMultipleSelectionControl.Unselect(System.Int32)">
            <summary>
            Unselect the item at specified index.
            </summary>
            <param name="index">Index.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISMultipleSelectionControl.Unselect(System.Object,System.Boolean)">
            <summary>
            Unselect the specified item.
            </summary>
            <param name="item">Item.</param>
            <param name="multipleSelection">Is multiple selection.</param>
        </member>
        <member name="M:Intersoft.Client.Framework.ISMultipleSelectionControl.Unselect(System.Object)">
            <summary>
            Unselect the specified item.
            </summary>
            <param name="item">Item.</param>
        </member>
        <member name="P:Intersoft.Client.Framework.ISMultipleSelectionControl.SelectedItems">
            <summary>
            Gets or sets the selected items
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISMultipleSelectionControl.SelectionModeInternal">
            <summary>
            Gets or sets the selection mode.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISMultipleSelectionControl.SuspendCollectionChanged">
            <summary>
            Internal usage.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISMultipleSelectionControl.ChangeSelection">
            <summary>
            Internal usage.
            </summary>
        </member>
        <member name="P:Intersoft.Client.Framework.ISMultipleSelectionControl.SelectedItemsCollection">
            <summary>
            Gets selected items collection.
            </summary>
        </member>
    </members>
</doc>
